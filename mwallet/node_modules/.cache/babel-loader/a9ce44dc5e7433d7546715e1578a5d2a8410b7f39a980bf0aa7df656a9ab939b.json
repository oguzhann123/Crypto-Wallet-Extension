{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nvar defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json) {\n  try {\n    var data = JSON.parse(json);\n    var _version = data.version != null ? parseInt(data.version) : 0;\n    if (_version === 3) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\nfunction decrypt(data, key, ciphertext) {\n  var cipher = spelunk(data, \"crypto.cipher:string\");\n  if (cipher === \"aes-128-ctr\") {\n    var iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n    var aesCtr = new CTR(key, iv);\n    return hexlify(aesCtr.decrypt(ciphertext));\n  }\n  assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"decrypt\"\n  });\n}\nfunction getAccount(data, _key) {\n  var key = getBytes(_key);\n  var ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n  var computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n  assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n  var privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n  var address = computeAddress(privateKey);\n  if (data.address) {\n    var check = data.address.toLowerCase();\n    if (!check.startsWith(\"0x\")) {\n      check = \"0x\" + check;\n    }\n    assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n  }\n  var account = {\n    address: address,\n    privateKey: privateKey\n  };\n  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n  var version = spelunk(data, \"x-ethers.version:string\");\n  if (version === \"0.1\") {\n    var mnemonicKey = key.slice(32, 64);\n    var mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n    var mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n    var mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    account.mnemonic = {\n      path: spelunk(data, \"x-ethers.path:string\") || defaultPath,\n      locale: spelunk(data, \"x-ethers.locale:string\") || \"en\",\n      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n    };\n  }\n  return account;\n}\nfunction getDecryptKdfParams(data) {\n  var kdf = spelunk(data, \"crypto.kdf:string\");\n  if (kdf && typeof kdf === \"string\") {\n    if (kdf.toLowerCase() === \"scrypt\") {\n      var salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      var N = spelunk(data, \"crypto.kdfparams.n:int!\");\n      var r = spelunk(data, \"crypto.kdfparams.r:int!\");\n      var p = spelunk(data, \"crypto.kdfparams.p:int!\");\n      // Make sure N is a power of 2\n      assertArgument(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n      assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n      var dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n      return {\n        name: \"scrypt\",\n        salt: salt,\n        N: N,\n        r: r,\n        p: p,\n        dkLen: 64\n      };\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      var _salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      var prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n      var algorithm = prf.split(\"-\").pop();\n      assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n      var count = spelunk(data, \"crypto.kdfparams.c:int!\");\n      var _dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(_dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", _dkLen);\n      return {\n        name: \"pbkdf2\",\n        salt: _salt,\n        count: count,\n        dkLen: _dkLen,\n        algorithm: algorithm\n      };\n    }\n  }\n  assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json, _password) {\n  var data = JSON.parse(json);\n  var password = getPassword(_password);\n  var params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    var _salt2 = params.salt,\n      count = params.count,\n      _dkLen2 = params.dkLen,\n      algorithm = params.algorithm;\n    var _key2 = pbkdf2(password, _salt2, count, _dkLen2, algorithm);\n    return getAccount(data, _key2);\n  }\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params: params\n  });\n  var salt = params.salt,\n    N = params.N,\n    r = params.r,\n    p = params.p,\n    dkLen = params.dkLen;\n  var key = scryptSync(password, salt, N, r, p, dkLen);\n  return getAccount(data, key);\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport function decryptKeystoreJson(_x, _x2, _x3) {\n  return _decryptKeystoreJson.apply(this, arguments);\n}\nfunction _decryptKeystoreJson() {\n  _decryptKeystoreJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(json, _password, progress) {\n    var data, password, params, _salt3, count, _dkLen3, algorithm, _key3, salt, N, r, p, dkLen, key;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          data = JSON.parse(json);\n          password = getPassword(_password);\n          params = getDecryptKdfParams(data);\n          if (!(params.name === \"pbkdf2\")) {\n            _context.next = 15;\n            break;\n          }\n          if (!progress) {\n            _context.next = 8;\n            break;\n          }\n          progress(0);\n          _context.next = 8;\n          return stall(0);\n        case 8:\n          _salt3 = params.salt, count = params.count, _dkLen3 = params.dkLen, algorithm = params.algorithm;\n          _key3 = pbkdf2(password, _salt3, count, _dkLen3, algorithm);\n          if (!progress) {\n            _context.next = 14;\n            break;\n          }\n          progress(1);\n          _context.next = 14;\n          return stall(0);\n        case 14:\n          return _context.abrupt(\"return\", getAccount(data, _key3));\n        case 15:\n          assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n            params: params\n          });\n          salt = params.salt, N = params.N, r = params.r, p = params.p, dkLen = params.dkLen;\n          _context.next = 19;\n          return scrypt(password, salt, N, r, p, dkLen, progress);\n        case 19:\n          key = _context.sent;\n          return _context.abrupt(\"return\", getAccount(data, key));\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _decryptKeystoreJson.apply(this, arguments);\n}\nfunction getEncryptKdfParams(options) {\n  // Check/generate the salt\n  var salt = options.salt != null ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\n  // Override the scrypt password-based key derivation function parameters\n  var N = 1 << 17,\n    r = 8,\n    p = 1;\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n  assertArgument(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n  assertArgument(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n  assertArgument(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n  return {\n    name: \"scrypt\",\n    dkLen: 32,\n    salt: salt,\n    N: N,\n    r: r,\n    p: p\n  };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n  var privateKey = getBytes(account.privateKey, \"privateKey\");\n  // Override initialization vector\n  var iv = options.iv != null ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n  assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n  // Override the uuid\n  var uuidRandom = options.uuid != null ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n  assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n  // This will be used to encrypt the wallet (as per Web3 secret storage)\n  // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n  var derivedKey = key.slice(0, 16);\n  var macPrefix = key.slice(16, 32);\n  // Encrypt the private key\n  var aesCtr = new CTR(derivedKey, iv);\n  var ciphertext = getBytes(aesCtr.encrypt(privateKey));\n  // Compute the message authentication code, used to check the password\n  var mac = keccak256(concat([macPrefix, ciphertext]));\n  // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n  var data = {\n    address: account.address.substring(2).toLowerCase(),\n    id: uuidV4(uuidRandom),\n    version: 3,\n    Crypto: {\n      cipher: \"aes-128-ctr\",\n      cipherparams: {\n        iv: hexlify(iv).substring(2)\n      },\n      ciphertext: hexlify(ciphertext).substring(2),\n      kdf: \"scrypt\",\n      kdfparams: {\n        salt: hexlify(kdf.salt).substring(2),\n        n: kdf.N,\n        dklen: 32,\n        p: kdf.p,\n        r: kdf.r\n      },\n      mac: mac.substring(2)\n    }\n  };\n  // If we have a mnemonic, encrypt it into the JSON wallet\n  if (account.mnemonic) {\n    var client = options.client != null ? options.client : \"ethers/\".concat(version);\n    var path = account.mnemonic.path || defaultPath;\n    var locale = account.mnemonic.locale || \"en\";\n    var mnemonicKey = key.slice(32, 64);\n    var entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n    var mnemonicIv = randomBytes(16);\n    var mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    var mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n    var now = new Date();\n    var timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n    var gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n    data[\"x-ethers\"] = {\n      client: client,\n      gethFilename: gethFilename,\n      path: path,\n      locale: locale,\n      mnemonicCounter: hexlify(mnemonicIv).substring(2),\n      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n      version: \"0.1\"\n    };\n  }\n  return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  var passwordBytes = getPassword(password);\n  var kdf = getEncryptKdfParams(options);\n  var key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport function encryptKeystoreJson(_x4, _x5, _x6) {\n  return _encryptKeystoreJson.apply(this, arguments);\n}\nfunction _encryptKeystoreJson() {\n  _encryptKeystoreJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account, password, options) {\n    var passwordBytes, kdf, key;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (options == null) {\n            options = {};\n          }\n          passwordBytes = getPassword(password);\n          kdf = getEncryptKdfParams(options);\n          _context2.next = 5;\n          return scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n        case 5:\n          key = _context2.sent;\n          return _context2.abrupt(\"return\", _encryptKeystore(getBytes(key), kdf, account, options));\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _encryptKeystoreJson.apply(this, arguments);\n}","map":{"version":3,"names":["CTR","getAddress","keccak256","pbkdf2","randomBytes","scrypt","scryptSync","computeAddress","concat","getBytes","hexlify","uuidV4","assert","assertArgument","getPassword","spelunk","zpad","version","defaultPath","isKeystoreJson","json","data","JSON","parse","parseInt","error","decrypt","key","ciphertext","cipher","iv","aesCtr","operation","getAccount","_key","computedMAC","slice","substring","toLowerCase","privateKey","address","check","startsWith","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","mnemonic","path","locale","entropy","getDecryptKdfParams","kdf","salt","N","r","p","dkLen","name","prf","algorithm","split","pop","count","decryptKeystoreJsonSync","_password","password","params","stall","duration","Promise","resolve","setTimeout","decryptKeystoreJson","_x","_x2","_x3","_decryptKeystoreJson","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","progress","_salt3","_dkLen3","_key3","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getEncryptKdfParams","options","Number","isSafeInteger","BigInt","_encryptKeystore","length","uuidRandom","uuid","derivedKey","macPrefix","encrypt","mac","id","Crypto","cipherparams","kdfparams","n","dklen","client","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","mnemonicCounter","stringify","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","_x4","_x5","_x6","_encryptKeystoreJson","_callee2","_callee2$","_context2","progressCallback"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\wallet\\json-keystore.ts"],"sourcesContent":["/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\n\nimport { CTR } from \"aes-js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport {\n    concat, getBytes, hexlify, uuidV4, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport { version } from \"../_version.js\";\n\n\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n\n/**\n *  The contents of a JSON Keystore Wallet.\n */\nexport type KeystoreAccount = {\n    address: string;\n    privateKey: string;\n    mnemonic?: {\n        path?: string;\n        locale?: string;\n        entropy: string;\n    }\n};\n\n/**\n *  The parameters to use when encrypting a JSON Keystore Wallet.\n */\nexport type EncryptOptions = {\n   progressCallback?: ProgressCallback;\n   iv?: BytesLike;\n   entropy?: BytesLike;\n   client?: string;\n   salt?: BytesLike;\n   uuid?: string;\n   scrypt?: {\n       N?: number;\n       r?: number;\n       p?: number;\n   }\n}\n\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json: string): boolean {\n    try {\n        const data = JSON.parse(json);\n        const version = ((data.version != null) ? parseInt(data.version): 0);\n        if (version === 3) { return true; }\n    } catch (error) { }\n    return false;\n}\n\nfunction decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): string {\n    const cipher = spelunk<string>(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = spelunk<Uint8Array>(data, \"crypto.cipherparams.iv:data!\")\n        const aesCtr = new CTR(key, iv);\n        return hexlify(aesCtr.decrypt(ciphertext));\n    }\n\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\n\nfunction getAccount(data: any, _key: string): KeystoreAccount {\n    const key = getBytes(_key);\n    const ciphertext = spelunk<Uint8Array>(data, \"crypto.ciphertext:data!\");\n\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\n    assertArgument(computedMAC === spelunk<string>(data, \"crypto.mac:string!\").toLowerCase(),\n        \"incorrect password\", \"password\", \"[ REDACTED ]\");\n\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) { check = \"0x\" + check; }\n\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n\n    const account: KeystoreAccount = { address, privateKey };\n\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = spelunk(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n\n        const mnemonicCiphertext = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCounter:data!\");\n\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n\n        account.mnemonic = {\n            path: (spelunk<null | string>(data, \"x-ethers.path:string\") || defaultPath),\n            locale: (spelunk<null | string>(data, \"x-ethers.locale:string\") || \"en\"),\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n\n    return account;\n}\n\ntype ScryptParams = {\n    name: \"scrypt\";\n    salt: Uint8Array;\n    N: number;\n    r: number;\n    p: number;\n    dkLen: number;\n};\n\ntype KdfParams = ScryptParams | {\n    name: \"pbkdf2\";\n    salt: Uint8Array;\n    count: number;\n    dkLen: number;\n    algorithm: \"sha256\" | \"sha512\";\n};\n\nfunction getDecryptKdfParams<T>(data: any): KdfParams {\n    const kdf = spelunk(data, \"crypto.kdf:string\");\n    if (kdf && typeof(kdf) === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n            const N = spelunk<number>(data, \"crypto.kdfparams.n:int!\");\n            const r = spelunk<number>(data, \"crypto.kdfparams.r:int!\");\n            const p = spelunk<number>(data, \"crypto.kdfparams.p:int!\");\n\n            // Make sure N is a power of 2\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\n\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n\n            const prf = spelunk<string>(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n\n            const count = spelunk<number>(data, \"crypto.kdfparams.c:int!\");\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\n        }\n    }\n\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\n\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json: string, _password: string | Uint8Array): KeystoreAccount {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = scryptSync(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json: string, _password: string | Uint8Array, progress?: ProgressCallback): Promise<KeystoreAccount> {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\n\nfunction getEncryptKdfParams(options: EncryptOptions): ScryptParams {\n    // Check/generate the salt\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\"): randomBytes(32);\n\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) { N = options.scrypt.N; }\n        if (options.scrypt.r) { r = options.scrypt.r; }\n        if (options.scrypt.p) { p = options.scrypt.p; }\n    }\n    assertArgument(typeof(N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    assertArgument(typeof(r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    assertArgument(typeof(p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\n}\n\nfunction _encryptKeystore(key: Uint8Array, kdf: ScryptParams, account: KeystoreAccount, options: EncryptOptions): any {\n\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\n\n    // Override initialization vector\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\"): randomBytes(16);\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n\n    // Override the uuid\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\"): randomBytes(16);\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n\n    // Encrypt the private key\n    const aesCtr = new CTR(derivedKey, iv);\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([ macPrefix, ciphertext ]))\n\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data: { [key: string]: any } = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: hexlify(iv).substring(2),\n            },\n            ciphertext: hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: hexlify(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = (options.client != null) ? options.client: `ethers/${ version }`;\n\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n\n        const mnemonicKey = key.slice(32, 64);\n\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = randomBytes(16);\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n\n        const now = new Date();\n        const timestamp = (now.getUTCFullYear() + \"-\" +\n                           zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                           zpad(now.getUTCDate(), 2) + \"T\" +\n                           zpad(now.getUTCHours(), 2) + \"-\" +\n                           zpad(now.getUTCMinutes(), 2) + \"-\" +\n                           zpad(now.getUTCSeconds(), 2) + \".0Z\");\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\n\n        data[\"x-ethers\"] = {\n            client, gethFilename, path, locale,\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n\n    return JSON.stringify(data);\n}\n\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): string {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): Promise<string> {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}