{"ast":null,"code":"import _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _Symbol$iterator, _Symbol$iterator2;\n/**\n *  Explain fetching here...\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\nimport { getUrl } from \"./geturl.js\";\nvar MAX_ATTEMPTS = 12;\nvar SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nvar getUrlFunc = getUrl;\nvar reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nvar reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nvar locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nfunction dataGatewayFunc(_x, _x2) {\n  return _dataGatewayFunc.apply(this, arguments);\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction _dataGatewayFunc() {\n  _dataGatewayFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, signal) {\n    var match;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          match = url.match(reData);\n          if (match) {\n            _context2.next = 4;\n            break;\n          }\n          throw new Error(\"invalid data\");\n        case 4:\n          return _context2.abrupt(\"return\", new FetchResponse(200, \"OK\", {\n            \"content-type\": match[1] || \"text/plain\"\n          }, match[2] ? decodeBase64(match[3]) : unpercent(match[3])));\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url)));\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return _dataGatewayFunc.apply(this, arguments);\n}\nfunction getIpfsGatewayFunc(baseUrl) {\n  function gatewayIpfs(_x3, _x4) {\n    return _gatewayIpfs.apply(this, arguments);\n  }\n  function _gatewayIpfs() {\n    _gatewayIpfs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, signal) {\n      var match;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            match = url.match(reIpfs);\n            if (match) {\n              _context.next = 4;\n              break;\n            }\n            throw new Error(\"invalid link\");\n          case 4:\n            return _context.abrupt(\"return\", new FetchRequest(\"\".concat(baseUrl).concat(match[2])));\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url)));\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return _gatewayIpfs.apply(this, arguments);\n  }\n  return gatewayIpfs;\n}\nvar Gateways = {\n  \"data\": dataGatewayFunc,\n  \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nvar fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nvar _listeners = /*#__PURE__*/new WeakMap();\nvar _cancelled = /*#__PURE__*/new WeakMap();\nexport var FetchCancelSignal = /*#__PURE__*/function () {\n  function FetchCancelSignal(request) {\n    var _this = this;\n    _classCallCheck(this, FetchCancelSignal);\n    _classPrivateFieldInitSpec(this, _listeners, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _cancelled, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _listeners, []);\n    _classPrivateFieldSet(this, _cancelled, false);\n    fetchSignals.set(request, function () {\n      if (_classPrivateFieldGet(_this, _cancelled)) {\n        return;\n      }\n      _classPrivateFieldSet(_this, _cancelled, true);\n      var _iterator = _createForOfIteratorHelper(_classPrivateFieldGet(_this, _listeners)),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var listener = _step.value;\n          setTimeout(function () {\n            listener();\n          }, 0);\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      _classPrivateFieldSet(_this, _listeners, []);\n    });\n  }\n  _createClass(FetchCancelSignal, [{\n    key: \"addListener\",\n    value: function addListener(listener) {\n      assert(!_classPrivateFieldGet(this, _cancelled), \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fetchCancelSignal.addCancelListener\"\n      });\n      _classPrivateFieldGet(this, _listeners).push(listener);\n    }\n  }, {\n    key: \"cancelled\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _cancelled);\n    }\n  }, {\n    key: \"checkSignal\",\n    value: function checkSignal() {\n      assert(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n    }\n  }]);\n  return FetchCancelSignal;\n}();\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n  if (signal == null) {\n    throw new Error(\"missing signal; should not happen\");\n  }\n  signal.checkSignal();\n  return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nvar _allowInsecure = /*#__PURE__*/new WeakMap();\nvar _gzip = /*#__PURE__*/new WeakMap();\nvar _headers = /*#__PURE__*/new WeakMap();\nvar _method = /*#__PURE__*/new WeakMap();\nvar _timeout = /*#__PURE__*/new WeakMap();\nvar _url = /*#__PURE__*/new WeakMap();\nvar _body = /*#__PURE__*/new WeakMap();\nvar _bodyType = /*#__PURE__*/new WeakMap();\nvar _creds = /*#__PURE__*/new WeakMap();\nvar _preflight = /*#__PURE__*/new WeakMap();\nvar _process = /*#__PURE__*/new WeakMap();\nvar _retry = /*#__PURE__*/new WeakMap();\nvar _signal = /*#__PURE__*/new WeakMap();\nvar _throttle = /*#__PURE__*/new WeakMap();\nvar _send = /*#__PURE__*/new WeakSet();\n_Symbol$iterator = Symbol.iterator;\nexport var FetchRequest = /*#__PURE__*/function () {\n  /**\n   *  Create a new FetchRequest instance with default values.\n   *\n   *  Once created, each property may be set before issuing a\n   *  ``.send()`` to make the request.\n   */\n  function FetchRequest(url) {\n    _classCallCheck(this, FetchRequest);\n    _classPrivateMethodInitSpec(this, _send);\n    _classPrivateFieldInitSpec(this, _allowInsecure, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _gzip, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _headers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _method, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _timeout, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _url, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _body, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _bodyType, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _creds, {\n      writable: true,\n      value: void 0\n    });\n    // Hooks\n    _classPrivateFieldInitSpec(this, _preflight, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _process, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _retry, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signal, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _throttle, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _url, String(url));\n    _classPrivateFieldSet(this, _allowInsecure, false);\n    _classPrivateFieldSet(this, _gzip, true);\n    _classPrivateFieldSet(this, _headers, {});\n    _classPrivateFieldSet(this, _method, \"\");\n    _classPrivateFieldSet(this, _timeout, 300000);\n    _classPrivateFieldSet(this, _throttle, {\n      slotInterval: SLOT_INTERVAL,\n      maxAttempts: MAX_ATTEMPTS\n    });\n  }\n  _createClass(FetchRequest, [{\n    key: \"url\",\n    get:\n    /**\n     *  The fetch URI to requrest.\n     */\n    function get() {\n      return _classPrivateFieldGet(this, _url);\n    },\n    set: function set(url) {\n      _classPrivateFieldSet(this, _url, String(url));\n    }\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``) and the .\n     *\n     *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n  }, {\n    key: \"body\",\n    get: function get() {\n      if (_classPrivateFieldGet(this, _body) == null) {\n        return null;\n      }\n      return new Uint8Array(_classPrivateFieldGet(this, _body));\n    },\n    set: function set(body) {\n      if (body == null) {\n        _classPrivateFieldSet(this, _body, undefined);\n        _classPrivateFieldSet(this, _bodyType, undefined);\n      } else if (typeof body === \"string\") {\n        _classPrivateFieldSet(this, _body, toUtf8Bytes(body));\n        _classPrivateFieldSet(this, _bodyType, \"text/plain\");\n      } else if (body instanceof Uint8Array) {\n        _classPrivateFieldSet(this, _body, body);\n        _classPrivateFieldSet(this, _bodyType, \"application/octet-stream\");\n      } else if (typeof body === \"object\") {\n        _classPrivateFieldSet(this, _body, toUtf8Bytes(JSON.stringify(body)));\n        _classPrivateFieldSet(this, _bodyType, \"application/json\");\n      } else {\n        throw new Error(\"invalid body\");\n      }\n    }\n    /**\n     *  Returns true if the request has a body.\n     */\n  }, {\n    key: \"hasBody\",\n    value: function hasBody() {\n      return _classPrivateFieldGet(this, _body) != null;\n    }\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n  }, {\n    key: \"method\",\n    get: function get() {\n      if (_classPrivateFieldGet(this, _method)) {\n        return _classPrivateFieldGet(this, _method);\n      }\n      if (this.hasBody()) {\n        return \"POST\";\n      }\n      return \"GET\";\n    },\n    set: function set(method) {\n      if (method == null) {\n        method = \"\";\n      }\n      _classPrivateFieldSet(this, _method, String(method).toUpperCase());\n    }\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any chnages will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n  }, {\n    key: \"headers\",\n    get: function get() {\n      var headers = Object.assign({}, _classPrivateFieldGet(this, _headers));\n      if (_classPrivateFieldGet(this, _creds)) {\n        headers[\"authorization\"] = \"Basic \".concat(encodeBase64(toUtf8Bytes(_classPrivateFieldGet(this, _creds))));\n      }\n      ;\n      if (this.allowGzip) {\n        headers[\"accept-encoding\"] = \"gzip\";\n      }\n      if (headers[\"content-type\"] == null && _classPrivateFieldGet(this, _bodyType)) {\n        headers[\"content-type\"] = _classPrivateFieldGet(this, _bodyType);\n      }\n      if (this.body) {\n        headers[\"content-length\"] = String(this.body.length);\n      }\n      return headers;\n    }\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(key) {\n      return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      _classPrivateFieldGet(this, _headers)[String(key).toLowerCase()] = String(value);\n    }\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n  }, {\n    key: \"clearHeaders\",\n    value: function clearHeaders() {\n      _classPrivateFieldSet(this, _headers, {});\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      var headers = this.headers;\n      var keys = Object.keys(headers);\n      var index = 0;\n      return {\n        next: function next() {\n          if (index < keys.length) {\n            var key = keys[index++];\n            return {\n              value: [key, headers[key]],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n  }, {\n    key: \"credentials\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _creds) || null;\n    }\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n  }, {\n    key: \"setCredentials\",\n    value: function setCredentials(username, password) {\n      assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n      _classPrivateFieldSet(this, _creds, \"\".concat(username, \":\").concat(password));\n    }\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n  }, {\n    key: \"allowGzip\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _gzip);\n    }\n  }, {\n    key: \"allowGzip\",\n    set: function set(value) {\n      _classPrivateFieldSet(this, _gzip, !!value);\n    }\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n  }, {\n    key: \"allowInsecureAuthentication\",\n    get: function get() {\n      return !!_classPrivateFieldGet(this, _allowInsecure);\n    }\n  }, {\n    key: \"allowInsecureAuthentication\",\n    set: function set(value) {\n      _classPrivateFieldSet(this, _allowInsecure, !!value);\n    }\n    /**\n     *  The timeout (in milliseconds) to wait for a complere response.\n     *  //(default: 5 minutes)//\n     */\n  }, {\n    key: \"timeout\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _timeout);\n    }\n  }, {\n    key: \"timeout\",\n    set: function set(timeout) {\n      assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n      _classPrivateFieldSet(this, _timeout, timeout);\n    }\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n  }, {\n    key: \"preflightFunc\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _preflight) || null;\n    }\n  }, {\n    key: \"preflightFunc\",\n    set: function set(preflight) {\n      _classPrivateFieldSet(this, _preflight, preflight);\n    }\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n  }, {\n    key: \"processFunc\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _process) || null;\n    }\n  }, {\n    key: \"processFunc\",\n    set: function set(process) {\n      _classPrivateFieldSet(this, _process, process);\n    }\n    /**\n     *  This function is called on each retry attempt.\n     */\n  }, {\n    key: \"retryFunc\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _retry) || null;\n    }\n  }, {\n    key: \"retryFunc\",\n    set: function set(retry) {\n      _classPrivateFieldSet(this, _retry, retry);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"<FetchRequest method=\".concat(JSON.stringify(this.method), \" url=\").concat(JSON.stringify(this.url), \" headers=\").concat(JSON.stringify(this.headers), \" body=\").concat(_classPrivateFieldGet(this, _body) ? hexlify(_classPrivateFieldGet(this, _body)) : \"null\", \">\");\n    }\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n  }, {\n    key: \"setThrottleParams\",\n    value: function setThrottleParams(params) {\n      if (params.slotInterval != null) {\n        _classPrivateFieldGet(this, _throttle).slotInterval = params.slotInterval;\n      }\n      if (params.maxAttempts != null) {\n        _classPrivateFieldGet(this, _throttle).maxAttempts = params.maxAttempts;\n      }\n    }\n  }, {\n    key: \"send\",\n    value:\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    function send() {\n      assert(_classPrivateFieldGet(this, _signal) == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fetchRequest.send\"\n      });\n      _classPrivateFieldSet(this, _signal, new FetchCancelSignal(this));\n      return _classPrivateMethodGet(this, _send, _send2).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n    }\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      assert(_classPrivateFieldGet(this, _signal) != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fetchRequest.cancel\"\n      });\n      var signal = fetchSignals.get(this);\n      if (!signal) {\n        throw new Error(\"missing signal; should not happen\");\n      }\n      signal();\n    }\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n  }, {\n    key: \"redirect\",\n    value: function redirect(location) {\n      // Redirection; for now we only support absolute locataions\n      var current = this.url.split(\":\")[0].toLowerCase();\n      var target = location.split(\":\")[0].toLowerCase();\n      // Don't allow redirecting:\n      // - non-GET requests\n      // - downgrading the security (e.g. https => http)\n      // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n      assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), \"unsupported redirect\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"redirect(\".concat(this.method, \" \").concat(JSON.stringify(this.url), \" => \").concat(JSON.stringify(location), \")\")\n      });\n      // Create a copy of this request, with a new URL\n      var req = new FetchRequest(location);\n      req.method = \"GET\";\n      req.allowGzip = this.allowGzip;\n      req.timeout = this.timeout;\n      _classPrivateFieldSet(req, _headers, Object.assign({}, _classPrivateFieldGet(this, _headers)));\n      if (_classPrivateFieldGet(this, _body)) {\n        _classPrivateFieldSet(req, _body, new Uint8Array(_classPrivateFieldGet(this, _body)));\n      }\n      _classPrivateFieldSet(req, _bodyType, _classPrivateFieldGet(this, _bodyType));\n      // Do not forward credentials unless on the same domain; only absolute\n      //req.allowInsecure = false;\n      // paths are currently supported; may want a way to specify to forward?\n      //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n      return req;\n    }\n    /**\n     *  Create a new copy of this request.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new FetchRequest(this.url);\n      // Preserve \"default method\" (i.e. null)\n      _classPrivateFieldSet(clone, _method, _classPrivateFieldGet(this, _method));\n      // Preserve \"default body\" with type, copying the Uint8Array is present\n      if (_classPrivateFieldGet(this, _body)) {\n        _classPrivateFieldSet(clone, _body, _classPrivateFieldGet(this, _body));\n      }\n      _classPrivateFieldSet(clone, _bodyType, _classPrivateFieldGet(this, _bodyType));\n      // Preserve \"default headers\"\n      _classPrivateFieldSet(clone, _headers, Object.assign({}, _classPrivateFieldGet(this, _headers)));\n      // Credentials is readonly, so we copy internally\n      _classPrivateFieldSet(clone, _creds, _classPrivateFieldGet(this, _creds));\n      if (this.allowGzip) {\n        clone.allowGzip = true;\n      }\n      clone.timeout = this.timeout;\n      if (this.allowInsecureAuthentication) {\n        clone.allowInsecureAuthentication = true;\n      }\n      _classPrivateFieldSet(clone, _preflight, _classPrivateFieldGet(this, _preflight));\n      _classPrivateFieldSet(clone, _process, _classPrivateFieldGet(this, _process));\n      _classPrivateFieldSet(clone, _retry, _classPrivateFieldGet(this, _retry));\n      return clone;\n    }\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n  }], [{\n    key: \"lockConfig\",\n    value: function lockConfig() {\n      locked = true;\n    }\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n  }, {\n    key: \"getGateway\",\n    value: function getGateway(scheme) {\n      return Gateways[scheme.toLowerCase()] || null;\n    }\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n  }, {\n    key: \"registerGateway\",\n    value: function registerGateway(scheme, func) {\n      scheme = scheme.toLowerCase();\n      if (scheme === \"http\" || scheme === \"https\") {\n        throw new Error(\"cannot intercept \".concat(scheme, \"; use registerGetUrl\"));\n      }\n      if (locked) {\n        throw new Error(\"gateways locked\");\n      }\n      Gateways[scheme] = func;\n    }\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n  }, {\n    key: \"registerGetUrl\",\n    value: function registerGetUrl(getUrl) {\n      if (locked) {\n        throw new Error(\"gateways locked\");\n      }\n      getUrlFunc = getUrl;\n    }\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n  }, {\n    key: \"createDataGateway\",\n    value: function createDataGateway() {\n      return dataGatewayFunc;\n    }\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n  }, {\n    key: \"createIpfsGatewayFunc\",\n    value: function createIpfsGatewayFunc(baseUrl) {\n      return getIpfsGatewayFunc(baseUrl);\n    }\n  }]);\n  return FetchRequest;\n}();\nfunction _send2(_x5, _x6, _x7, _x8, _x9) {\n  return _send3.apply(this, arguments);\n}\nfunction _send3() {\n  _send3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(attempt, expires, delay, _request, _response) {\n    var req, scheme, result, _response2, resp, response, _req$redirect, location, _req$clone, retryAfter, _delay, _req$clone2, _delay2;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(attempt >= _classPrivateFieldGet(this, _throttle).maxAttempts)) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\", _response.makeServerError(\"exceeded maximum retry limit\"));\n        case 2:\n          assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\",\n            reason: \"timeout\",\n            request: _request\n          });\n          if (!(delay > 0)) {\n            _context3.next = 6;\n            break;\n          }\n          _context3.next = 6;\n          return wait(delay);\n        case 6:\n          req = this.clone();\n          scheme = (req.url.split(\":\")[0] || \"\").toLowerCase(); // Process any Gateways\n          if (!(scheme in Gateways)) {\n            _context3.next = 27;\n            break;\n          }\n          _context3.next = 11;\n          return Gateways[scheme](req.url, checkSignal(_classPrivateFieldGet(_request, _signal)));\n        case 11:\n          result = _context3.sent;\n          if (!(result instanceof FetchResponse)) {\n            _context3.next = 26;\n            break;\n          }\n          _response2 = result;\n          if (!this.processFunc) {\n            _context3.next = 25;\n            break;\n          }\n          checkSignal(_classPrivateFieldGet(_request, _signal));\n          _context3.prev = 16;\n          _context3.next = 19;\n          return this.processFunc(req, _response2);\n        case 19:\n          _response2 = _context3.sent;\n          _context3.next = 25;\n          break;\n        case 22:\n          _context3.prev = 22;\n          _context3.t0 = _context3[\"catch\"](16);\n          // Something went wrong during processing; throw a 5xx server error\n          if (_context3.t0.throttle == null || typeof _context3.t0.stall !== \"number\") {\n            _response2.makeServerError(\"error in post-processing function\", _context3.t0).assertOk();\n          }\n          // Ignore throttling\n        case 25:\n          return _context3.abrupt(\"return\", _response2);\n        case 26:\n          req = result;\n        case 27:\n          if (!this.preflightFunc) {\n            _context3.next = 31;\n            break;\n          }\n          _context3.next = 30;\n          return this.preflightFunc(req);\n        case 30:\n          req = _context3.sent;\n        case 31:\n          _context3.next = 33;\n          return getUrlFunc(req, checkSignal(_classPrivateFieldGet(_request, _signal)));\n        case 33:\n          resp = _context3.sent;\n          response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n          if (!(response.statusCode === 301 || response.statusCode === 302)) {\n            _context3.next = 46;\n            break;\n          }\n          _context3.prev = 36;\n          location = response.headers.location || \"\";\n          return _context3.abrupt(\"return\", _classPrivateMethodGet(_req$redirect = req.redirect(location), _send, _send2).call(_req$redirect, attempt + 1, expires, 0, _request, response));\n        case 41:\n          _context3.prev = 41;\n          _context3.t1 = _context3[\"catch\"](36);\n        case 43:\n          return _context3.abrupt(\"return\", response);\n        case 46:\n          if (!(response.statusCode === 429)) {\n            _context3.next = 57;\n            break;\n          }\n          _context3.t2 = this.retryFunc == null;\n          if (_context3.t2) {\n            _context3.next = 52;\n            break;\n          }\n          _context3.next = 51;\n          return this.retryFunc(req, response, attempt);\n        case 51:\n          _context3.t2 = _context3.sent;\n        case 52:\n          if (!_context3.t2) {\n            _context3.next = 57;\n            break;\n          }\n          retryAfter = response.headers[\"retry-after\"];\n          _delay = _classPrivateFieldGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n          if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n            _delay = parseInt(retryAfter);\n          }\n          return _context3.abrupt(\"return\", _classPrivateMethodGet(_req$clone = req.clone(), _send, _send2).call(_req$clone, attempt + 1, expires, _delay, _request, response));\n        case 57:\n          if (!this.processFunc) {\n            _context3.next = 72;\n            break;\n          }\n          checkSignal(_classPrivateFieldGet(_request, _signal));\n          _context3.prev = 59;\n          _context3.next = 62;\n          return this.processFunc(req, response);\n        case 62:\n          response = _context3.sent;\n          _context3.next = 72;\n          break;\n        case 65:\n          _context3.prev = 65;\n          _context3.t3 = _context3[\"catch\"](59);\n          // Something went wrong during processing; throw a 5xx server error\n          if (_context3.t3.throttle == null || typeof _context3.t3.stall !== \"number\") {\n            response.makeServerError(\"error in post-processing function\", _context3.t3).assertOk();\n          }\n          // Throttle\n          _delay2 = _classPrivateFieldGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n          ;\n          if (_context3.t3.stall >= 0) {\n            _delay2 = _context3.t3.stall;\n          }\n          return _context3.abrupt(\"return\", _classPrivateMethodGet(_req$clone2 = req.clone(), _send, _send2).call(_req$clone2, attempt + 1, expires, _delay2, _request, response));\n        case 72:\n          return _context3.abrupt(\"return\", response);\n        case 73:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, this, [[16, 22], [36, 41], [59, 65]]);\n  }));\n  return _send3.apply(this, arguments);\n}\n;\n/**\n *  The response for a FetchREquest.\n */\nvar _statusCode = /*#__PURE__*/new WeakMap();\nvar _statusMessage = /*#__PURE__*/new WeakMap();\nvar _headers2 = /*#__PURE__*/new WeakMap();\nvar _body2 = /*#__PURE__*/new WeakMap();\nvar _request2 = /*#__PURE__*/new WeakMap();\nvar _error = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nexport var FetchResponse = /*#__PURE__*/function () {\n  function FetchResponse(statusCode, statusMessage, headers, body, request) {\n    _classCallCheck(this, FetchResponse);\n    _classPrivateFieldInitSpec(this, _statusCode, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _statusMessage, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _headers2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _body2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _request2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _error, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _statusCode, statusCode);\n    _classPrivateFieldSet(this, _statusMessage, statusMessage);\n    _classPrivateFieldSet(this, _headers2, Object.keys(headers).reduce(function (accum, k) {\n      accum[k.toLowerCase()] = String(headers[k]);\n      return accum;\n    }, {}));\n    _classPrivateFieldSet(this, _body2, body == null ? null : new Uint8Array(body));\n    _classPrivateFieldSet(this, _request2, request || null);\n    _classPrivateFieldSet(this, _error, {\n      message: \"\"\n    });\n  }\n  /**\n   *  Return a Response with matching headers and body, but with\n   *  an error status code (i.e. 599) and %%message%% with an\n   *  optional %%error%%.\n   */\n  _createClass(FetchResponse, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"<FetchResponse status=\".concat(this.statusCode, \" body=\").concat(_classPrivateFieldGet(this, _body2) ? hexlify(_classPrivateFieldGet(this, _body2)) : \"null\", \">\");\n    }\n    /**\n     *  The response status code.\n     */\n  }, {\n    key: \"statusCode\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _statusCode);\n    }\n    /**\n     *  The response status message.\n     */\n  }, {\n    key: \"statusMessage\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _statusMessage);\n    }\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n  }, {\n    key: \"headers\",\n    get: function get() {\n      return Object.assign({}, _classPrivateFieldGet(this, _headers2));\n    }\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n  }, {\n    key: \"body\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _body2) == null ? null : new Uint8Array(_classPrivateFieldGet(this, _body2));\n    }\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n  }, {\n    key: \"bodyText\",\n    get: function get() {\n      try {\n        return _classPrivateFieldGet(this, _body2) == null ? \"\" : toUtf8String(_classPrivateFieldGet(this, _body2));\n      } catch (error) {\n        assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"bodyText\",\n          info: {\n            response: this\n          }\n        });\n      }\n    }\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n  }, {\n    key: \"bodyJson\",\n    get: function get() {\n      try {\n        return JSON.parse(this.bodyText);\n      } catch (error) {\n        assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"bodyJson\",\n          info: {\n            response: this\n          }\n        });\n      }\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      var headers = this.headers;\n      var keys = Object.keys(headers);\n      var index = 0;\n      return {\n        next: function next() {\n          if (index < keys.length) {\n            var key = keys[index++];\n            return {\n              value: [key, headers[key]],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n  }, {\n    key: \"makeServerError\",\n    value: function makeServerError(message, error) {\n      var statusMessage;\n      if (!message) {\n        message = \"\".concat(this.statusCode, \" \").concat(this.statusMessage);\n        statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(message, \")\");\n      } else {\n        statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(this.statusCode, \" \").concat(this.statusMessage, \"; \").concat(message, \")\");\n      }\n      var response = new FetchResponse(599, statusMessage, this.headers, this.body, _classPrivateFieldGet(this, _request2) || undefined);\n      _classPrivateFieldSet(response, _error, {\n        message: message,\n        error: error\n      });\n      return response;\n    }\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n  }, {\n    key: \"throwThrottleError\",\n    value: function throwThrottleError(message, stall) {\n      if (stall == null) {\n        stall = -1;\n      } else {\n        assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n      }\n      var error = new Error(message || \"throttling requests\");\n      defineProperties(error, {\n        stall: stall,\n        throttle: true\n      });\n      throw error;\n    }\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(key) {\n      return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Returns true of the response has a body.\n     */\n  }, {\n    key: \"hasBody\",\n    value: function hasBody() {\n      return _classPrivateFieldGet(this, _body2) != null;\n    }\n    /**\n     *  The request made for this response.\n     */\n  }, {\n    key: \"request\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _request2);\n    }\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n  }, {\n    key: \"ok\",\n    value: function ok() {\n      return _classPrivateFieldGet(this, _error).message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n    }\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n  }, {\n    key: \"assertOk\",\n    value: function assertOk() {\n      if (this.ok()) {\n        return;\n      }\n      var _classPrivateFieldGet2 = _classPrivateFieldGet(this, _error),\n        message = _classPrivateFieldGet2.message,\n        error = _classPrivateFieldGet2.error;\n      if (message === \"\") {\n        message = \"server response \".concat(this.statusCode, \" \").concat(this.statusMessage);\n      }\n      assert(false, message, \"SERVER_ERROR\", {\n        request: this.request || \"unknown request\",\n        response: this,\n        error: error\n      });\n    }\n  }]);\n  return FetchResponse;\n}();\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\nfunction wait(delay) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, delay);\n  });\n}","map":{"version":3,"names":["decodeBase64","encodeBase64","hexlify","assert","assertArgument","defineProperties","toUtf8Bytes","toUtf8String","getUrl","MAX_ATTEMPTS","SLOT_INTERVAL","getUrlFunc","reData","RegExp","reIpfs","locked","dataGatewayFunc","_x","_x2","_dataGatewayFunc","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","url","signal","match","wrap","_callee2$","_context2","prev","next","Error","abrupt","FetchResponse","unpercent","t0","FetchRequest","stop","getIpfsGatewayFunc","baseUrl","gatewayIpfs","_x3","_x4","_gatewayIpfs","_callee","_callee$","_context","concat","Gateways","fetchSignals","WeakMap","_listeners","_cancelled","FetchCancelSignal","request","_this","_classCallCheck","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","set","_classPrivateFieldGet","_iterator","_createForOfIteratorHelper","_step","_loop","listener","setTimeout","s","n","done","err","e","f","_createClass","key","addListener","operation","push","get","checkSignal","cancelled","_allowInsecure","_gzip","_headers","_method","_timeout","_url","_body","_bodyType","_creds","_preflight","_process","_retry","_signal","_throttle","_send","WeakSet","_Symbol$iterator","Symbol","iterator","_classPrivateMethodInitSpec","String","slotInterval","maxAttempts","Uint8Array","body","undefined","JSON","stringify","hasBody","method","toUpperCase","headers","Object","assign","allowGzip","length","getHeader","toLowerCase","setHeader","clearHeaders","keys","index","setCredentials","username","password","timeout","preflight","process","retry","toString","setThrottleParams","params","send","_classPrivateMethodGet","_send2","call","getTime","cancel","redirect","location","current","split","target","req","clone","allowInsecureAuthentication","lockConfig","getGateway","scheme","registerGateway","func","registerGetUrl","createDataGateway","createIpfsGatewayFunc","_x5","_x6","_x7","_x8","_x9","_send3","_callee3","attempt","expires","delay","_request","_response","result","_response2","resp","response","_req$redirect","_req$clone","retryAfter","_delay","_req$clone2","_delay2","_callee3$","_context3","makeServerError","reason","wait","sent","processFunc","throttle","stall","assertOk","preflightFunc","statusCode","statusMessage","t1","t2","retryFunc","Math","trunc","random","pow","parseInt","t3","_statusCode","_statusMessage","_headers2","_body2","_request2","_error","_Symbol$iterator2","reduce","accum","k","message","error","info","parse","bodyText","throwThrottleError","Number","isInteger","ok","_classPrivateFieldGet2","Date","replace","all","code","fromCharCode","Promise","resolve"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\utils\\fetch.ts"],"sourcesContent":["/**\n *  Explain fetching here...\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\"\n\nimport { getUrl } from \"./geturl.js\";\n\n\nexport type GetUrlResponse = {\n    statusCode: number,\n    statusMessage: string,\n    headers: Record<string, string>,\n    body: null | Uint8Array\n};\n\nexport type FetchThrottleParams = {\n    maxAttempts?: number;\n    slotInterval?: number;\n};\n/**\n *  Called before any network request, allowing updated headers (e.g. Bearer tokens), etc.\n */\nexport type FetchPreflightFunc = (req: FetchRequest) => Promise<FetchRequest>;\n\n/**\n *  Called on the response, allowing client-based throttling logic or post-processing.\n */\nexport type FetchProcessFunc = (req: FetchRequest, resp: FetchResponse) => Promise<FetchResponse>;\n\n/**\n *  Called prior to each retry; return true to retry, false to abort.\n */\nexport type FetchRetryFunc = (req: FetchRequest, resp: FetchResponse, attempt: number) => Promise<boolean>;\n\n/**\n *  Called on Gateway URLs.\n */\nexport type FetchGatewayFunc = (url: string, signal?: FetchCancelSignal) => Promise<FetchRequest | FetchResponse>;\n\n/**\n *  Used to perform a fetch; use this to override the underlying network\n *  fetch layer. In NodeJS, the default uses the \"http\" and \"https\" libraries\n *  and in the browser ``fetch`` is used. If you wish to use Axios, this is\n *  how you would register it.\n */\nexport type FetchGetUrlFunc = (req: FetchRequest, signal?: FetchCancelSignal) => Promise<GetUrlResponse>;\n\n\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n\n// The global FetchGetUrlFunc implementation.\nlet getUrlFunc: FetchGetUrlFunc = getUrl;\n\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n\n// If locked, new Gateways cannot be added\nlet locked = false;\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url: string, signal?: FetchCancelSignal): Promise<FetchResponse> {\n    try {\n        const match = url.match(reData);\n        if (!match) { throw new Error(\"invalid data\"); }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]): unpercent(match[3])));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", { }, null, new FetchRequest(url));\n    }\n}\n\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n    async function gatewayIpfs(url: string, signal?: FetchCancelSignal): Promise<FetchRequest | FetchResponse> {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) { throw new Error(\"invalid link\"); }\n            return new FetchRequest(`${ baseUrl }${ match[2] }`);\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", { }, null, new FetchRequest(url));\n        }\n    }\n\n    return gatewayIpfs;\n}\n\nconst Gateways: Record<string, FetchGatewayFunc> = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\n\nconst fetchSignals: WeakMap<FetchRequest, () => void> = new WeakMap();\n\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners: Array<() => void>;\n    #cancelled: boolean;\n\n    constructor(request: FetchRequest) {\n        this.#listeners = [ ];\n        this.#cancelled = false;\n\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) { return; }\n            this.#cancelled = true;\n\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [ ];\n        });\n    }\n\n    addListener(listener: () => void): void {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n\n    get cancelled(): boolean { return this.#cancelled; }\n\n    checkSignal(): void {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", { });\n    }\n}\n\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal?: FetchCancelSignal): FetchCancelSignal {\n    if (signal == null) { throw new Error(\"missing signal; should not happen\"); }\n    signal.checkSignal();\n    return signal;\n}\n\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest implements Iterable<[ key: string, value: string ]> {\n    #allowInsecure: boolean;\n    #gzip: boolean;\n    #headers: Record<string, string>;\n    #method: string;\n    #timeout: number;\n    #url: string;\n\n    #body?: Uint8Array;\n    #bodyType?: string;\n    #creds?: string;\n\n    // Hooks\n    #preflight?: null | FetchPreflightFunc;\n    #process?: null | FetchProcessFunc;\n    #retry?: null | FetchRetryFunc;\n\n    #signal?: FetchCancelSignal;\n\n    #throttle: Required<FetchThrottleParams>;\n\n    /**\n     *  The fetch URI to requrest.\n     */\n    get url(): string { return this.#url; }\n    set url(url: string) {\n        this.#url = String(url);\n    }\n\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``) and the .\n     *\n     *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body(): null | Uint8Array {\n        if (this.#body == null) { return null; }\n        return new Uint8Array(this.#body);\n    }\n    set body(body: null | string | Readonly<object> | Readonly<Uint8Array>) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        } else if (typeof(body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        } else if (typeof(body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody(): this is (FetchRequest & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method(): string {\n        if (this.#method) { return this.#method; }\n        if (this.hasBody()) { return \"POST\"; }\n        return \"GET\";\n    }\n    set method(method: null | string) {\n        if (method == null) { method = \"\"; }\n        this.#method = String(method).toUpperCase();\n    }\n\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any chnages will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers(): Record<string, string> {\n        const headers = Object.assign({ }, this.#headers);\n\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${ encodeBase64(toUtf8Bytes(this.#creds)) }`;\n        };\n\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) { headers[\"content-length\"] = String(this.body.length); }\n\n        return headers;\n    }\n\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key: string, value: string | number): void {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders(): void {\n        this.#headers = { };\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials(): null | string {\n        return this.#creds || null;\n    }\n\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username: string, password: string): void {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${ username }:${ password }`;\n    }\n\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip(): boolean {\n        return this.#gzip;\n    }\n    set allowGzip(value: boolean) {\n        this.#gzip = !!value;\n    }\n\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication(): boolean {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value: boolean) {\n        this.#allowInsecure = !!value;\n    }\n\n    /**\n     *  The timeout (in milliseconds) to wait for a complere response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout(): number { return this.#timeout; }\n    set timeout(timeout: number) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc(): null | FetchPreflightFunc {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight: null | FetchPreflightFunc) {\n        this.#preflight = preflight;\n    }\n\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc(): null | FetchProcessFunc {\n        return this.#process || null;\n    }\n    set processFunc(process: null | FetchProcessFunc) {\n        this.#process = process;\n    }\n\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc(): null | FetchRetryFunc {\n        return this.#retry || null;\n    }\n    set retryFunc(retry: null | FetchRetryFunc) {\n        this.#retry = retry;\n    }\n\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */\n    constructor(url: string) {\n        this.#url = String(url);\n\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = { };\n        this.#method = \"\";\n        this.#timeout = 300000;\n\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n    }\n\n    toString(): string {\n        return `<FetchRequest method=${ JSON.stringify(this.method) } url=${ JSON.stringify(this.url) } headers=${ JSON.stringify(this.headers) } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params: FetchThrottleParams): void {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n\n    async #send(attempt: number, expires: number, delay: number, _request: FetchRequest, _response: FetchResponse): Promise<FetchResponse> {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n\n        if (delay > 0) { await wait(delay); }\n\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    } catch (error: any) {\n\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n\n                        // Ignore throttling\n                    }\n                }\n\n                return response;\n            }\n            req = result;\n        }\n\n        // We have a preflight function; update the request\n        if (this.preflightFunc) { req = await this.preflightFunc(req); }\n\n        const resp = await getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n\n        if (response.statusCode === 301 || response.statusCode === 302) {\n\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) { }\n\n            // Things won't get any better on another attempt; abort\n            return response;\n\n        } else if (response.statusCode === 429) {\n\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            } catch (error: any) {\n\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));;\n                if (error.stall >= 0) { delay = error.stall; }\n\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        return response;\n    }\n\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send(): Promise<FetchResponse> {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", { }, null, this));\n    }\n\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel(): void {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) { throw new Error(\"missing signal; should not happen\"); }\n        signal();\n    }\n\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location: string): FetchRequest {\n        // Redirection; for now we only support absolute locataions\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${ this.method } ${ JSON.stringify(this.url) } => ${ JSON.stringify(location) })`\n        });\n\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({ }, this.#headers);\n        if (this.#body) { req.#body = new Uint8Array(this.#body); }\n        req.#bodyType = this.#bodyType;\n\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n\n        return req;\n    }\n\n    /**\n     *  Create a new copy of this request.\n     */\n    clone(): FetchRequest {\n        const clone = new FetchRequest(this.url);\n\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) { clone.#body = this.#body; }\n        clone.#bodyType = this.#bodyType;\n\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({ }, this.#headers);\n\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n\n        if (this.allowGzip) { clone.allowGzip = true; }\n\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) { clone.allowInsecureAuthentication = true; }\n\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n\n        return clone;\n    }\n\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig(): void {\n        locked = true;\n    }\n\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme: string): null | FetchGatewayFunc {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme: string, func: FetchGatewayFunc): void {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${ scheme }; use registerGetUrl`);\n        }\n        if (locked) { throw new Error(\"gateways locked\"); }\n        Gateways[scheme] = func;\n    }\n\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl: FetchGetUrlFunc): void {\n        if (locked) { throw new Error(\"gateways locked\"); }\n        getUrlFunc = getUrl;\n    }\n\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway(): FetchGatewayFunc {\n        return dataGatewayFunc;\n    }\n\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n\n\ninterface ThrottleError extends Error {\n    stall: number;\n    throttle: true;\n};\n\n/**\n *  The response for a FetchREquest.\n */\nexport class FetchResponse implements Iterable<[ key: string, value: string ]> {\n    #statusCode: number;\n    #statusMessage: string;\n    #headers: Record<string, string>;\n    #body: null | Readonly<Uint8Array>;\n    #request: null | FetchRequest;\n\n    #error: { error?: Error, message: string };\n\n    toString(): string {\n        return `<FetchResponse status=${ this.statusCode } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  The response status code.\n     */\n    get statusCode(): number { return this.#statusCode; }\n\n    /**\n     *  The response status message.\n     */\n    get statusMessage(): string { return this.#statusMessage; }\n\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers(): Record<string, string> { return Object.assign({ }, this.#headers); }\n\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body(): null | Readonly<Uint8Array> {\n        return (this.#body == null) ? null: new Uint8Array(this.#body);\n    }\n\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText(): string {\n        try {\n            return (this.#body == null) ? \"\": toUtf8String(this.#body);\n        } catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson(): any {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    constructor(statusCode: number, statusMessage: string, headers: Readonly<Record<string, string>>, body: null | Uint8Array, request?: FetchRequest) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, <Record<string, string>>{ });\n        this.#body = ((body == null) ? null: new Uint8Array(body));\n        this.#request = (request || null);\n\n        this.#error = { message: \"\" };\n    }\n\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message?: string, error?: Error): FetchResponse {\n        let statusMessage: string;\n        if (!message) {\n            message = `${ this.statusCode } ${ this.statusMessage }`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ message })`;\n        } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ this.statusCode } ${ this.statusMessage }; ${ message })`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers,\n            this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message?: string, stall?: number): never {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n\n        const error = new Error(message || \"throttling requests\");\n\n        defineProperties(<ThrottleError>error, { stall, throttle: true });\n\n        throw error;\n    }\n\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Returns true of the response has a body.\n     */\n    hasBody(): this is (FetchResponse & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The request made for this response.\n     */\n    get request(): null | FetchRequest { return this.#request; }\n\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok(): boolean {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk(): void {\n        if (this.ok()) { return; }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${ this.statusCode } ${ this.statusMessage }`;\n        }\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error\n        });\n    }\n}\n\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\nfunction wait(delay: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}