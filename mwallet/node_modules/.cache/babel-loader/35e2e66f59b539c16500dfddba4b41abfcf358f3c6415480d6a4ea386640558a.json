{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nvar defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport var PocketProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(PocketProvider, _JsonRpcProvider);\n  var _super = _createSuper(PocketProvider);\n  /**\n   *  Create a new **PocketProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  function PocketProvider(_network, applicationId, applicationSecret) {\n    var _this;\n    _classCallCheck(this, PocketProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    var options = {\n      staticNetwork: network\n    };\n    var request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    _this = _super.call(this, request, network, options);\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"applicationId\", void 0);\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"applicationSecret\", void 0);\n    defineProperties(_assertThisInitialized(_this), {\n      applicationId: applicationId,\n      applicationSecret: applicationSecret\n    });\n    return _this;\n  }\n  _createClass(PocketProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n      } catch (error) {}\n      return _get(_getPrototypeOf(PocketProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationId;\n    }\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, applicationId, applicationSecret) {\n      if (applicationId == null) {\n        applicationId = defaultApplicationId;\n      }\n      var request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/v1/lb/\").concat(applicationId));\n      request.allowGzip = true;\n      if (applicationSecret) {\n        request.setCredentials(\"\", applicationSecret);\n      }\n      if (applicationId === defaultApplicationId) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  showThrottleMessage(\"PocketProvider\");\n                  return _context.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return PocketProvider;\n}(JsonRpcProvider);","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApplicationId","getHost","name","PocketProvider","_JsonRpcProvider","_inherits","_super","_createSuper","_network","applicationId","applicationSecret","_this","_classCallCheck","network","from","options","staticNetwork","request","getRequest","call","_defineProperty","_assertThisInitialized","_createClass","key","value","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","isCommunityResource","concat","allowGzip","setCredentials","retryFunc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","attempt","wrap","_callee$","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","arguments"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\provider-pocket.ts"],"sourcesContent":["/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return  \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    readonly applicationId!: string;\n\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    readonly applicationSecret!: null | string;\n\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n        if (applicationSecret == null) { applicationSecret = null; }\n\n        const options = { staticNetwork: network };\n\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\n        request.allowGzip = true;\n\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}