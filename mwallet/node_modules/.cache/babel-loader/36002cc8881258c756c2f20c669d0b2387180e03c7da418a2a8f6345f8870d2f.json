{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assert } from \"./errors.js\";\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nexport function getUrl(_x, _x2) {\n  return _getUrl.apply(this, arguments);\n}\nfunction _getUrl() {\n  _getUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, _signal) {\n    var protocol, signal, controller, init, resp, headers, respBody, body;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          protocol = req.url.split(\":\")[0].toLowerCase();\n          assert(protocol === \"http\" || protocol === \"https\", \"unsupported protocol \".concat(protocol), \"UNSUPPORTED_OPERATION\", {\n            info: {\n              protocol: protocol\n            },\n            operation: \"request\"\n          });\n          assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"request\"\n          });\n          signal = undefined;\n          if (_signal) {\n            controller = new AbortController();\n            signal = controller.signal;\n            _signal.addListener(function () {\n              controller.abort();\n            });\n          }\n          init = {\n            method: req.method,\n            headers: new Headers(Array.from(req)),\n            body: req.body || undefined,\n            signal: signal\n          };\n          _context.next = 8;\n          return fetch(req.url, init);\n        case 8:\n          resp = _context.sent;\n          headers = {};\n          resp.headers.forEach(function (value, key) {\n            headers[key.toLowerCase()] = value;\n          });\n          _context.next = 13;\n          return resp.arrayBuffer();\n        case 13:\n          respBody = _context.sent;\n          body = respBody == null ? null : new Uint8Array(respBody);\n          return _context.abrupt(\"return\", {\n            statusCode: resp.status,\n            statusMessage: resp.statusText,\n            headers: headers,\n            body: body\n          });\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getUrl.apply(this, arguments);\n}","map":{"version":3,"names":["assert","getUrl","_x","_x2","_getUrl","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","_signal","protocol","signal","controller","init","resp","headers","respBody","body","wrap","_callee$","_context","prev","next","url","split","toLowerCase","concat","info","operation","credentials","allowInsecureAuthentication","undefined","AbortController","addListener","abort","method","Headers","Array","from","fetch","sent","forEach","value","key","arrayBuffer","Uint8Array","abrupt","statusCode","status","statusMessage","statusText","stop"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\utils\\geturl-browser.ts"],"sourcesContent":["import { assert } from \"./errors.js\";\n\nimport type { FetchRequest, FetchCancelSignal, GetUrlResponse } from \"./fetch.js\";\n\n\ndeclare global {\n    class Headers {\n        constructor(values: Array<[ string, string ]>);\n        forEach(func: (v: string, k: string) => void): void;\n    }\n\n    class Response {\n        status: number;\n        statusText: string;\n        headers: Headers;\n        arrayBuffer(): Promise<ArrayBuffer>;\n    }\n\n    type FetchInit = {\n        method?: string,\n        headers?: Headers,\n        body?: Uint8Array\n    };\n\n    function fetch(url: string, init: FetchInit): Promise<Response>;\n}\n\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\n\nexport async function getUrl(req: FetchRequest, _signal?: FetchCancelSignal): Promise<GetUrlResponse> {\n    const protocol = req.url.split(\":\")[0].toLowerCase();\n\n    assert(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${ protocol }`, \"UNSUPPORTED_OPERATION\", {\n        info: { protocol },\n        operation: \"request\"\n    });\n\n    assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"request\"\n    });\n\n    let signal: undefined | AbortSignal = undefined;\n    if (_signal) {\n        const controller = new AbortController();\n        signal = controller.signal;\n        _signal.addListener(() => { controller.abort(); });\n    }\n\n    const init = {\n        method: req.method,\n        headers: new Headers(Array.from(req)),\n        body: req.body || undefined,\n        signal\n    };\n\n    const resp = await fetch(req.url, init);\n\n    const headers: Record<string, string> = { };\n    resp.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n    });\n\n    const respBody = await resp.arrayBuffer();\n    const body = (respBody == null) ? null: new Uint8Array(respBody);\n\n    return {\n        statusCode: resp.status,\n        statusMessage: resp.statusText,\n        headers, body\n    };\n}\n\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,aAAa;AA2BpC;AAEA,gBAAsBC,MAAMA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAyC3B,SAAAF,QAAA;EAAAA,OAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAzCM,SAAAC,QAAsBC,GAAiB,EAAEC,OAA2B;IAAA,IAAAC,QAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,QAAA,EAAAC,IAAA;IAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACjEZ,QAAQ,GAAGF,GAAG,CAACe,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;UAEpD5B,MAAM,CAACa,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,0BAAAgB,MAAA,CAA2BhB,QAAS,GAAI,uBAAuB,EAAE;YAC/GiB,IAAI,EAAE;cAAEjB,QAAQ,EAARA;YAAQ,CAAE;YAClBkB,SAAS,EAAE;WACd,CAAC;UAEF/B,MAAM,CAACa,QAAQ,KAAK,OAAO,IAAI,CAACF,GAAG,CAACqB,WAAW,IAAIrB,GAAG,CAACsB,2BAA2B,EAAE,6CAA6C,EAAE,uBAAuB,EAAE;YACxJF,SAAS,EAAE;WACd,CAAC;UAEEjB,MAAM,GAA4BoB,SAAS;UAC/C,IAAItB,OAAO,EAAE;YACHG,UAAU,GAAG,IAAIoB,eAAe,EAAE;YACxCrB,MAAM,GAAGC,UAAU,CAACD,MAAM;YAC1BF,OAAO,CAACwB,WAAW,CAAC,YAAK;cAAGrB,UAAU,CAACsB,KAAK,EAAE;YAAE,CAAC,CAAC;;UAGhDrB,IAAI,GAAG;YACTsB,MAAM,EAAE3B,GAAG,CAAC2B,MAAM;YAClBpB,OAAO,EAAE,IAAIqB,OAAO,CAACC,KAAK,CAACC,IAAI,CAAC9B,GAAG,CAAC,CAAC;YACrCS,IAAI,EAAET,GAAG,CAACS,IAAI,IAAIc,SAAS;YAC3BpB,MAAM,EAANA;WACH;UAAAS,QAAA,CAAAE,IAAA;UAAA,OAEkBiB,KAAK,CAAC/B,GAAG,CAACe,GAAG,EAAEV,IAAI,CAAC;QAAA;UAAjCC,IAAI,GAAAM,QAAA,CAAAoB,IAAA;UAEJzB,OAAO,GAA2B,EAAG;UAC3CD,IAAI,CAACC,OAAO,CAAC0B,OAAO,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;YAChC5B,OAAO,CAAC4B,GAAG,CAAClB,WAAW,EAAE,CAAC,GAAGiB,KAAK;UACtC,CAAC,CAAC;UAACtB,QAAA,CAAAE,IAAA;UAAA,OAEoBR,IAAI,CAAC8B,WAAW,EAAE;QAAA;UAAnC5B,QAAQ,GAAAI,QAAA,CAAAoB,IAAA;UACRvB,IAAI,GAAID,QAAQ,IAAI,IAAI,GAAI,IAAI,GAAE,IAAI6B,UAAU,CAAC7B,QAAQ,CAAC;UAAA,OAAAI,QAAA,CAAA0B,MAAA,WAEzD;YACHC,UAAU,EAAEjC,IAAI,CAACkC,MAAM;YACvBC,aAAa,EAAEnC,IAAI,CAACoC,UAAU;YAC9BnC,OAAO,EAAPA,OAAO;YAAEE,IAAI,EAAJA;WACZ;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAA+B,IAAA;MAAA;IAAA,GAAA5C,OAAA;EAAA,CACJ;EAAA,OAAAN,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}