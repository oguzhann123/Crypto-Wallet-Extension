{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classStaticPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\n/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport { encryptKeystoreJson, encryptKeystoreJsonSync } from \"./json-keystore.js\";\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport var defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nvar MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\nvar HardenedBit = 0x80000000;\nvar N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nvar Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n  var result = \"\";\n  while (value) {\n    result = Nibbles[value % 16] + result;\n    value = Math.trunc(value / 16);\n  }\n  while (result.length < length * 2) {\n    result = \"0\" + result;\n  }\n  return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n  var value = getBytes(_value);\n  var check = dataSlice(sha256(sha256(value)), 0, 4);\n  var bytes = concat([value, check]);\n  return encodeBase58(bytes);\n}\nvar _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n  var data = new Uint8Array(37);\n  if (index & HardenedBit) {\n    assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"deriveChild\"\n    });\n    // Data = 0x00 || ser_256(k_par)\n    data.set(getBytes(privateKey), 1);\n  } else {\n    // Data = ser_p(point(k_par))\n    data.set(getBytes(publicKey));\n  }\n  // Data += ser_32(i)\n  for (var i = 24; i >= 0; i -= 8) {\n    data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n  }\n  var I = getBytes(computeHmac(\"sha512\", chainCode, data));\n  return {\n    IL: I.slice(0, 32),\n    IR: I.slice(32)\n  };\n}\nfunction _derivePath(node, path) {\n  var components = path.split(\"/\");\n  assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n  if (components[0] === \"m\") {\n    components.shift();\n  }\n  var result = node;\n  for (var i = 0; i < components.length; i++) {\n    var component = components[i];\n    if (component.match(/^[0-9]+'$/)) {\n      var index = parseInt(component.substring(0, component.length - 1));\n      assertArgument(index < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n      result = result.deriveChild(HardenedBit + index);\n    } else if (component.match(/^[0-9]+$/)) {\n      var _index2 = parseInt(component);\n      assertArgument(_index2 < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n      result = result.deriveChild(_index2);\n    } else {\n      assertArgument(false, \"invalid path component\", \"path[\".concat(i, \"]\"), component);\n    }\n  }\n  return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nvar _account = /*#__PURE__*/new WeakSet();\nexport var HDNodeWallet = /*#__PURE__*/function (_BaseWallet) {\n  _inherits(HDNodeWallet, _BaseWallet);\n  var _super = _createSuper(HDNodeWallet);\n  /**\n   *  @private\n   */\n  function HDNodeWallet(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\n    var _this;\n    _classCallCheck(this, HDNodeWallet);\n    _this = _super.call(this, signingKey, provider);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _account);\n    /**\n     *  The compressed public key.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"publicKey\", void 0);\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"fingerprint\", void 0);\n    /**\n     *  The parent fingerprint.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"parentFingerprint\", void 0);\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"mnemonic\", void 0);\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"chainCode\", void 0);\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"path\", void 0);\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"index\", void 0);\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"depth\", void 0);\n    assertPrivate(guard, _guard, \"HDNodeWallet\");\n    defineProperties(_assertThisInitialized(_this), {\n      publicKey: signingKey.compressedPublicKey\n    });\n    var fingerprint = dataSlice(ripemd160(sha256(_this.publicKey)), 0, 4);\n    defineProperties(_assertThisInitialized(_this), {\n      parentFingerprint: parentFingerprint,\n      fingerprint: fingerprint,\n      chainCode: chainCode,\n      path: path,\n      index: index,\n      depth: depth\n    });\n    defineProperties(_assertThisInitialized(_this), {\n      mnemonic: mnemonic\n    });\n    return _this;\n  }\n  _createClass(HDNodeWallet, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n  }, {\n    key: \"encrypt\",\n    value:\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(password, progressCallback) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return encryptKeystoreJson(_classPrivateMethodGet(this, _account, _account2).call(this), password, {\n                progressCallback: progressCallback\n              });\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n      return encrypt;\n    }()\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n  }, {\n    key: \"encryptSync\",\n    value: function encryptSync(password) {\n      return encryptKeystoreJsonSync(_classPrivateMethodGet(this, _account, _account2).call(this), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n  }, {\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current sentiment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"extendedKey\"\n      });\n      return encodeBase58Check(concat([\"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint, zpad(this.index, 4), this.chainCode, concat([\"0x00\", this.privateKey])]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n  }, {\n    key: \"hasPath\",\n    value: function hasPath() {\n      return this.path != null;\n    }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n  }, {\n    key: \"neuter\",\n    value: function neuter() {\n      return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */\n  }, {\n    key: \"deriveChild\",\n    value: function deriveChild(_index) {\n      var index = getNumber(_index, \"index\");\n      assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n      // Base path\n      var path = this.path;\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n        if (index & HardenedBit) {\n          path += \"'\";\n        }\n      }\n      var _ser_I = ser_I(index, this.chainCode, this.publicKey, this.privateKey),\n        IR = _ser_I.IR,\n        IL = _ser_I.IL;\n      var ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n      return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      return _derivePath(this, path);\n    }\n  }], [{\n    key: \"fromExtendedKey\",\n    value:\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    function fromExtendedKey(extendedKey) {\n      var bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n      assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n      var depth = bytes[4];\n      var parentFingerprint = hexlify(bytes.slice(5, 9));\n      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n      var chainCode = hexlify(bytes.slice(13, 45));\n      var key = bytes.slice(45, 78);\n      switch (hexlify(bytes.slice(0, 4))) {\n        // Public Key\n        case \"0x0488b21e\":\n        case \"0x043587cf\":\n          {\n            var publicKey = hexlify(key);\n            return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n          }\n        // Private Key\n        case \"0x0488ade4\":\n        case \"0x04358394 \":\n          if (key[0] !== 0) {\n            break;\n          }\n          return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n      }\n      assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */\n  }, {\n    key: \"createRandom\",\n    value: function createRandom(password, path, wordlist) {\n      if (password == null) {\n        password = \"\";\n      }\n      if (path == null) {\n        path = defaultPath;\n      }\n      if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n      }\n      var mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\n      return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create am HD Node from %%mnemonic%%.\n     */\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, path) {\n      if (!path) {\n        path = defaultPath;\n      }\n      return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n  }, {\n    key: \"fromPhrase\",\n    value: function fromPhrase(phrase, password, path, wordlist) {\n      if (password == null) {\n        password = \"\";\n      }\n      if (path == null) {\n        path = defaultPath;\n      }\n      if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n      }\n      var mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\n      return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, seed, null);\n    }\n  }]);\n  return HDNodeWallet;\n}(BaseWallet);\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nfunction _account2() {\n  var account = {\n    address: this.address,\n    privateKey: this.privateKey\n  };\n  var m = this.mnemonic;\n  if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n    account.mnemonic = {\n      path: this.path,\n      locale: \"en\",\n      entropy: m.entropy\n    };\n  }\n  return account;\n}\nfunction _fromSeed(_seed, mnemonic) {\n  assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n  var seed = getBytes(_seed, \"seed\");\n  assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n  var I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n  var signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n  return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n}\nexport var HDNodeVoidWallet = /*#__PURE__*/function (_VoidSigner) {\n  _inherits(HDNodeVoidWallet, _VoidSigner);\n  var _super2 = _createSuper(HDNodeVoidWallet);\n  /**\n   *  @private\n   */\n  function HDNodeVoidWallet(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\n    var _this2;\n    _classCallCheck(this, HDNodeVoidWallet);\n    _this2 = _super2.call(this, address, provider);\n    /**\n     *  The compressed public key.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"publicKey\", void 0);\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"fingerprint\", void 0);\n    /**\n     *  The parent node fingerprint.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"parentFingerprint\", void 0);\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"chainCode\", void 0);\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"path\", void 0);\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"index\", void 0);\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"depth\", void 0);\n    assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n    defineProperties(_assertThisInitialized(_this2), {\n      publicKey: publicKey\n    });\n    var fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n    defineProperties(_assertThisInitialized(_this2), {\n      publicKey: publicKey,\n      fingerprint: fingerprint,\n      parentFingerprint: parentFingerprint,\n      chainCode: chainCode,\n      path: path,\n      index: index,\n      depth: depth\n    });\n    return _this2;\n  }\n  _createClass(HDNodeVoidWallet, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n  }, {\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current sentiment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"extendedKey\"\n      });\n      return encodeBase58Check(concat([\"0x0488B21E\", zpad(this.depth, 1), this.parentFingerprint, zpad(this.index, 4), this.chainCode, this.publicKey]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n  }, {\n    key: \"hasPath\",\n    value: function hasPath() {\n      return this.path != null;\n    }\n    /**\n     *  Return the child for %%index%%.\n     */\n  }, {\n    key: \"deriveChild\",\n    value: function deriveChild(_index) {\n      var index = getNumber(_index, \"index\");\n      assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n      // Base path\n      var path = this.path;\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n        if (index & HardenedBit) {\n          path += \"'\";\n        }\n      }\n      var _ser_I2 = ser_I(index, this.chainCode, this.publicKey, null),\n        IR = _ser_I2.IR,\n        IL = _ser_I2.IL;\n      var Ki = SigningKey.addPoints(IL, this.publicKey, true);\n      var address = computeAddress(Ki);\n      return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      return _derivePath(this, path);\n    }\n  }]);\n  return HDNodeVoidWallet;\n}(VoidSigner);\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n/**\n *  Returns the [[link-bip-32]] path for the acount at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index) {\n  var index = getNumber(_index, \"index\");\n  assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index) {\n  var index = getNumber(_index, \"index\");\n  assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n  return \"m/44'/60'/0'/0/\".concat(index);\n}","map":{"version":3,"names":["computeHmac","randomBytes","ripemd160","SigningKey","sha256","VoidSigner","computeAddress","concat","dataSlice","decodeBase58","defineProperties","encodeBase58","getBytes","hexlify","isBytesLike","getNumber","toBeArray","toBigInt","toBeHex","assertPrivate","assert","assertArgument","LangEn","BaseWallet","Mnemonic","encryptKeystoreJson","encryptKeystoreJsonSync","defaultPath","MasterSecret","Uint8Array","HardenedBit","N","BigInt","Nibbles","zpad","value","length","result","Math","trunc","encodeBase58Check","_value","check","bytes","_guard","ser_I","index","chainCode","publicKey","privateKey","data","operation","set","i","I","IL","slice","IR","derivePath","node","path","components","split","depth","shift","component","match","parseInt","substring","deriveChild","_account","WeakSet","HDNodeWallet","_BaseWallet","_inherits","_super","_createSuper","guard","signingKey","parentFingerprint","mnemonic","provider","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_defineProperty","compressedPublicKey","fingerprint","_createClass","key","connect","_encrypt","_asyncToGenerator","_regeneratorRuntime","mark","_callee","password","progressCallback","wrap","_callee$","_context","prev","next","_classPrivateMethodGet","_account2","abrupt","sent","stop","encrypt","_x","_x2","apply","arguments","encryptSync","get","hasPath","neuter","HDNodeVoidWallet","address","_index","_ser_I","ki","fromExtendedKey","extendedKey","createRandom","wordlist","fromEntropy","_classStaticPrivateMethodGet","_fromSeed","computeSeed","fromMnemonic","fromPhrase","phrase","fromSeed","seed","account","m","locale","entropy","_seed","_VoidSigner","_super2","_this2","_ser_I2","Ki","addPoints","getAccountPath","getIndexedAccountPath"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\wallet\\hdwallet.ts"],"sourcesContent":["/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport {\n    concat, dataSlice, decodeBase58, defineProperties, encodeBase58,\n    getBytes, hexlify, isBytesLike,\n    getNumber, toBeArray, toBigInt, toBeHex,\n    assertPrivate, assert, assertArgument\n} from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport {\n    encryptKeystoreJson, encryptKeystoreJsonSync,\n} from \"./json-keystore.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { Provider } from \"../providers/index.js\";\nimport type { BytesLike, Numeric } from \"../utils/index.js\";\nimport type { Wordlist } from \"../wordlists/index.js\";\n\nimport type { KeystoreAccount } from \"./json-keystore.js\";\n\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath: string = \"m/44'/60'/0'/0/0\";\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([ 66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100 ]);\n\nconst HardenedBit = 0x80000000;\n\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value: number, length: number): string {\n    let result = \"\";\n    while (value) {\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while (result.length < length * 2) { result = \"0\" + result; }\n    return \"0x\" + result;\n}\n\nfunction encodeBase58Check(_value: BytesLike): string {\n    const value = getBytes(_value);\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\n    const bytes = concat([ value, check ]);\n    return encodeBase58(bytes);\n}\n\nconst _guard = { };\n\nfunction ser_I(index: number, chainCode: string, publicKey: string, privateKey: null | string): { IL: Uint8Array, IR: Uint8Array } {\n    const data = new Uint8Array(37);\n\n    if (index & HardenedBit) {\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n\n        // Data = 0x00 || ser_256(k_par)\n        data.set(getBytes(privateKey), 1);\n\n    } else {\n        // Data = ser_p(point(k_par))\n        data.set(getBytes(publicKey));\n    }\n\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\n}\n\ntype HDNodeLike<T> = { depth: number, deriveChild: (i: number) => T };\nfunction derivePath<T extends HDNodeLike<T>>(node: T, path: string): T {\n    const components = path.split(\"/\");\n\n    assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n\n    if (components[0] === \"m\") { components.shift(); }\n\n    let result: T = node;\n    for (let i = 0; i < components.length; i++) {\n        const component = components[i];\n\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${ i }]`, component);\n            result = result.deriveChild(HardenedBit + index);\n\n        } else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${ i }]`, component);\n            result = result.deriveChild(index);\n\n        } else {\n            assertArgument(false, \"invalid path component\", `path[${ i }]`, component);\n        }\n    }\n\n    return result;\n}\n\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nexport class HDNodeWallet extends BaseWallet {\n    /**\n     *  The compressed public key.\n     */\n    readonly publicKey!: string;\n\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    readonly fingerprint!: string;\n\n    /**\n     *  The parent fingerprint.\n     */\n    readonly parentFingerprint!: string;\n\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    readonly mnemonic!: null | Mnemonic;\n\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    readonly chainCode!: string;\n\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    readonly path!: null | string;\n\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    readonly index!: number;\n\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    readonly depth!: number;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, signingKey: SigningKey, parentFingerprint: string, chainCode: string, path: null | string, index: number, depth: number, mnemonic: null | Mnemonic, provider: null | Provider) {\n        super(signingKey, provider);\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\n\n        defineProperties<HDNodeWallet>(this, { publicKey: signingKey.compressedPublicKey });\n\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n        defineProperties<HDNodeWallet>(this, {\n            parentFingerprint, fingerprint,\n            chainCode, path, index, depth\n        });\n\n        defineProperties<HDNodeWallet>(this, { mnemonic });\n    }\n\n    connect(provider: null | Provider): HDNodeWallet {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint,\n            this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n\n    #account(): KeystoreAccount {\n        const account: KeystoreAccount = { address: this.address, privateKey: this.privateKey };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n\n        return account;\n    }\n\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password: Uint8Array | string, progressCallback?: ProgressCallback): Promise<string> {\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\n    }\n\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password: Uint8Array | string): string {\n        return encryptKeystoreJsonSync(this.#account(), password);\n    }\n\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n\n        return encodeBase58Check(concat([\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\n            zpad(this.index, 4), this.chainCode,\n            concat([ \"0x00\", this.privateKey ])\n        ]));\n    }\n\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath(): this is { path: string } { return (this.path != null); }\n\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n    neuter(): HDNodeVoidWallet {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey,\n            this.parentFingerprint, this.chainCode, this.path, this.index,\n            this.depth, this.provider);\n    }\n\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index: Numeric): HDNodeWallet {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) { path += \"'\"; }\n        }\n\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR),\n            path, index, this.depth + 1, this.mnemonic, this.provider);\n\n    }\n\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n    derivePath(path: string): HDNodeWallet {\n        return derivePath<HDNodeWallet>(this, path);\n    }\n\n    static #fromSeed(_seed: BytesLike, mnemonic: null | Mnemonic): HDNodeWallet {\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n\n        const seed = getBytes(_seed, \"seed\");\n        assertArgument(seed.length >= 16 && seed.length <= 64 , \"invalid seed\", \"seed\", \"[REDACTED]\");\n\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)),\n            \"m\", 0, 0, mnemonic, null);\n    }\n\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    static fromExtendedKey(extendedKey: string): HDNodeWallet | HDNodeVoidWallet {\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey,\n            \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\": {\n                const publicKey = hexlify(key);\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey,\n                    parentFingerprint, chainCode, null, index, depth, null);\n            }\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)),\n                    parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n\n\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n\n    /**\n     *  Creates a new random HDNode.\n     */\n    static createRandom(password?: string, path?: string, wordlist?: Wordlist): HDNodeWallet {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = defaultPath; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist)\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Create am HD Node from %%mnemonic%%.\n     */\n    static fromMnemonic(mnemonic: Mnemonic, path?: string): HDNodeWallet {\n        if (!path) { path = defaultPath; }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n    static fromPhrase(phrase: string, password?: string, path?: string, wordlist?: Wordlist): HDNodeWallet {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = defaultPath; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist)\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n    static fromSeed(seed: BytesLike): HDNodeWallet {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\n\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by \n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nexport class HDNodeVoidWallet extends VoidSigner {\n    /**\n     *  The compressed public key.\n     */\n    readonly publicKey!: string;\n\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    readonly fingerprint!: string;\n\n    /**\n     *  The parent node fingerprint.\n     */\n    readonly parentFingerprint!: string;\n\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    readonly chainCode!: string;\n\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    readonly path!: null | string;\n\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    readonly index!: number;\n\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    readonly depth!: number;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, address: string, publicKey: string, parentFingerprint: string, chainCode: string, path: null | string, index: number, depth: number, provider: null | Provider) {\n        super(address, provider);\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n\n        defineProperties<HDNodeVoidWallet>(this, { publicKey });\n\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n        defineProperties<HDNodeVoidWallet>(this, {\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\n        });\n    }\n\n    connect(provider: null | Provider): HDNodeVoidWallet {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey,\n            this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n\n        return encodeBase58Check(concat([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey,\n        ]));\n    }\n\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath(): this is { path: string } { return (this.path != null); }\n\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index: Numeric): HDNodeVoidWallet {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) { path += \"'\"; }\n        }\n\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n\n        const address = computeAddress(Ki);\n\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR),\n            path, index, this.depth + 1, this.provider);\n\n    }\n\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n    derivePath(path: string): HDNodeVoidWallet {\n        return derivePath<HDNodeVoidWallet>(this, path);\n    }\n}\n\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n\n/**\n *  Returns the [[link-bip-32]] path for the acount at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index: Numeric): string {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${ index }'/0/0`;\n}\n\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index: Numeric): string {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${ index}`;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}