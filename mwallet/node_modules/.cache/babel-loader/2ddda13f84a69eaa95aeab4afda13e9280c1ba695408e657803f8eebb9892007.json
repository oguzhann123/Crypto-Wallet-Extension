{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  var _32n = BigInt(32);\n  var _u32_max = BigInt(0xffffffff);\n  var wh = Number(value >> _32n & _u32_max);\n  var wl = Number(value & _u32_max);\n  var h = isLE ? 4 : 0;\n  var l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport var SHA2 = /*#__PURE__*/function (_Hash) {\n  _inherits(SHA2, _Hash);\n  var _super = _createSuper(SHA2);\n  function SHA2(blockLen, outputLen, padOffset, isLE) {\n    var _this;\n    _classCallCheck(this, SHA2);\n    _this = _super.call(this);\n    _this.blockLen = blockLen;\n    _this.outputLen = outputLen;\n    _this.padOffset = padOffset;\n    _this.isLE = isLE;\n    _this.finished = false;\n    _this.length = 0;\n    _this.pos = 0;\n    _this.destroyed = false;\n    _this.buffer = new Uint8Array(blockLen);\n    _this.view = createView(_this.buffer);\n    return _this;\n  }\n  _createClass(SHA2, [{\n    key: \"update\",\n    value: function update(data) {\n      assert.exists(this);\n      var view = this.view,\n        buffer = this.buffer,\n        blockLen = this.blockLen;\n      data = toBytes(data);\n      var len = data.length;\n      for (var pos = 0; pos < len;) {\n        var take = Math.min(blockLen - this.pos, len - pos);\n        // Fast path: we have at least one block in input, cast it to view and process\n        if (take === blockLen) {\n          var dataView = createView(data);\n          for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n          continue;\n        }\n        buffer.set(data.subarray(pos, pos + take), this.pos);\n        this.pos += take;\n        pos += take;\n        if (this.pos === blockLen) {\n          this.process(view, 0);\n          this.pos = 0;\n        }\n      }\n      this.length += data.length;\n      this.roundClean();\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      assert.exists(this);\n      assert.output(out, this);\n      this.finished = true;\n      // Padding\n      // We can avoid allocation of buffer for padding completely if it\n      // was previously not allocated here. But it won't change performance.\n      var buffer = this.buffer,\n        view = this.view,\n        blockLen = this.blockLen,\n        isLE = this.isLE;\n      var pos = this.pos;\n      // append the bit '1' to the message\n      buffer[pos++] = 128;\n      this.buffer.subarray(pos).fill(0);\n      // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n      if (this.padOffset > blockLen - pos) {\n        this.process(view, 0);\n        pos = 0;\n      }\n      // Pad until full block byte with zeros\n      for (var i = pos; i < blockLen; i++) buffer[i] = 0;\n      // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n      // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n      // So we just write lowest 64 bits of that value.\n      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n      this.process(view, 0);\n      var oview = createView(out);\n      this.get().forEach(function (v, i) {\n        return oview.setUint32(4 * i, v, isLE);\n      });\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var buffer = this.buffer,\n        outputLen = this.outputLen;\n      this.digestInto(buffer);\n      var res = buffer.slice(0, outputLen);\n      this.destroy();\n      return res;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      var _to;\n      to || (to = new this.constructor());\n      (_to = to).set.apply(_to, _toConsumableArray(this.get()));\n      var blockLen = this.blockLen,\n        buffer = this.buffer,\n        length = this.length,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        pos = this.pos;\n      to.length = length;\n      to.pos = pos;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      if (length % blockLen) to.buffer.set(buffer);\n      return to;\n    }\n  }]);\n  return SHA2;\n}(Hash);","map":{"version":3,"names":["assert","Hash","createView","toBytes","setBigUint64","view","byteOffset","value","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","SHA2","_Hash","_inherits","_super","_createSuper","blockLen","outputLen","padOffset","_this","_classCallCheck","call","finished","length","pos","destroyed","buffer","Uint8Array","_createClass","key","update","data","exists","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to","_to","constructor","apply","_toConsumableArray"],"sources":["C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@noble/hashes/esm/_sha2.js"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}