{"ast":null,"code":"import _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport { defineProperties, concat, getBytesCopy, getNumber, hexlify, toBeArray, toBigInt, toNumber, assert, assertArgument } from \"../../utils/index.js\";\n/**\n * @_ignore:\n */\nexport var WordSize = 32;\nvar Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nvar passProperties = [\"then\"];\nvar _guard = {};\nfunction throwError(name, error) {\n  var wrapped = new Error(\"deferred error during ABI decoding triggered accessing \".concat(name));\n  wrapped.error = error;\n  throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nvar _names = /*#__PURE__*/new WeakMap();\nexport var Result = /*#__PURE__*/function (_Array) {\n  _inherits(Result, _Array);\n  var _super = _createSuper(Result);\n  /**\n   *  @private\n   */\n  function Result() {\n    var _this;\n    _classCallCheck(this, Result);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    // To properly sub-class Array so the other built-in\n    // functions work, the constructor has to behave fairly\n    // well. So, in the event we are created via fromItems()\n    // we build the read-only Result object we want, but on\n    // any other input, we use the default constructor\n    // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n    var guard = args[0];\n    var items = args[1];\n    var names = (args[2] || []).slice();\n    var wrap = true;\n    if (guard !== _guard) {\n      items = args;\n      names = [];\n      wrap = false;\n    }\n    // Can't just pass in ...items since an array of length 1\n    // is a special case in the super.\n    _this = _super.call(this, items.length);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _names, {\n      writable: true,\n      value: void 0\n    });\n    items.forEach(function (item, index) {\n      _this[index] = item;\n    });\n    // Find all unique keys\n    var nameCounts = names.reduce(function (accum, name) {\n      if (typeof name === \"string\") {\n        accum.set(name, (accum.get(name) || 0) + 1);\n      }\n      return accum;\n    }, new Map());\n    // Remove any key thats not unique\n    _classPrivateFieldSet(_assertThisInitialized(_this), _names, Object.freeze(items.map(function (item, index) {\n      var name = names[index];\n      if (name != null && nameCounts.get(name) === 1) {\n        return name;\n      }\n      return null;\n    })));\n    if (!wrap) {\n      return _possibleConstructorReturn(_this);\n    }\n    // A wrapped Result is immutable\n    Object.freeze(_assertThisInitialized(_this));\n    // Proxy indices and names so we can trap deferred errors\n    return _possibleConstructorReturn(_this, new Proxy(_assertThisInitialized(_this), {\n      get: function get(target, prop, receiver) {\n        if (typeof prop === \"string\") {\n          // Index accessor\n          if (prop.match(/^[0-9]+$/)) {\n            var index = getNumber(prop, \"%index\");\n            if (index < 0 || index >= _this.length) {\n              throw new RangeError(\"out of result range\");\n            }\n            var item = target[index];\n            if (item instanceof Error) {\n              throwError(\"index \".concat(index), item);\n            }\n            return item;\n          }\n          // Pass important checks (like `then` for Promise) through\n          if (passProperties.indexOf(prop) >= 0) {\n            return Reflect.get(target, prop, receiver);\n          }\n          var value = target[prop];\n          if (value instanceof Function) {\n            // Make sure functions work with private variables\n            // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n            return function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              return value.apply(this === receiver ? target : this, args);\n            };\n          } else if (!(prop in target)) {\n            // Possible name accessor\n            return target.getValue.apply(_assertThisInitialized(_this) === receiver ? target : _assertThisInitialized(_this), [prop]);\n          }\n        }\n        return Reflect.get(target, prop, receiver);\n      }\n    }));\n  }\n  /**\n   *  Returns the Result as a normal Array.\n   *\n   *  This will throw if there are any outstanding deferred\n   *  errors.\n   */\n  _createClass(Result, [{\n    key: \"toArray\",\n    value: function toArray() {\n      var result = [];\n      this.forEach(function (item, index) {\n        if (item instanceof Error) {\n          throwError(\"index \".concat(index), item);\n        }\n        result.push(item);\n      });\n      return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      var _this2 = this;\n      return _classPrivateFieldGet(this, _names).reduce(function (accum, name, index) {\n        assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"toObject()\"\n        });\n        // Add values for names that don't conflict\n        if (!(name in accum)) {\n          accum[name] = _this2.getValue(name);\n        }\n        return accum;\n      }, {});\n    }\n    /**\n     *  @_ignore\n     */\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      if (start == null) {\n        start = 0;\n      }\n      if (start < 0) {\n        start += this.length;\n        if (start < 0) {\n          start = 0;\n        }\n      }\n      if (end == null) {\n        end = this.length;\n      }\n      if (end < 0) {\n        end += this.length;\n        if (end < 0) {\n          end = 0;\n        }\n      }\n      if (end > this.length) {\n        end = this.length;\n      }\n      var result = [],\n        names = [];\n      for (var i = start; i < end; i++) {\n        result.push(this[i]);\n        names.push(_classPrivateFieldGet(this, _names)[i]);\n      }\n      return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(callback, thisArg) {\n      var result = [],\n        names = [];\n      for (var i = 0; i < this.length; i++) {\n        var item = this[i];\n        if (item instanceof Error) {\n          throwError(\"index \".concat(i), item);\n        }\n        if (callback.call(thisArg, item, i, this)) {\n          result.push(item);\n          names.push(_classPrivateFieldGet(this, _names)[i]);\n        }\n      }\n      return new Result(_guard, result, names);\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue(name) {\n      var index = _classPrivateFieldGet(this, _names).indexOf(name);\n      if (index === -1) {\n        return undefined;\n      }\n      var value = this[index];\n      if (value instanceof Error) {\n        throwError(\"property \".concat(JSON.stringify(name)), value.error);\n      }\n      return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n  }], [{\n    key: \"fromItems\",\n    value: function fromItems(items, keys) {\n      return new Result(_guard, items, keys);\n    }\n  }]);\n  return Result;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  var errors = [];\n  var checkErrors = function checkErrors(path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n    for (var key in object) {\n      var childPath = path.slice();\n      childPath.push(key);\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n  checkErrors([], result);\n  return errors;\n}\nfunction getValue(value) {\n  var bytes = toBeArray(value);\n  assert(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", {\n    buffer: bytes,\n    length: WordSize,\n    offset: bytes.length\n  });\n  if (bytes.length !== WordSize) {\n    bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));\n  }\n  return bytes;\n}\n/**\n *  @_ignore\n */\nexport var Coder = /*#__PURE__*/function () {\n  function Coder(name, type, localName, dynamic) {\n    _classCallCheck(this, Coder);\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    _defineProperty(this, \"name\", void 0);\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    _defineProperty(this, \"type\", void 0);\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    _defineProperty(this, \"localName\", void 0);\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    _defineProperty(this, \"dynamic\", void 0);\n    defineProperties(this, {\n      name: name,\n      type: type,\n      localName: localName,\n      dynamic: dynamic\n    }, {\n      name: \"string\",\n      type: \"string\",\n      localName: \"string\",\n      dynamic: \"boolean\"\n    });\n  }\n  _createClass(Coder, [{\n    key: \"_throwError\",\n    value: function _throwError(message, value) {\n      assertArgument(false, message, this.localName, value);\n    }\n  }]);\n  return Coder;\n}();\n/**\n *  @_ignore\n */\nvar _data = /*#__PURE__*/new WeakMap();\nvar _dataLength = /*#__PURE__*/new WeakMap();\nvar _writeData = /*#__PURE__*/new WeakSet();\nexport var Writer = /*#__PURE__*/function () {\n  function Writer() {\n    _classCallCheck(this, Writer);\n    _classPrivateMethodInitSpec(this, _writeData);\n    // An array of WordSize lengthed objects to concatenation\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _dataLength, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _data, []);\n    _classPrivateFieldSet(this, _dataLength, 0);\n  }\n  _createClass(Writer, [{\n    key: \"data\",\n    get: function get() {\n      return concat(_classPrivateFieldGet(this, _data));\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _dataLength);\n    }\n  }, {\n    key: \"appendWriter\",\n    value: function appendWriter(writer) {\n      return _classPrivateMethodGet(this, _writeData, _writeData2).call(this, getBytesCopy(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(value) {\n      var bytes = getBytesCopy(value);\n      var paddingOffset = bytes.length % WordSize;\n      if (paddingOffset) {\n        bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));\n      }\n      return _classPrivateMethodGet(this, _writeData, _writeData2).call(this, bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      return _classPrivateMethodGet(this, _writeData, _writeData2).call(this, getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n  }, {\n    key: \"writeUpdatableValue\",\n    value: function writeUpdatableValue() {\n      var _this3 = this;\n      var offset = _classPrivateFieldGet(this, _data).length;\n      _classPrivateFieldGet(this, _data).push(Padding);\n      _classPrivateFieldSet(this, _dataLength, _classPrivateFieldGet(this, _dataLength) + WordSize);\n      return function (value) {\n        _classPrivateFieldGet(_this3, _data)[offset] = getValue(value);\n      };\n    }\n  }]);\n  return Writer;\n}();\n/**\n *  @_ignore\n */\nfunction _writeData2(data) {\n  _classPrivateFieldGet(this, _data).push(data);\n  _classPrivateFieldSet(this, _dataLength, _classPrivateFieldGet(this, _dataLength) + data.length);\n  return data.length;\n}\nvar _data2 = /*#__PURE__*/new WeakMap();\nvar _offset = /*#__PURE__*/new WeakMap();\nvar _peekBytes = /*#__PURE__*/new WeakSet();\nexport var Reader = /*#__PURE__*/function () {\n  function Reader(data, allowLoose) {\n    _classCallCheck(this, Reader);\n    _classPrivateMethodInitSpec(this, _peekBytes);\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    _defineProperty(this, \"allowLoose\", void 0);\n    _classPrivateFieldInitSpec(this, _data2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _offset, {\n      writable: true,\n      value: void 0\n    });\n    defineProperties(this, {\n      allowLoose: !!allowLoose\n    });\n    _classPrivateFieldSet(this, _data2, getBytesCopy(data));\n    _classPrivateFieldSet(this, _offset, 0);\n  }\n  _createClass(Reader, [{\n    key: \"data\",\n    get: function get() {\n      return hexlify(_classPrivateFieldGet(this, _data2));\n    }\n  }, {\n    key: \"dataLength\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _data2).length;\n    }\n  }, {\n    key: \"consumed\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _offset);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return new Uint8Array(_classPrivateFieldGet(this, _data2));\n    }\n  }, {\n    key: \"subReader\",\n    value:\n    // Create a sub-reader with the same underlying data, but offset\n    function subReader(offset) {\n      return new Reader(_classPrivateFieldGet(this, _data2).slice(_classPrivateFieldGet(this, _offset) + offset), this.allowLoose);\n    }\n    // Read bytes\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(length, loose) {\n      var bytes = _classPrivateMethodGet(this, _peekBytes, _peekBytes2).call(this, 0, length, !!loose);\n      _classPrivateFieldSet(this, _offset, _classPrivateFieldGet(this, _offset) + bytes.length);\n      // @TODO: Make sure the length..end bytes are all 0?\n      return bytes.slice(0, length);\n    }\n    // Read a numeric values\n  }, {\n    key: \"readValue\",\n    value: function readValue() {\n      return toBigInt(this.readBytes(WordSize));\n    }\n  }, {\n    key: \"readIndex\",\n    value: function readIndex() {\n      return toNumber(this.readBytes(WordSize));\n    }\n  }]);\n  return Reader;\n}();\nfunction _peekBytes2(offset, length, loose) {\n  var alignedLength = Math.ceil(length / WordSize) * WordSize;\n  if (_classPrivateFieldGet(this, _offset) + alignedLength > _classPrivateFieldGet(this, _data2).length) {\n    if (this.allowLoose && loose && _classPrivateFieldGet(this, _offset) + length <= _classPrivateFieldGet(this, _data2).length) {\n      alignedLength = length;\n    } else {\n      assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n        buffer: getBytesCopy(_classPrivateFieldGet(this, _data2)),\n        length: _classPrivateFieldGet(this, _data2).length,\n        offset: _classPrivateFieldGet(this, _offset) + alignedLength\n      });\n    }\n  }\n  return _classPrivateFieldGet(this, _data2).slice(_classPrivateFieldGet(this, _offset), _classPrivateFieldGet(this, _offset) + alignedLength);\n}","map":{"version":3,"names":["defineProperties","concat","getBytesCopy","getNumber","hexlify","toBeArray","toBigInt","toNumber","assert","assertArgument","WordSize","Padding","Uint8Array","passProperties","_guard","throwError","name","error","wrapped","Error","_names","WeakMap","Result","_Array","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","guard","items","names","slice","wrap","call","_classPrivateFieldInitSpec","_assertThisInitialized","writable","value","forEach","item","index","nameCounts","reduce","accum","set","get","Map","_classPrivateFieldSet","Object","freeze","map","_possibleConstructorReturn","Proxy","target","prop","receiver","match","RangeError","indexOf","Reflect","Function","_len2","_key2","apply","getValue","_createClass","key","toArray","result","push","toObject","_this2","_classPrivateFieldGet","operation","start","end","i","filter","callback","thisArg","undefined","JSON","stringify","fromItems","keys","_wrapNativeSuper","checkResultErrors","errors","checkErrors","path","object","isArray","childPath","bytes","buffer","offset","Coder","type","localName","dynamic","_defineProperty","_throwError","message","_data","_dataLength","_writeData","WeakSet","Writer","_classPrivateMethodInitSpec","appendWriter","writer","_classPrivateMethodGet","_writeData2","data","writeBytes","paddingOffset","writeValue","writeUpdatableValue","_this3","_data2","_offset","_peekBytes","Reader","allowLoose","subReader","readBytes","loose","_peekBytes2","readValue","readIndex","alignedLength","Math","ceil"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\abi\\coders\\abstract-coder.ts"],"sourcesContent":["\nimport {\n    defineProperties, concat, getBytesCopy, getNumber, hexlify,\n    toBeArray, toBigInt, toNumber,\n    assert, assertArgument\n} from \"../../utils/index.js\";\n\nimport type { BigNumberish, BytesLike } from \"../../utils/index.js\";\n\n/**\n * @_ignore:\n */\nexport const WordSize: number = 32;\nconst Padding = new Uint8Array(WordSize);\n\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [ \"then\" ];\n\nconst _guard = { };\n\nfunction throwError(name: string, error: Error): never {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${ name }`);\n    (<any>wrapped).error = error;\n    throw wrapped;\n}\n\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array<any> {\n    readonly #names: ReadonlyArray<null | string>;\n\n    [ K: string | number ]: any\n\n    /**\n     *  @private\n     */\n    constructor(...args: Array<any>) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items: Array<any> = args[1];\n        let names: Array<null | string> = (args[2] || [ ]).slice();\n\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [ ];\n            wrap = false;\n        }\n\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof(name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, <Map<string, number>>(new Map()));\n\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n\n        if (!wrap) { return; }\n\n        // A wrapped Result is immutable\n        Object.freeze(this);\n\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"string\") {\n\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${ index }`, item);\n                        }\n                        return item;\n                    }\n\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function(this: any, ...args: Array<any>) {\n                            return value.apply((this === receiver) ? target: this, args);\n                        };\n\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target: this, [ prop ]);\n                    }\n                }\n\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n\n    /**\n     *  Returns the Result as a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(): Array<any> {\n        const result: Array<any> = [ ];\n        this.forEach((item, index) => {\n            if (item instanceof Error) { throwError(`index ${ index }`, item); }\n            result.push(item);\n        });\n        return result;\n    }\n\n    /**\n     *  Returns the Result as an Object with each name-value pair.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(): Record<string, any> {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                accum[name] = this.getValue(name);\n            }\n\n            return accum;\n        }, <Record<string, any>>{});\n    }\n\n    /**\n     *  @_ignore\n     */\n    slice(start?: number | undefined, end?: number | undefined): Result {\n        if (start == null) { start = 0; }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) { start = 0; }\n        }\n\n        if (end == null) { end = this.length; }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) { end = 0; }\n        }\n        if (end > this.length) { end = this.length; }\n\n        const result = [ ], names = [ ];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    filter(callback: (el: any, index: number, array: Result) => boolean, thisArg?: any): Result {\n        const result = [ ], names = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name: string): any {\n        const index = this.#names.indexOf(name);\n        if (index === -1) { return undefined; }\n\n        const value = this[index];\n\n        if (value instanceof Error) {\n            throwError(`property ${ JSON.stringify(name) }`, (<any>value).error);\n        }\n\n        return value;\n    }\n\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items: Array<any>, keys?: Array<null | string>): Result {\n        return new Result(_guard, items, keys);\n    }\n}\n\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error: any) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nfunction getValue(value: BigNumberish): Uint8Array {\n    let bytes = toBeArray(value);\n\n    assert (bytes.length <= WordSize, \"value out-of-bounds\",\n        \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([ Padding.slice(bytes.length % WordSize), bytes ]));\n    }\n\n    return bytes;\n}\n\n/**\n *  @_ignore\n */\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name!: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type!: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName!: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic!: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        defineProperties<Coder>(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n\n    _throwError(message: string, value: any): never {\n        assertArgument(false, message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data: Array<Uint8Array>;\n    #dataLength: number;\n\n    constructor() {\n        this.#data = [ ];\n        this.#dataLength = 0;\n    }\n\n    get data(): string {\n        return concat(this.#data);\n    }\n    get length(): number { return this.#dataLength; }\n\n    #writeData(data: Uint8Array): number {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([ bytes, Padding.slice(paddingOffset) ]))\n        }\n        return this.#writeData(bytes);\n    }\n\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value: BigNumberish): number {\n        return this.#writeData(getValue(value));\n    }\n\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value: BigNumberish) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    readonly allowLoose!: boolean;\n\n    readonly #data: Uint8Array;\n    #offset: number;\n\n    constructor(data: BytesLike, allowLoose?: boolean) {\n        defineProperties<Reader>(this, { allowLoose: !!allowLoose });\n\n        this.#data = getBytesCopy(data);\n\n        this.#offset = 0;\n    }\n\n    get data(): string { return hexlify(this.#data); }\n    get dataLength(): number { return this.#data.length; }\n    get consumed(): number { return this.#offset; }\n    get bytes(): Uint8Array { return new Uint8Array(this.#data); }\n\n    #peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            } else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength)\n    }\n\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset: number): Reader {\n        return new Reader(this.#data.slice(this.#offset + offset), this.allowLoose);\n    }\n\n    // Read bytes\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    // Read a numeric values\n    readValue(): bigint {\n        return toBigInt(this.readBytes(WordSize));\n    }\n\n    readIndex(): number {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}