{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classStaticPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  About ENS Resolver\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport { hexlify, toBeHex, defineProperties, encodeBase58, assert, assertArgument, isError, FetchRequest } from \"../utils/index.js\";\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n  }\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\n;\n;\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */\nexport var MulticoinProviderPlugin = /*#__PURE__*/function () {\n  function MulticoinProviderPlugin(name) {\n    _classCallCheck(this, MulticoinProviderPlugin);\n    _defineProperty(this, \"name\", void 0);\n    defineProperties(this, {\n      name: name\n    });\n  }\n  _createClass(MulticoinProviderPlugin, [{\n    key: \"connect\",\n    value: function connect(proivder) {\n      return this;\n    }\n  }, {\n    key: \"supportsCoinType\",\n    value: function supportsCoinType(coinType) {\n      return false;\n    }\n  }, {\n    key: \"encodeAddress\",\n    value: function () {\n      var _encodeAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(coinType, address) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error(\"unsupported coin\");\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function encodeAddress(_x, _x2) {\n        return _encodeAddress.apply(this, arguments);\n      }\n      return encodeAddress;\n    }()\n  }, {\n    key: \"decodeAddress\",\n    value: function () {\n      var _decodeAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(coinType, data) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new Error(\"unsupported coin\");\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function decodeAddress(_x3, _x4) {\n        return _decodeAddress.apply(this, arguments);\n      }\n      return decodeAddress;\n    }()\n  }]);\n  return MulticoinProviderPlugin;\n}();\nvar BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n/**\n *  A basic multicoin provider plugin.\n */\nexport var BasicMulticoinProviderPlugin = /*#__PURE__*/function (_MulticoinProviderPlu) {\n  _inherits(BasicMulticoinProviderPlugin, _MulticoinProviderPlu);\n  var _super = _createSuper(BasicMulticoinProviderPlugin);\n  function BasicMulticoinProviderPlugin() {\n    _classCallCheck(this, BasicMulticoinProviderPlugin);\n    return _super.call(this, BasicMulticoinPluginId);\n  }\n  return _createClass(BasicMulticoinProviderPlugin);\n}(MulticoinProviderPlugin);\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */\nvar _supports = /*#__PURE__*/new WeakMap();\nvar _resolver = /*#__PURE__*/new WeakMap();\nvar _fetch = /*#__PURE__*/new WeakSet();\nexport var EnsResolver = /*#__PURE__*/function () {\n  function EnsResolver(provider, address, name) {\n    _classCallCheck(this, EnsResolver);\n    _classPrivateMethodInitSpec(this, _fetch);\n    /**\n     *  The connected provider.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The address of the resolver.\n     */\n    _defineProperty(this, \"address\", void 0);\n    /**\n     *  The name this resolver was resolved against.\n     */\n    _defineProperty(this, \"name\", void 0);\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _classPrivateFieldInitSpec(this, _supports, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _resolver, {\n      writable: true,\n      value: void 0\n    });\n    defineProperties(this, {\n      provider: provider,\n      address: address,\n      name: name\n    });\n    _classPrivateFieldSet(this, _supports, null);\n    _classPrivateFieldSet(this, _resolver, new Contract(address, [\"function supportsInterface(bytes4) view returns (bool)\", \"function resolve(bytes, bytes) view returns (bytes)\", \"function addr(bytes32) view returns (address)\", \"function addr(bytes32, uint) view returns (address)\", \"function text(bytes32, string) view returns (string)\", \"function contenthash(bytes32) view returns (bytes)\"], provider));\n  }\n  /**\n   *  Resolves to true if the resolver supports wildcard resolution.\n   */\n  _createClass(EnsResolver, [{\n    key: \"supportsWildcard\",\n    value: function () {\n      var _supportsWildcard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_classPrivateFieldGet(this, _supports) == null) {\n                _classPrivateFieldSet(this, _supports, _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.prev = 0;\n                        _context3.next = 3;\n                        return _classPrivateFieldGet(_this, _resolver).supportsInterface(\"0x9061b923\");\n                      case 3:\n                        return _context3.abrupt(\"return\", _context3.sent);\n                      case 6:\n                        _context3.prev = 6;\n                        _context3.t0 = _context3[\"catch\"](0);\n                        if (!isError(_context3.t0, \"CALL_EXCEPTION\")) {\n                          _context3.next = 10;\n                          break;\n                        }\n                        return _context3.abrupt(\"return\", false);\n                      case 10:\n                        // Let future attempts try again...\n                        _classPrivateFieldSet(_this, _supports, null);\n                        throw _context3.t0;\n                      case 12:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, null, [[0, 6]]);\n                }))());\n              }\n              _context4.next = 3;\n              return _classPrivateFieldGet(this, _supports);\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function supportsWildcard() {\n        return _supportsWildcard.apply(this, arguments);\n      }\n      return supportsWildcard;\n    }()\n  }, {\n    key: \"getAddress\",\n    value:\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */\n    function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(coinType) {\n        var result, coinPlugin, _iterator, _step, plugin, data, address;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (coinType == null) {\n                coinType = 60;\n              }\n              if (!(coinType === 60)) {\n                _context5.next = 16;\n                break;\n              }\n              _context5.prev = 2;\n              _context5.next = 5;\n              return _classPrivateMethodGet(this, _fetch, _fetch2).call(this, \"addr(bytes32)\");\n            case 5:\n              result = _context5.sent;\n              if (!(result == null || result === ZeroAddress)) {\n                _context5.next = 8;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 8:\n              return _context5.abrupt(\"return\", result);\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](2);\n              if (!isError(_context5.t0, \"CALL_EXCEPTION\")) {\n                _context5.next = 15;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 15:\n              throw _context5.t0;\n            case 16:\n              coinPlugin = null;\n              _iterator = _createForOfIteratorHelper(this.provider.plugins);\n              _context5.prev = 18;\n              _iterator.s();\n            case 20:\n              if ((_step = _iterator.n()).done) {\n                _context5.next = 29;\n                break;\n              }\n              plugin = _step.value;\n              if (plugin instanceof MulticoinProviderPlugin) {\n                _context5.next = 24;\n                break;\n              }\n              return _context5.abrupt(\"continue\", 27);\n            case 24:\n              if (!plugin.supportsCoinType(coinType)) {\n                _context5.next = 27;\n                break;\n              }\n              coinPlugin = plugin;\n              return _context5.abrupt(\"break\", 29);\n            case 27:\n              _context5.next = 20;\n              break;\n            case 29:\n              _context5.next = 34;\n              break;\n            case 31:\n              _context5.prev = 31;\n              _context5.t1 = _context5[\"catch\"](18);\n              _iterator.e(_context5.t1);\n            case 34:\n              _context5.prev = 34;\n              _iterator.f();\n              return _context5.finish(34);\n            case 37:\n              if (!(coinPlugin == null)) {\n                _context5.next = 39;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 39:\n              _context5.next = 41;\n              return _classPrivateMethodGet(this, _fetch, _fetch2).call(this, \"addr(bytes32,uint)\", [coinType]);\n            case 41:\n              data = _context5.sent;\n              if (!(data == null || data === \"0x\")) {\n                _context5.next = 44;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 44:\n              _context5.next = 46;\n              return coinPlugin.encodeAddress(coinType, data);\n            case 46:\n              address = _context5.sent;\n              if (!(address != null)) {\n                _context5.next = 49;\n                break;\n              }\n              return _context5.abrupt(\"return\", address);\n            case 49:\n              assert(false, \"invalid coin data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getAddress(\".concat(coinType, \")\"),\n                info: {\n                  coinType: coinType,\n                  data: data\n                }\n              });\n            case 50:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2, 11], [18, 31, 34, 37]]);\n      }));\n      function getAddress(_x5) {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }()\n    /**\n     *  Resolves to the EIP-643 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */\n  }, {\n    key: \"getText\",\n    value: function () {\n      var _getText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key) {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _classPrivateMethodGet(this, _fetch, _fetch2).call(this, \"text(bytes32,string)\", [key]);\n            case 2:\n              data = _context6.sent;\n              if (!(data == null || data === \"0x\")) {\n                _context6.next = 5;\n                break;\n              }\n              return _context6.abrupt(\"return\", null);\n            case 5:\n              return _context6.abrupt(\"return\", data);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getText(_x6) {\n        return _getText.apply(this, arguments);\n      }\n      return getText;\n    }()\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */\n  }, {\n    key: \"getContentHash\",\n    value: function () {\n      var _getContentHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var data, ipfs, scheme, length, swarm;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _classPrivateMethodGet(this, _fetch, _fetch2).call(this, \"contenthash(bytes32)\");\n            case 2:\n              data = _context7.sent;\n              if (!(data == null || data === \"0x\")) {\n                _context7.next = 5;\n                break;\n              }\n              return _context7.abrupt(\"return\", null);\n            case 5:\n              // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n              ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipfs) {\n                _context7.next = 11;\n                break;\n              }\n              scheme = ipfs[1] === \"e3010170\" ? \"ipfs\" : \"ipns\";\n              length = parseInt(ipfs[4], 16);\n              if (!(ipfs[5].length === length * 2)) {\n                _context7.next = 11;\n                break;\n              }\n              return _context7.abrupt(\"return\", \"\".concat(scheme, \"://\").concat(encodeBase58(\"0x\" + ipfs[2])));\n            case 11:\n              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n              swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n              if (!(swarm && swarm[1].length === 64)) {\n                _context7.next = 14;\n                break;\n              }\n              return _context7.abrupt(\"return\", \"bzz://\".concat(swarm[1]));\n            case 14:\n              assert(false, \"invalid or unsupported content hash data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getContentHash()\",\n                info: {\n                  data: data\n                }\n              });\n            case 15:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getContentHash() {\n        return _getContentHash.apply(this, arguments);\n      }\n      return getContentHash;\n    }()\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */\n  }, {\n    key: \"getAvatar\",\n    value: function () {\n      var _getAvatar2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var avatar;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._getAvatar();\n            case 2:\n              avatar = _context8.sent;\n              return _context8.abrupt(\"return\", avatar.url);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getAvatar() {\n        return _getAvatar2.apply(this, arguments);\n      }\n      return getAvatar;\n    }()\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */\n  }, {\n    key: \"_getAvatar\",\n    value: function () {\n      var _getAvatar3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var linkage, avatar, i, match, scheme, url, selector, owner, comps, tokenId, contract, tokenOwner, balance, metadataUrl, metadata, response, bytes, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              linkage = [{\n                type: \"name\",\n                value: this.name\n              }];\n              _context9.prev = 1;\n              _context9.next = 4;\n              return this.getText(\"avatar\");\n            case 4:\n              avatar = _context9.sent;\n              if (!(avatar == null)) {\n                _context9.next = 8;\n                break;\n              }\n              linkage.push({\n                type: \"!avatar\",\n                value: \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 8:\n              linkage.push({\n                type: \"avatar\",\n                value: avatar\n              });\n              i = 0;\n            case 10:\n              if (!(i < matchers.length)) {\n                _context9.next = 109;\n                break;\n              }\n              match = avatar.match(matchers[i]);\n              if (!(match == null)) {\n                _context9.next = 14;\n                break;\n              }\n              return _context9.abrupt(\"continue\", 106);\n            case 14:\n              scheme = match[1].toLowerCase();\n              _context9.t0 = scheme;\n              _context9.next = _context9.t0 === \"https\" ? 18 : _context9.t0 === \"data\" ? 18 : _context9.t0 === \"ipfs\" ? 20 : _context9.t0 === \"erc721\" ? 24 : _context9.t0 === \"erc1155\" ? 24 : 106;\n              break;\n            case 18:\n              linkage.push({\n                type: \"url\",\n                value: avatar\n              });\n              return _context9.abrupt(\"return\", {\n                linkage: linkage,\n                url: avatar\n              });\n            case 20:\n              url = getIpfsLink(avatar);\n              linkage.push({\n                type: \"ipfs\",\n                value: avatar\n              });\n              linkage.push({\n                type: \"url\",\n                value: url\n              });\n              return _context9.abrupt(\"return\", {\n                linkage: linkage,\n                url: url\n              });\n            case 24:\n              // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n              selector = scheme === \"erc721\" ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n              linkage.push({\n                type: scheme,\n                value: avatar\n              });\n              // The owner of this name\n              _context9.next = 28;\n              return this.getAddress();\n            case 28:\n              owner = _context9.sent;\n              if (!(owner == null)) {\n                _context9.next = 32;\n                break;\n              }\n              linkage.push({\n                type: \"!owner\",\n                value: \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 32:\n              comps = (match[2] || \"\").split(\"/\");\n              if (!(comps.length !== 2)) {\n                _context9.next = 36;\n                break;\n              }\n              linkage.push({\n                type: \"!\".concat(scheme, \"caip\"),\n                value: match[2] || \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 36:\n              tokenId = comps[1];\n              contract = new Contract(comps[0], [\n              // ERC-721\n              \"function tokenURI(uint) view returns (string)\", \"function ownerOf(uint) view returns (address)\",\n              // ERC-1155\n              \"function uri(uint) view returns (string)\", \"function balanceOf(address, uint256) view returns (uint)\"], this.provider); // Check that this account owns the token\n              if (!(scheme === \"erc721\")) {\n                _context9.next = 48;\n                break;\n              }\n              _context9.next = 41;\n              return contract.ownerOf(tokenId);\n            case 41:\n              tokenOwner = _context9.sent;\n              if (!(owner !== tokenOwner)) {\n                _context9.next = 45;\n                break;\n              }\n              linkage.push({\n                type: \"!owner\",\n                value: tokenOwner\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 45:\n              linkage.push({\n                type: \"owner\",\n                value: tokenOwner\n              });\n              _context9.next = 56;\n              break;\n            case 48:\n              if (!(scheme === \"erc1155\")) {\n                _context9.next = 56;\n                break;\n              }\n              _context9.next = 51;\n              return contract.balanceOf(owner, tokenId);\n            case 51:\n              balance = _context9.sent;\n              if (balance) {\n                _context9.next = 55;\n                break;\n              }\n              linkage.push({\n                type: \"!balance\",\n                value: \"0\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 55:\n              linkage.push({\n                type: \"balance\",\n                value: balance.toString()\n              });\n            case 56:\n              _context9.next = 58;\n              return contract[selector](tokenId);\n            case 58:\n              metadataUrl = _context9.sent;\n              if (!(metadataUrl == null || metadataUrl === \"0x\")) {\n                _context9.next = 62;\n                break;\n              }\n              linkage.push({\n                type: \"!metadata-url\",\n                value: \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 62:\n              linkage.push({\n                type: \"metadata-url-base\",\n                value: metadataUrl\n              });\n              // ERC-1155 allows a generic {id} in the URL\n              if (scheme === \"erc1155\") {\n                metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                linkage.push({\n                  type: \"metadata-url-expanded\",\n                  value: metadataUrl\n                });\n              }\n              // Transform IPFS metadata links\n              if (metadataUrl.match(/^ipfs:/i)) {\n                metadataUrl = getIpfsLink(metadataUrl);\n              }\n              linkage.push({\n                type: \"metadata-url\",\n                value: metadataUrl\n              });\n              // Get the token metadata\n              metadata = {};\n              _context9.next = 69;\n              return new FetchRequest(metadataUrl).send();\n            case 69:\n              response = _context9.sent;\n              response.assertOk();\n              _context9.prev = 71;\n              metadata = response.bodyJson;\n              _context9.next = 87;\n              break;\n            case 75:\n              _context9.prev = 75;\n              _context9.t1 = _context9[\"catch\"](71);\n              _context9.prev = 77;\n              linkage.push({\n                type: \"!metadata\",\n                value: response.bodyText\n              });\n              _context9.next = 86;\n              break;\n            case 81:\n              _context9.prev = 81;\n              _context9.t2 = _context9[\"catch\"](77);\n              bytes = response.body;\n              if (bytes) {\n                linkage.push({\n                  type: \"!metadata\",\n                  value: hexlify(bytes)\n                });\n              }\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 86:\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 87:\n              if (metadata) {\n                _context9.next = 90;\n                break;\n              }\n              linkage.push({\n                type: \"!metadata\",\n                value: \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 90:\n              linkage.push({\n                type: \"metadata\",\n                value: JSON.stringify(metadata)\n              });\n              // Pull the image URL out\n              imageUrl = metadata.image;\n              if (!(typeof imageUrl !== \"string\")) {\n                _context9.next = 95;\n                break;\n              }\n              linkage.push({\n                type: \"!imageUrl\",\n                value: \"\"\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 95:\n              if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                _context9.next = 98;\n                break;\n              }\n              _context9.next = 104;\n              break;\n            case 98:\n              // Transform IPFS link to gateway\n              ipfs = imageUrl.match(matcherIpfs);\n              if (!(ipfs == null)) {\n                _context9.next = 102;\n                break;\n              }\n              linkage.push({\n                type: \"!imageUrl-ipfs\",\n                value: imageUrl\n              });\n              return _context9.abrupt(\"return\", {\n                url: null,\n                linkage: linkage\n              });\n            case 102:\n              linkage.push({\n                type: \"imageUrl-ipfs\",\n                value: imageUrl\n              });\n              imageUrl = getIpfsLink(imageUrl);\n            case 104:\n              linkage.push({\n                type: \"url\",\n                value: imageUrl\n              });\n              return _context9.abrupt(\"return\", {\n                linkage: linkage,\n                url: imageUrl\n              });\n            case 106:\n              i++;\n              _context9.next = 10;\n              break;\n            case 109:\n              _context9.next = 113;\n              break;\n            case 111:\n              _context9.prev = 111;\n              _context9.t3 = _context9[\"catch\"](1);\n            case 113:\n              return _context9.abrupt(\"return\", {\n                linkage: linkage,\n                url: null\n              });\n            case 114:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[1, 111], [71, 75], [77, 81]]);\n      }));\n      function _getAvatar() {\n        return _getAvatar3.apply(this, arguments);\n      }\n      return _getAvatar;\n    }()\n  }], [{\n    key: \"getEnsAddress\",\n    value: function () {\n      var _getEnsAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(provider) {\n        var network, ensPlugin;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return provider.getNetwork();\n            case 2:\n              network = _context10.sent;\n              ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\"); // No ENS...\n              assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getEnsAddress\",\n                info: {\n                  network: network\n                }\n              });\n              return _context10.abrupt(\"return\", ensPlugin.address);\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function getEnsAddress(_x7) {\n        return _getEnsAddress.apply(this, arguments);\n      }\n      return getEnsAddress;\n    }()\n  }, {\n    key: \"fromName\",\n    value:\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */\n    function () {\n      var _fromName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(provider, name) {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              currentName = name;\n            case 1:\n              if (!true) {\n                _context11.next = 22;\n                break;\n              }\n              if (!(currentName === \"\" || currentName === \".\")) {\n                _context11.next = 4;\n                break;\n              }\n              return _context11.abrupt(\"return\", null);\n            case 4:\n              if (!(name !== \"eth\" && currentName === \"eth\")) {\n                _context11.next = 6;\n                break;\n              }\n              return _context11.abrupt(\"return\", null);\n            case 6:\n              _context11.next = 8;\n              return _classStaticPrivateMethodGet(EnsResolver, EnsResolver, _getResolver).call(EnsResolver, provider, currentName);\n            case 8:\n              addr = _context11.sent;\n              if (!(addr != null)) {\n                _context11.next = 19;\n                break;\n              }\n              resolver = new EnsResolver(provider, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n              _context11.t0 = currentName !== name;\n              if (!_context11.t0) {\n                _context11.next = 16;\n                break;\n              }\n              _context11.next = 15;\n              return resolver.supportsWildcard();\n            case 15:\n              _context11.t0 = !_context11.sent;\n            case 16:\n              if (!_context11.t0) {\n                _context11.next = 18;\n                break;\n              }\n              return _context11.abrupt(\"return\", null);\n            case 18:\n              return _context11.abrupt(\"return\", resolver);\n            case 19:\n              // Get the parent node\n              currentName = currentName.split(\".\").slice(1).join(\".\");\n              _context11.next = 1;\n              break;\n            case 22:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }));\n      function fromName(_x8, _x9) {\n        return _fromName.apply(this, arguments);\n      }\n      return fromName;\n    }()\n  }]);\n  return EnsResolver;\n}();\nfunction _fetch2(_x10, _x11) {\n  return _fetch3.apply(this, arguments);\n}\nfunction _fetch3() {\n  _fetch3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(funcName, params) {\n    var iface, fragment, _classPrivateFieldGet2, result;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          params = (params || []).slice();\n          iface = _classPrivateFieldGet(this, _resolver).interface; // The first parameters is always the nodehash\n          params.unshift(namehash(this.name));\n          fragment = null;\n          _context12.next = 6;\n          return this.supportsWildcard();\n        case 6:\n          if (!_context12.sent) {\n            _context12.next = 11;\n            break;\n          }\n          fragment = iface.getFunction(funcName);\n          assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n            info: {\n              funcName: funcName\n            }\n          });\n          params = [dnsEncode(this.name), iface.encodeFunctionData(fragment, params)];\n          funcName = \"resolve(bytes,bytes)\";\n        case 11:\n          params.push({\n            ccipReadEnable: true\n          });\n          _context12.prev = 12;\n          _context12.next = 15;\n          return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _resolver))[funcName].apply(_classPrivateFieldGet2, _toConsumableArray(params));\n        case 15:\n          result = _context12.sent;\n          if (!fragment) {\n            _context12.next = 18;\n            break;\n          }\n          return _context12.abrupt(\"return\", iface.decodeFunctionResult(fragment, result)[0]);\n        case 18:\n          return _context12.abrupt(\"return\", result);\n        case 21:\n          _context12.prev = 21;\n          _context12.t0 = _context12[\"catch\"](12);\n          if (isError(_context12.t0, \"CALL_EXCEPTION\")) {\n            _context12.next = 25;\n            break;\n          }\n          throw _context12.t0;\n        case 25:\n          return _context12.abrupt(\"return\", null);\n        case 26:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, this, [[12, 21]]);\n  }));\n  return _fetch3.apply(this, arguments);\n}\nfunction _getResolver(_x12, _x13) {\n  return _getResolver3.apply(this, arguments);\n}\nfunction _getResolver3() {\n  _getResolver3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(provider, name) {\n    var ensAddr, contract, addr;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return EnsResolver.getEnsAddress(provider);\n        case 2:\n          ensAddr = _context13.sent;\n          _context13.prev = 3;\n          contract = new Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], provider);\n          _context13.next = 7;\n          return contract.resolver(namehash(name), {\n            enableCcipRead: true\n          });\n        case 7:\n          addr = _context13.sent;\n          if (!(addr === ZeroAddress)) {\n            _context13.next = 10;\n            break;\n          }\n          return _context13.abrupt(\"return\", null);\n        case 10:\n          return _context13.abrupt(\"return\", addr);\n        case 13:\n          _context13.prev = 13;\n          _context13.t0 = _context13[\"catch\"](3);\n          throw _context13.t0;\n        case 16:\n          return _context13.abrupt(\"return\", null);\n        case 17:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, null, [[3, 13]]);\n  }));\n  return _getResolver3.apply(this, arguments);\n}","map":{"version":3,"names":["ZeroAddress","Contract","dnsEncode","namehash","hexlify","toBeHex","defineProperties","encodeBase58","assert","assertArgument","isError","FetchRequest","getIpfsLink","link","match","substring","concat","MulticoinProviderPlugin","name","_classCallCheck","_defineProperty","_createClass","key","value","connect","proivder","supportsCoinType","coinType","_encodeAddress","_asyncToGenerator","_regeneratorRuntime","mark","_callee","address","wrap","_callee$","_context","prev","next","Error","stop","encodeAddress","_x","_x2","apply","arguments","_decodeAddress","_callee2","data","_callee2$","_context2","decodeAddress","_x3","_x4","BasicMulticoinPluginId","BasicMulticoinProviderPlugin","_MulticoinProviderPlu","_inherits","_super","_createSuper","call","matcherIpfs","RegExp","matchers","_supports","WeakMap","_resolver","_fetch","WeakSet","EnsResolver","provider","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_supportsWildcard","_callee4","_this","_callee4$","_context4","_classPrivateFieldGet","_callee3","_callee3$","_context3","supportsInterface","abrupt","sent","t0","supportsWildcard","_getAddress","_callee5","result","coinPlugin","_iterator","_step","plugin","_callee5$","_context5","_classPrivateMethodGet","_fetch2","_createForOfIteratorHelper","plugins","s","n","done","t1","e","f","finish","operation","info","getAddress","_x5","_getText","_callee6","_callee6$","_context6","getText","_x6","_getContentHash","_callee7","ipfs","scheme","length","swarm","_callee7$","_context7","parseInt","getContentHash","_getAvatar2","_callee8","avatar","_callee8$","_context8","_getAvatar","url","getAvatar","_getAvatar3","_callee9","linkage","i","selector","owner","comps","tokenId","contract","tokenOwner","balance","metadataUrl","metadata","response","bytes","imageUrl","_callee9$","_context9","type","push","toLowerCase","split","ownerOf","balanceOf","toString","replace","send","assertOk","bodyJson","bodyText","t2","body","JSON","stringify","image","t3","_getEnsAddress","_callee10","network","ensPlugin","_callee10$","_context10","getNetwork","getPlugin","getEnsAddress","_x7","_fromName","_callee11","currentName","addr","resolver","_callee11$","_context11","_classStaticPrivateMethodGet","_getResolver","slice","join","fromName","_x8","_x9","_x10","_x11","_fetch3","_callee12","funcName","params","iface","fragment","_classPrivateFieldGet2","_callee12$","_context12","interface","unshift","getFunction","encodeFunctionData","ccipReadEnable","_toConsumableArray","decodeFunctionResult","_x12","_x13","_getResolver3","_callee13","ensAddr","_callee13$","_context13","enableCcipRead"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\ens-resolver.ts"],"sourcesContent":["/**\n *  About ENS Resolver\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */\n\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport {\n    hexlify, toBeHex,\n    defineProperties, encodeBase58,\n    assert, assertArgument, isError,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport type { FunctionFragment } from \"../abi/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { AbstractProvider, AbstractProviderPlugin } from \"./abstract-provider.js\";\nimport type { EnsPlugin } from \"./plugins-network.js\";\nimport type { Provider } from \"./provider.js\";\n\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\n/**\n *  The type of data found during a steip during avatar resolution.\n */\nexport type AvatarLinkageType = \"name\" | \"avatar\" | \"!avatar\" | \"url\" | \"data\" | \"ipfs\" |\n    \"erc721\" | \"erc1155\" | \"!erc721-caip\" | \"!erc1155-caip\" |\n    \"!owner\" | \"owner\" | \"!balance\" | \"balance\" |\n    \"metadata-url-base\" | \"metadata-url-expanded\" | \"metadata-url\" | \"!metadata-url\" |\n    \"!metadata\" | \"metadata\" |\n    \"!imageUrl\" | \"imageUrl-ipfs\" | \"imageUrl\" | \"!imageUrl-ipfs\";\n\n/**\n *  An individual record for each step during avatar resolution.\n */\nexport interface AvatarLinkage {\n    type: AvatarLinkageType;\n    value: string;\n};\n\n/**\n *  When resolving an avatar for an ENS name, there are many\n *  steps involved, fetching metadata, validating results, et cetera.\n *\n *  Some applications may wish to analyse this data, or use this data\n *  to diagnose promblems, so an **AvatarResult** provides details of\n *  each completed step during avatar resolution.\n */\nexport interface AvatarResult {\n    linkage: Array<AvatarLinkage>;\n    url: null | string;\n};\n\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */\nexport abstract class MulticoinProviderPlugin implements AbstractProviderPlugin {\n    readonly name!: string;\n\n    constructor(name: string) {\n        defineProperties<MulticoinProviderPlugin>(this, { name });\n    }\n\n    connect(proivder: Provider): MulticoinProviderPlugin {\n        return this;\n    }\n\n    supportsCoinType(coinType: number): boolean {\n        return false;\n    }\n\n    async encodeAddress(coinType: number, address: string): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n\n    async decodeAddress(coinType: number, data: BytesLike): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n}\n\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n\n/**\n *  A basic multicoin provider plugin.\n */\nexport class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    constructor() {\n        super(BasicMulticoinPluginId);\n    }\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */\nexport class EnsResolver {\n    /**\n     *  The connected provider.\n     */\n    provider!: AbstractProvider;\n\n    /**\n     *  The address of the resolver.\n     */\n    address!: string;\n\n    /**\n     *  The name this resolver was resolved against.\n     */\n    name!: string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    #supports2544: null | Promise<boolean>;\n\n    #resolver: Contract;\n\n    constructor(provider: AbstractProvider, address: string, name: string) {\n        defineProperties<EnsResolver>(this, { provider, address, name });\n        this.#supports2544 = null;\n\n        this.#resolver = new Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (address)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\",\n        ], provider);\n\n    }\n\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */\n    async supportsWildcard(): Promise<boolean> {\n        if (this.#supports2544 == null) {\n            this.#supports2544 = (async () => {\n                try {\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\n                } catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if (isError(error, \"CALL_EXCEPTION\")) { return false; }\n\n                    // Let future attempts try again...\n                    this.#supports2544 = null;\n\n                    throw error;\n                }\n            })();\n        }\n\n        return await this.#supports2544;\n    }\n\n    async #fetch(funcName: string, params?: Array<any>): Promise<null | any> {\n        params = (params || []).slice();\n        const iface = this.#resolver.interface;\n\n        // The first parameters is always the nodehash\n        params.unshift(namehash(this.name))\n\n        let fragment: null | FunctionFragment = null;\n        if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n                info: { funcName }\n            });\n\n            params = [\n                dnsEncode(this.name),\n                iface.encodeFunctionData(fragment, params)\n            ];\n\n            funcName = \"resolve(bytes,bytes)\";\n        }\n\n        params.push({\n            ccipReadEnable: true\n        });\n\n        try {\n            const result = await this.#resolver[funcName](...params);\n\n            if (fragment) {\n                return iface.decodeFunctionResult(fragment, result)[0];\n            }\n\n            return result;\n        } catch (error: any) {\n            if (!isError(error, \"CALL_EXCEPTION\")) { throw error; }\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */\n    async getAddress(coinType?: number): Promise<null | string> {\n        if (coinType == null) { coinType = 60; }\n        if (coinType === 60) {\n            try {\n                const result = await this.#fetch(\"addr(bytes32)\");\n\n                // No address\n                if (result == null || result === ZeroAddress) { return null; }\n\n                return result;\n            } catch (error: any) {\n                if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n                throw error;\n            }\n        }\n\n        let coinPlugin: null | MulticoinProviderPlugin = null;\n        for (const plugin of this.provider.plugins) {\n            if (!(plugin instanceof MulticoinProviderPlugin)) { continue; }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n\n        if (coinPlugin == null) { return null; }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [ coinType ]);\n\n        // No address\n        if (data == null || data === \"0x\") { return null; }\n\n        // Compute the address\n        const address = await coinPlugin.encodeAddress(coinType, data);\n\n        if (address != null) { return address; }\n\n        assert(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${ coinType })`,\n            info: { coinType, data }\n        });\n    }\n\n    /**\n     *  Resolves to the EIP-643 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */\n    async getText(key: string): Promise<null | string> {\n        const data = await this.#fetch(\"text(bytes32,string)\", [ key ]);\n        if (data == null || data === \"0x\") { return null; }\n        return data;\n    }\n\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */\n    async getContentHash(): Promise<null | string> {\n        // keccak256(\"contenthash()\")\n        const data = await this.#fetch(\"contenthash(bytes32)\");\n\n        // No contenthash\n        if (data == null || data === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = (ipfs[1] === \"e3010170\") ? \"ipfs\": \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return `${ scheme }:/\\/${ encodeBase58(\"0x\" + ipfs[2])}`;\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm && swarm[1].length === 64) {\n            return `bzz:/\\/${ swarm[1] }`;\n        }\n\n        assert(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: { data }\n        });\n    }\n\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */\n    async getAvatar(): Promise<null | string> {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */\n    async _getAvatar(): Promise<AvatarResult> {\n        const linkage: Array<AvatarLinkage> = [ { type: \"name\", value: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({ type: \"!avatar\", value: \"\" });\n                return { url: null, linkage };\n            }\n            linkage.push({ type: \"avatar\", value: avatar });\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({ type: \"url\", value: avatar });\n                        return { linkage, url: avatar };\n                    case \"ipfs\": {\n                        const url = getIpfsLink(avatar);\n                        linkage.push({ type: \"ipfs\", value: avatar });\n                        linkage.push({ type: \"url\", value: url });\n                        return { linkage, url };\n                    }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"tokenURI(uint256)\": \"uri(uint256)\";\n                        linkage.push({ type: scheme, value: avatar });\n\n                        // The owner of this name\n                        const owner = await this.getAddress();\n                        if (owner == null) {\n                            linkage.push({ type: \"!owner\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) {\n                            linkage.push({ type: <any>`!${ scheme }caip`, value: (match[2] || \"\") });\n                            return { url: null, linkage };\n                        }\n\n                        const tokenId = comps[1];\n\n                        const contract = new Contract(comps[0], [\n                            // ERC-721\n                            \"function tokenURI(uint) view returns (string)\",\n                            \"function ownerOf(uint) view returns (address)\",\n\n                            // ERC-1155\n                            \"function uri(uint) view returns (string)\",\n                            \"function balanceOf(address, uint256) view returns (uint)\"\n                        ], this.provider);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            const tokenOwner = await contract.ownerOf(tokenId);\n\n                            if (owner !== tokenOwner) {\n                                linkage.push({ type: \"!owner\", value: tokenOwner });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"owner\", value: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            const balance = await contract.balanceOf(owner, tokenId);\n                            if (!balance) {\n                                linkage.push({ type: \"!balance\", value: \"0\" });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"balance\", value: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        let metadataUrl = await contract[selector](tokenId);\n                        if (metadataUrl == null || metadataUrl === \"0x\") {\n                            linkage.push({ type: \"!metadata-url\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n                        linkage.push({ type: \"metadata-url\", value: metadataUrl });\n\n                        // Get the token metadata\n                        let metadata: any = { };\n                        const response = await (new FetchRequest(metadataUrl)).send();\n                        response.assertOk();\n\n                        try {\n                            metadata = response.bodyJson;\n                        } catch (error) {\n                            try {\n                                linkage.push({ type: \"!metadata\", value: response.bodyText });\n                            } catch (error) {\n                                const bytes = response.body;\n                                if (bytes) {\n                                    linkage.push({ type: \"!metadata\", value: hexlify(bytes) });\n                                }\n                                return { url: null, linkage };\n                            }\n                            return { url: null, linkage };\n                        }\n\n                        if (!metadata) {\n                            linkage.push({ type: \"!metadata\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") {\n                            linkage.push({ type: \"!imageUrl\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) {\n                                linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\n                                return { url: null, linkage };\n                            }\n\n                            linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", value: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return { linkage, url: null };\n    }\n\n    static async getEnsAddress(provider: Provider): Promise<string> {\n        const network = await provider.getNetwork();\n\n        const ensPlugin = network.getPlugin<EnsPlugin>(\"org.ethers.plugins.network.Ens\");\n\n        // No ENS...\n        assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\", info: { network } });\n\n        return ensPlugin.address;\n    }\n\n    static async #getResolver(provider: Provider, name: string): Promise<null | string> {\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\n\n        try {\n            const contract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n\n            const addr = await contract.resolver(namehash(name), {\n                enableCcipRead: true\n            });\n\n            if (addr === ZeroAddress) { return null; }\n            return addr;\n\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32),\n            // so probably a link error\n            throw error;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */\n    static async fromName(provider: AbstractProvider, name: string): Promise<null | EnsResolver> {\n\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcar resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await EnsResolver.#getResolver(provider, currentName);\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}