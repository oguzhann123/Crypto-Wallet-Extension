{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport var AlchemyProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(AlchemyProvider, _JsonRpcProvider);\n  var _super = _createSuper(AlchemyProvider);\n  function AlchemyProvider(_network, apiKey) {\n    var _this;\n    _classCallCheck(this, AlchemyProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    var request = AlchemyProvider.getRequest(network, apiKey);\n    _this = _super.call(this, request, network, {\n      staticNetwork: network\n    });\n    _defineProperty(_assertThisInitialized(_this), \"apiKey\", void 0);\n    defineProperties(_assertThisInitialized(_this), {\n      apiKey: apiKey\n    });\n    return _this;\n  }\n  _createClass(AlchemyProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new AlchemyProvider(chainId, this.apiKey);\n      } catch (error) {}\n      return _get(_getPrototypeOf(AlchemyProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {\n        var _yield$resolvePropert, trace, tx, data, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(req.method === \"getTransactionResult\")) {\n                _context.next = 14;\n                break;\n              }\n              _context.next = 3;\n              return resolveProperties({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n              });\n            case 3:\n              _yield$resolvePropert = _context.sent;\n              trace = _yield$resolvePropert.trace;\n              tx = _yield$resolvePropert.tx;\n              if (!(trace == null || tx == null)) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 8:\n              error = false;\n              try {\n                data = trace[0].result.output;\n                error = trace[0].error === \"Reverted\";\n              } catch (error) {}\n              if (!data) {\n                _context.next = 13;\n                break;\n              }\n              assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                action: \"getTransactionResult\",\n                data: data,\n                reason: null,\n                transaction: tx,\n                invocation: null,\n                revert: null // @TODO\n              });\n              return _context.abrupt(\"return\", data);\n            case 13:\n              assert(false, \"could not parse trace result\", \"BAD_DATA\", {\n                value: trace\n              });\n            case 14:\n              _context.next = 16;\n              return _get(_getPrototypeOf(AlchemyProvider.prototype), \"_perform\", this).call(this, req);\n            case 16:\n              return _context.abrupt(\"return\", _context.sent);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _perform(_x) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, apiKey) {\n      if (apiKey == null) {\n        apiKey = defaultApiKey;\n      }\n      var request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/v2/\").concat(apiKey));\n      request.allowGzip = true;\n      if (apiKey === defaultApiKey) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  showThrottleMessage(\"alchemy\");\n                  return _context2.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          return function (_x2, _x3, _x4) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return AlchemyProvider;\n}(JsonRpcProvider);","map":{"version":3,"names":["defineProperties","resolveProperties","assert","assertArgument","FetchRequest","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AlchemyProvider","_JsonRpcProvider","_inherits","_super","_createSuper","_network","apiKey","_this","_classCallCheck","network","from","request","getRequest","call","staticNetwork","_defineProperty","_assertThisInitialized","_createClass","key","value","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","_perform2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","_yield$resolvePropert","trace","tx","data","wrap","_callee$","_context","prev","next","method","send","hash","getTransaction","sent","abrupt","result","output","action","reason","transaction","invocation","revert","stop","_perform","_x","apply","arguments","isCommunityResource","concat","allowGzip","retryFunc","_ref","_callee2","response","attempt","_callee2$","_context2","_x2","_x3","_x4"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\provider-alchemy.ts"],"sourcesContent":["/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport {\n    defineProperties, resolveProperties, assert, assertArgument,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n    readonly apiKey!: string;\n\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<AlchemyProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [ req.hash ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) { return null; }\n\n            let data: undefined | string;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            } catch (error) { }\n\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n\n        return await super._perform(req);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getRequest(network: Network, apiKey?: string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v2/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            }\n        }\n\n        return request;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}