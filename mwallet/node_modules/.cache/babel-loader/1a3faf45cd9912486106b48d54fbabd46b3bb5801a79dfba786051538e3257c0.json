{"ast":null,"code":"import _slicedToArray from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n *  About Abstract Signer and subclassing\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\nfunction checkProvider(signer, operation) {\n  if (signer.provider) {\n    return signer.provider;\n  }\n  assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n    operation: operation\n  });\n}\nfunction populate(_x, _x2) {\n  return _populate.apply(this, arguments);\n}\nfunction _populate() {\n  _populate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(signer, tx) {\n    var pop, from;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          pop = copyRequest(tx);\n          if (pop.to != null) {\n            pop.to = resolveAddress(pop.to, signer);\n          }\n          if (pop.from != null) {\n            from = pop.from;\n            pop.from = Promise.all([signer.getAddress(), resolveAddress(from, signer)]).then(function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                address = _ref2[0],\n                from = _ref2[1];\n              assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n              return address;\n            });\n          } else {\n            pop.from = signer.getAddress();\n          }\n          _context12.next = 5;\n          return resolveProperties(pop);\n        case 5:\n          return _context12.abrupt(\"return\", _context12.sent);\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return _populate.apply(this, arguments);\n}\nexport var AbstractSigner = /*#__PURE__*/function () {\n  function AbstractSigner(provider) {\n    _classCallCheck(this, AbstractSigner);\n    _defineProperty(this, \"provider\", void 0);\n    defineProperties(this, {\n      provider: provider || null\n    });\n  }\n  _createClass(AbstractSigner, [{\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blockTag) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = checkProvider(this, \"getTransactionCount\");\n              _context.next = 3;\n              return this.getAddress();\n            case 3:\n              _context.t1 = _context.sent;\n              _context.t2 = blockTag;\n              return _context.abrupt(\"return\", _context.t0.getTransactionCount.call(_context.t0, _context.t1, _context.t2));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getNonce(_x3) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n  }, {\n    key: \"populateCall\",\n    value: function () {\n      var _populateCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tx) {\n        var pop;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return populate(this, tx);\n            case 2:\n              pop = _context2.sent;\n              return _context2.abrupt(\"return\", pop);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function populateCall(_x4) {\n        return _populateCall.apply(this, arguments);\n      }\n      return populateCall;\n    }()\n  }, {\n    key: \"populateTransaction\",\n    value: function () {\n      var _populateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tx) {\n        var provider, pop, network, chainId, hasEip1559, feeData, _feeData, gasPrice;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              provider = checkProvider(this, \"populateTransaction\");\n              _context3.next = 3;\n              return populate(this, tx);\n            case 3:\n              pop = _context3.sent;\n              if (!(pop.nonce == null)) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 7;\n              return this.getNonce(\"pending\");\n            case 7:\n              pop.nonce = _context3.sent;\n            case 8:\n              if (!(pop.gasLimit == null)) {\n                _context3.next = 12;\n                break;\n              }\n              _context3.next = 11;\n              return this.estimateGas(pop);\n            case 11:\n              pop.gasLimit = _context3.sent;\n            case 12:\n              _context3.next = 14;\n              return this.provider.getNetwork();\n            case 14:\n              network = _context3.sent;\n              if (pop.chainId != null) {\n                chainId = getBigInt(pop.chainId);\n                assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n              } else {\n                pop.chainId = network.chainId;\n              }\n              // Do not allow mixing pre-eip-1559 and eip-1559 properties\n              hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n              if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n                assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n              } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n                assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n              }\n              if (!((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n                _context3.next = 22;\n                break;\n              }\n              // Fully-formed EIP-1559 transaction (skip getFeeData)\n              pop.type = 2;\n              _context3.next = 34;\n              break;\n            case 22:\n              if (!(pop.type === 0 || pop.type === 1)) {\n                _context3.next = 30;\n                break;\n              }\n              _context3.next = 25;\n              return provider.getFeeData();\n            case 25:\n              feeData = _context3.sent;\n              assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n              });\n              // Populate missing gasPrice\n              if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n              }\n              _context3.next = 34;\n              break;\n            case 30:\n              _context3.next = 32;\n              return provider.getFeeData();\n            case 32:\n              _feeData = _context3.sent;\n              if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (_feeData.maxFeePerGas != null && _feeData.maxPriorityFeePerGas != null) {\n                  // The network supports EIP-1559!\n                  // Upgrade transaction from null to eip-1559\n                  pop.type = 2;\n                  if (pop.gasPrice != null) {\n                    // Using legacy gasPrice property on an eip-1559 network,\n                    // so use gasPrice as both fee properties\n                    gasPrice = pop.gasPrice;\n                    delete pop.gasPrice;\n                    pop.maxFeePerGas = gasPrice;\n                    pop.maxPriorityFeePerGas = gasPrice;\n                  } else {\n                    // Populate missing fee data\n                    if (pop.maxFeePerGas == null) {\n                      pop.maxFeePerGas = _feeData.maxFeePerGas;\n                    }\n                    if (pop.maxPriorityFeePerGas == null) {\n                      pop.maxPriorityFeePerGas = _feeData.maxPriorityFeePerGas;\n                    }\n                  }\n                } else if (_feeData.gasPrice != null) {\n                  // Network doesn't support EIP-1559...\n                  // ...but they are trying to use EIP-1559 properties\n                  assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"populateTransaction\"\n                  });\n                  // Populate missing fee data\n                  if (pop.gasPrice == null) {\n                    pop.gasPrice = _feeData.gasPrice;\n                  }\n                  // Explicitly set untyped transaction to legacy\n                  // @TODO: Maybe this shold allow type 1?\n                  pop.type = 0;\n                } else {\n                  // getFeeData has failed us.\n                  assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"signer.getFeeData\"\n                  });\n                }\n              } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                  pop.maxFeePerGas = _feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                  pop.maxPriorityFeePerGas = _feeData.maxPriorityFeePerGas;\n                }\n              }\n            case 34:\n              _context3.next = 36;\n              return resolveProperties(pop);\n            case 36:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 37:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function populateTransaction(_x5) {\n        return _populateTransaction.apply(this, arguments);\n      }\n      return populateTransaction;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tx) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = checkProvider(this, \"estimateGas\");\n              _context4.next = 3;\n              return this.populateCall(tx);\n            case 3:\n              _context4.t1 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t0.estimateGas.call(_context4.t0, _context4.t1));\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function estimateGas(_x6) {\n        return _estimateGas.apply(this, arguments);\n      }\n      return estimateGas;\n    }()\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tx) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = checkProvider(this, \"call\");\n              _context5.next = 3;\n              return this.populateCall(tx);\n            case 3:\n              _context5.t1 = _context5.sent;\n              return _context5.abrupt(\"return\", _context5.t0.call.call(_context5.t0, _context5.t1));\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function call(_x7) {\n        return _call.apply(this, arguments);\n      }\n      return call;\n    }()\n  }, {\n    key: \"resolveName\",\n    value: function () {\n      var _resolveName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name) {\n        var provider;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              provider = checkProvider(this, \"resolveName\");\n              _context6.next = 3;\n              return provider.resolveName(name);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function resolveName(_x8) {\n        return _resolveName.apply(this, arguments);\n      }\n      return resolveName;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(tx) {\n        var provider, pop, txObj;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              provider = checkProvider(this, \"sendTransaction\");\n              _context7.next = 3;\n              return this.populateTransaction(tx);\n            case 3:\n              pop = _context7.sent;\n              delete pop.from;\n              txObj = Transaction.from(pop);\n              _context7.t0 = provider;\n              _context7.next = 9;\n              return this.signTransaction(txObj);\n            case 9:\n              _context7.t1 = _context7.sent;\n              _context7.next = 12;\n              return _context7.t0.broadcastTransaction.call(_context7.t0, _context7.t1);\n            case 12:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function sendTransaction(_x9) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n  }]);\n  return AbstractSigner;\n}();\nvar _throwUnsupported = /*#__PURE__*/new WeakSet();\nexport var VoidSigner = /*#__PURE__*/function (_AbstractSigner) {\n  _inherits(VoidSigner, _AbstractSigner);\n  var _super = _createSuper(VoidSigner);\n  function VoidSigner(address, provider) {\n    var _this;\n    _classCallCheck(this, VoidSigner);\n    _this = _super.call(this, provider);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _throwUnsupported);\n    _defineProperty(_assertThisInitialized(_this), \"address\", void 0);\n    defineProperties(_assertThisInitialized(_this), {\n      address: address\n    });\n    return _this;\n  }\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this.address);\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getAddress() {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }()\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(tx) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"transactions\", \"signTransaction\");\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function signTransaction(_x10) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(message) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"messages\", \"signMessage\");\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function signMessage(_x11) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }()\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(domain, types, value) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"typed-data\", \"signTypedData\");\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function signTypedData(_x12, _x13, _x14) {\n        return _signTypedData.apply(this, arguments);\n      }\n      return signTypedData;\n    }()\n  }]);\n  return VoidSigner;\n}(AbstractSigner);\nfunction _throwUnsupported2(suffix, operation) {\n  assert(false, \"VoidSigner cannot sign \".concat(suffix), \"UNSUPPORTED_OPERATION\", {\n    operation: operation\n  });\n}","map":{"version":3,"names":["resolveAddress","Transaction","defineProperties","getBigInt","resolveProperties","assert","assertArgument","copyRequest","checkProvider","signer","operation","provider","populate","_x","_x2","_populate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee12","tx","pop","from","wrap","_callee12$","_context12","prev","next","to","Promise","all","getAddress","then","_ref","_ref2","_slicedToArray","address","toLowerCase","abrupt","sent","stop","AbstractSigner","_classCallCheck","_defineProperty","_createClass","key","value","_getNonce","_callee","blockTag","_callee$","_context","t0","t1","t2","getTransactionCount","call","getNonce","_x3","_populateCall","_callee2","_callee2$","_context2","populateCall","_x4","_populateTransaction","_callee3","network","chainId","hasEip1559","feeData","_feeData","gasPrice","_callee3$","_context3","nonce","gasLimit","estimateGas","getNetwork","maxFeePerGas","maxPriorityFeePerGas","type","getFeeData","populateTransaction","_x5","_estimateGas","_callee4","_callee4$","_context4","_x6","_call","_callee5","_callee5$","_context5","_x7","_resolveName","_callee6","name","_callee6$","_context6","resolveName","_x8","_sendTransaction","_callee7","txObj","_callee7$","_context7","signTransaction","broadcastTransaction","sendTransaction","_x9","_throwUnsupported","WeakSet","VoidSigner","_AbstractSigner","_inherits","_super","_createSuper","_this","_classPrivateMethodInitSpec","_assertThisInitialized","_getAddress","_callee8","_callee8$","_context8","connect","_signTransaction","_callee9","_callee9$","_context9","_classPrivateMethodGet","_throwUnsupported2","_x10","_signMessage","_callee10","message","_callee10$","_context10","signMessage","_x11","_signTypedData","_callee11","domain","types","_callee11$","_context11","signTypedData","_x12","_x13","_x14","suffix","concat"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\abstract-signer.ts"],"sourcesContent":["/**\n *  About Abstract Signer and subclassing\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { copyRequest } from \"./provider.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\nfunction checkProvider(signer: AbstractSigner, operation: string): Provider {\n    if (signer.provider) { return signer.provider; }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\n\nasync function populate(signer: AbstractSigner, tx: TransactionRequest): Promise<TransactionLike<string>> {\n    let pop: any = copyRequest(tx);\n\n    if (pop.to != null) { pop.to = resolveAddress(pop.to, signer); }\n\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([ address, from ]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(),\n                \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n\n    return await resolveProperties(pop);\n}\n\n\nexport abstract class AbstractSigner<P extends null | Provider = null | Provider> implements Signer {\n    readonly provider!: P;\n\n    constructor(provider?: P) {\n        defineProperties<AbstractSigner>(this, { provider: (provider || null) });\n    }\n\n    abstract getAddress(): Promise<string>;\n    abstract connect(provider: null | Provider): Signer;\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n\n    async populateCall(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const provider = checkProvider(this, \"populateTransaction\");\n\n        const pop = await populate(this, tx);\n\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n\n        // Populate the chain ID\n        const network = await (<Provider>(this.provider)).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\" });\n\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) { pop.gasPrice = feeData.gasPrice; }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"populateTransaction\" });\n\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n\n               } else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\" });\n                }\n\n            } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n\n//@TOOD: Don't await all over the place; save them up for\n// the end for better batching\n        return await resolveProperties(pop);\n    }\n\n    async estimateGas(tx: TransactionRequest): Promise<bigint> {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n\n    async call(tx: TransactionRequest): Promise<string> {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n\n    async resolveName(name: string): Promise<null | string> {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const provider = checkProvider(this, \"sendTransaction\");\n\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n\n    abstract signTransaction(tx: TransactionRequest): Promise<string>;\n    abstract signMessage(message: string | Uint8Array): Promise<string>;\n    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport class VoidSigner extends AbstractSigner {\n    readonly address!: string;\n\n    constructor(address: string, provider?: null | Provider) {\n        super(provider);\n        defineProperties<VoidSigner>(this, { address });\n    }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n\n    #throwUnsupported(suffix: string, operation: string): never {\n        assert(false, `VoidSigner cannot sign ${ suffix }`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}