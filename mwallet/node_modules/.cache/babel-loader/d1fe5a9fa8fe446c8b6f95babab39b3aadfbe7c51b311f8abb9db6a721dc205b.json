{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport { isError } from \"../utils/index.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nfunction copy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _filterIdPromise = /*#__PURE__*/new WeakMap();\nvar _poller = /*#__PURE__*/new WeakMap();\nvar _running = /*#__PURE__*/new WeakMap();\nvar _network = /*#__PURE__*/new WeakMap();\nvar _hault = /*#__PURE__*/new WeakMap();\nvar _poll = /*#__PURE__*/new WeakSet();\nvar _teardown = /*#__PURE__*/new WeakSet();\nexport var FilterIdSubscriber = /*#__PURE__*/function () {\n  function FilterIdSubscriber(provider) {\n    _classCallCheck(this, FilterIdSubscriber);\n    _classPrivateMethodInitSpec(this, _teardown);\n    _classPrivateMethodInitSpec(this, _poll);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filterIdPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poller, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _running, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _network, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _hault, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _filterIdPromise, null);\n    _classPrivateFieldSet(this, _poller, _classPrivateMethodGet(this, _poll, _poll2).bind(this));\n    _classPrivateFieldSet(this, _running, false);\n    _classPrivateFieldSet(this, _network, null);\n    _classPrivateFieldSet(this, _hault, false);\n  }\n  _createClass(FilterIdSubscriber, [{\n    key: \"_subscribe\",\n    value: function _subscribe(provider) {\n      throw new Error(\"subclasses must override this\");\n    }\n  }, {\n    key: \"_emitResults\",\n    value: function _emitResults(provider, result) {\n      throw new Error(\"subclasses must override this\");\n    }\n  }, {\n    key: \"_recover\",\n    value: function _recover(provider) {\n      throw new Error(\"subclasses must override this\");\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (_classPrivateFieldGet(this, _running)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running, true);\n      _classPrivateMethodGet(this, _poll, _poll2).call(this, -2);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!_classPrivateFieldGet(this, _running)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running, false);\n      _classPrivateFieldSet(this, _hault, true);\n      _classPrivateMethodGet(this, _teardown, _teardown2).call(this);\n      _classPrivateFieldGet(this, _provider).off(\"block\", _classPrivateFieldGet(this, _poller));\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {\n      if (dropWhilePaused) {\n        _classPrivateMethodGet(this, _teardown, _teardown2).call(this);\n      }\n      _classPrivateFieldGet(this, _provider).off(\"block\", _classPrivateFieldGet(this, _poller));\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.start();\n    }\n  }]);\n  return FilterIdSubscriber;\n}();\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nfunction _poll2(_x7) {\n  return _poll3.apply(this, arguments);\n}\nfunction _poll3() {\n  _poll3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(blockNumber) {\n    var filterId, network, result;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          // Subscribe if necessary\n          if (_classPrivateFieldGet(this, _filterIdPromise) == null) {\n            _classPrivateFieldSet(this, _filterIdPromise, this._subscribe(_classPrivateFieldGet(this, _provider)));\n          }\n          // Get the Filter ID\n          filterId = null;\n          _context5.prev = 3;\n          _context5.next = 6;\n          return _classPrivateFieldGet(this, _filterIdPromise);\n        case 6:\n          filterId = _context5.sent;\n          _context5.next = 13;\n          break;\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](3);\n          if (!(!isError(_context5.t0, \"UNSUPPORTED_OPERATION\") || _context5.t0.operation !== \"eth_newFilter\")) {\n            _context5.next = 13;\n            break;\n          }\n          throw _context5.t0;\n        case 13:\n          if (!(filterId == null)) {\n            _context5.next = 17;\n            break;\n          }\n          _classPrivateFieldSet(this, _filterIdPromise, null);\n          _classPrivateFieldGet(this, _provider)._recoverSubscriber(this, this._recover(_classPrivateFieldGet(this, _provider)));\n          return _context5.abrupt(\"return\");\n        case 17:\n          _context5.next = 19;\n          return _classPrivateFieldGet(this, _provider).getNetwork();\n        case 19:\n          network = _context5.sent;\n          if (!_classPrivateFieldGet(this, _network)) {\n            _classPrivateFieldSet(this, _network, network);\n          }\n          if (!(_classPrivateFieldGet(this, _network).chainId !== network.chainId)) {\n            _context5.next = 23;\n            break;\n          }\n          throw new Error(\"chaid changed\");\n        case 23:\n          if (!_classPrivateFieldGet(this, _hault)) {\n            _context5.next = 25;\n            break;\n          }\n          return _context5.abrupt(\"return\");\n        case 25:\n          _context5.next = 27;\n          return _classPrivateFieldGet(this, _provider).send(\"eth_getFilterChanges\", [filterId]);\n        case 27:\n          result = _context5.sent;\n          _context5.next = 30;\n          return this._emitResults(_classPrivateFieldGet(this, _provider), result);\n        case 30:\n          _context5.next = 35;\n          break;\n        case 32:\n          _context5.prev = 32;\n          _context5.t1 = _context5[\"catch\"](0);\n          console.log(\"@TODO\", _context5.t1);\n        case 35:\n          _classPrivateFieldGet(this, _provider).once(\"block\", _classPrivateFieldGet(this, _poller));\n        case 36:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, this, [[0, 32], [3, 9]]);\n  }));\n  return _poll3.apply(this, arguments);\n}\nfunction _teardown2() {\n  var _this2 = this;\n  var filterIdPromise = _classPrivateFieldGet(this, _filterIdPromise);\n  if (filterIdPromise) {\n    _classPrivateFieldSet(this, _filterIdPromise, null);\n    filterIdPromise.then(function (filterId) {\n      _classPrivateFieldGet(_this2, _provider).send(\"eth_uninstallFilter\", [filterId]);\n    });\n  }\n}\nvar _event = /*#__PURE__*/new WeakMap();\nexport var FilterIdEventSubscriber = /*#__PURE__*/function (_FilterIdSubscriber) {\n  _inherits(FilterIdEventSubscriber, _FilterIdSubscriber);\n  var _super = _createSuper(FilterIdEventSubscriber);\n  function FilterIdEventSubscriber(provider, filter) {\n    var _this;\n    _classCallCheck(this, FilterIdEventSubscriber);\n    _this = _super.call(this, provider);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _event, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _event, copy(filter));\n    return _this;\n  }\n  _createClass(FilterIdEventSubscriber, [{\n    key: \"_recover\",\n    value: function _recover(provider) {\n      return new PollingEventSubscriber(provider, _classPrivateFieldGet(this, _event));\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider) {\n        var filterId;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return provider.send(\"eth_newFilter\", [_classPrivateFieldGet(this, _event)]);\n            case 2:\n              filterId = _context.sent;\n              return _context.abrupt(\"return\", filterId);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _subscribe(_x) {\n        return _subscribe2.apply(this, arguments);\n      }\n      return _subscribe;\n    }()\n  }, {\n    key: \"_emitResults\",\n    value: function () {\n      var _emitResults2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, results) {\n        var _iterator, _step, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(results);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  result = _step.value;\n                  provider.emit(_classPrivateFieldGet(this, _event), provider._wrapLog(result, provider._network));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _emitResults(_x2, _x3) {\n        return _emitResults2.apply(this, arguments);\n      }\n      return _emitResults;\n    }()\n  }]);\n  return FilterIdEventSubscriber;\n}(FilterIdSubscriber);\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport var FilterIdPendingSubscriber = /*#__PURE__*/function (_FilterIdSubscriber2) {\n  _inherits(FilterIdPendingSubscriber, _FilterIdSubscriber2);\n  var _super2 = _createSuper(FilterIdPendingSubscriber);\n  function FilterIdPendingSubscriber() {\n    _classCallCheck(this, FilterIdPendingSubscriber);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(FilterIdPendingSubscriber, [{\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(provider) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return provider.send(\"eth_newPendingTransactionFilter\", []);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function _subscribe(_x4) {\n        return _subscribe3.apply(this, arguments);\n      }\n      return _subscribe;\n    }()\n  }, {\n    key: \"_emitResults\",\n    value: function () {\n      var _emitResults3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(provider, results) {\n        var _iterator2, _step2, result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(results);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  result = _step2.value;\n                  provider.emit(\"pending\", result);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function _emitResults(_x5, _x6) {\n        return _emitResults3.apply(this, arguments);\n      }\n      return _emitResults;\n    }()\n  }]);\n  return FilterIdPendingSubscriber;\n}(FilterIdSubscriber);","map":{"version":3,"names":["isError","PollingEventSubscriber","copy","obj","JSON","parse","stringify","_provider","WeakMap","_filterIdPromise","_poller","_running","_network","_hault","_poll","WeakSet","_teardown","FilterIdSubscriber","provider","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","_classPrivateMethodGet","_poll2","bind","_createClass","key","_subscribe","Error","_emitResults","result","_recover","start","_classPrivateFieldGet","call","stop","_teardown2","off","pause","dropWhilePaused","resume","_x7","_poll3","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","blockNumber","filterId","network","wrap","_callee5$","_context5","prev","next","sent","t0","operation","_recoverSubscriber","abrupt","getNetwork","chainId","send","t1","console","log","once","_this2","filterIdPromise","then","_event","FilterIdEventSubscriber","_FilterIdSubscriber","_inherits","_super","_createSuper","filter","_this","_assertThisInitialized","_subscribe2","_callee","_callee$","_context","_x","_emitResults2","_callee2","results","_iterator","_step","_callee2$","_context2","_createForOfIteratorHelper","s","n","done","emit","_wrapLog","err","e","f","_x2","_x3","FilterIdPendingSubscriber","_FilterIdSubscriber2","_super2","_subscribe3","_callee3","_callee3$","_context3","_x4","_emitResults3","_callee4","_iterator2","_step2","_callee4$","_context4","_x5","_x6"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\subscriber-filterid.ts"],"sourcesContent":["import { isError } from \"../utils/index.js\";\n\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { Network } from \"./network.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdSubscriber implements Subscriber {\n    #provider: JsonRpcApiProvider;\n\n    #filterIdPromise: null | Promise<string>;\n    #poller: (b: number) => Promise<void>;\n\n    #running: boolean;\n\n    #network: null | Network;\n\n    #hault: boolean;\n\n    constructor(provider: JsonRpcApiProvider) {\n        this.#provider = provider;\n\n        this.#filterIdPromise = null;\n        this.#poller = this.#poll.bind(this);\n\n        this.#running = false;\n\n        this.#network = null;\n\n        this.#hault = false;\n    }\n\n    _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    _emitResults(provider: AbstractProvider, result: Array<any>): Promise<void> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    _recover(provider: AbstractProvider): Subscriber {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        try {\n            // Subscribe if necessary\n            if (this.#filterIdPromise == null) {\n                this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n\n            // Get the Filter ID\n            let filterId: null | string = null;\n            try {\n                filterId = await this.#filterIdPromise;\n            } catch (error) {\n                if (!isError(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                    throw error;\n                }\n            }\n\n            // The backend does not support Filter ID; downgrade to\n            // polling\n            if (filterId == null) {\n                this.#filterIdPromise = null;\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n                return;\n            }\n\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) { this.#network = network; }\n\n            if ((this.#network as Network).chainId !== network.chainId) {\n                throw new Error(\"chaid changed\");\n            }\n\n            if (this.#hault) { return; }\n\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [ filterId ]);\n            await this._emitResults(this.#provider, result);\n        } catch (error) { console.log(\"@TODO\", error); }\n\n        this.#provider.once(\"block\", this.#poller);\n    }\n\n    #teardown(): void {\n        const filterIdPromise = this.#filterIdPromise;\n        if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId) => {\n                this.#provider.send(\"eth_uninstallFilter\", [ filterId ]);\n            });\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#hault = true;\n        this.#teardown();\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        if (dropWhilePaused){ this.#teardown(); }\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    resume(): void { this.start(); }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdEventSubscriber extends FilterIdSubscriber {\n    #event: EventFilter;\n\n    constructor(provider: JsonRpcApiProvider, filter: EventFilter) {\n        super(provider);\n        this.#event = copy(filter);\n    }\n\n    _recover(provider: AbstractProvider): Subscriber {\n        return new PollingEventSubscriber(provider, this.#event);\n    }\n\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        const filterId = await provider.send(\"eth_newFilter\", [ this.#event ]);\n        return filterId;\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n        }\n    }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        return await provider.send(\"eth_newPendingTransactionFilter\", [ ]);\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(\"pending\", result);\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,mBAAmB;AAE3C,SAASC,sBAAsB,QAAQ,yBAAyB;AAOhE,SAASC,IAAIA,CAACC,GAAQ;EAClB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,GAAG,CAAC,CAAC;AAC1C;AAEA;;;;;;;;;;AAAA,IAAAI,SAAA,oBAAAC,OAAA;AAAA,IAAAC,gBAAA,oBAAAD,OAAA;AAAA,IAAAE,OAAA,oBAAAF,OAAA;AAAA,IAAAG,QAAA,oBAAAH,OAAA;AAAA,IAAAI,QAAA,oBAAAJ,OAAA;AAAA,IAAAK,MAAA,oBAAAL,OAAA;AAAA,IAAAM,KAAA,oBAAAC,OAAA;AAAA,IAAAC,SAAA,oBAAAD,OAAA;AAUA,WAAaE,kBAAkB;EAY3B,SAAAA,mBAAYC,QAA4B;IAAAC,eAAA,OAAAF,kBAAA;IAAAG,2BAAA,OAAAJ,SAAA;IAAAI,2BAAA,OAAAN,KAAA;IAAAO,0BAAA,OAAAd,SAAA;MAAAe,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAZ,gBAAA;MAAAa,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAX,OAAA;MAAAY,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAV,QAAA;MAAAW,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAT,QAAA;MAAAU,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAR,MAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IACpCC,qBAAA,KAAI,EAAAjB,SAAA,EAAaW,QAAQ;IAEzBM,qBAAA,KAAI,EAAAf,gBAAA,EAAoB,IAAI;IAC5Be,qBAAA,KAAI,EAAAd,OAAA,EAAWe,sBAAA,KAAI,EAAAX,KAAA,EAAAY,MAAA,EAAOC,IAAI,CAAC,IAAI,CAAC;IAEpCH,qBAAA,KAAI,EAAAb,QAAA,EAAY,KAAK;IAErBa,qBAAA,KAAI,EAAAZ,QAAA,EAAY,IAAI;IAEpBY,qBAAA,KAAI,EAAAX,MAAA,EAAU,KAAK;EACvB;EAACe,YAAA,CAAAX,kBAAA;IAAAY,GAAA;IAAAN,KAAA,EAED,SAAAO,WAAWZ,QAA4B;MACnC,MAAM,IAAIa,KAAK,CAAC,+BAA+B,CAAC;IACpD;EAAC;IAAAF,GAAA;IAAAN,KAAA,EAED,SAAAS,aAAad,QAA0B,EAAEe,MAAkB;MACvD,MAAM,IAAIF,KAAK,CAAC,+BAA+B,CAAC;IACpD;EAAC;IAAAF,GAAA;IAAAN,KAAA,EAED,SAAAW,SAAShB,QAA0B;MAC/B,MAAM,IAAIa,KAAK,CAAC,+BAA+B,CAAC;IACpD;EAAC;IAAAF,GAAA;IAAAN,KAAA,EAqDD,SAAAY,MAAA,EAAK;MACD,IAAAC,qBAAA,CAAI,IAAI,EAAAzB,QAAA,GAAW;QAAE;;MACrBa,qBAAA,KAAI,EAAAb,QAAA,EAAY,IAAI;MAEpBc,sBAAA,KAAI,EAAAX,KAAA,EAAAY,MAAA,EAAAW,IAAA,CAAJ,IAAI,EAAO,CAAC,CAAC;IACjB;EAAC;IAAAR,GAAA;IAAAN,KAAA,EAED,SAAAe,KAAA,EAAI;MACA,IAAI,CAAAF,qBAAA,CAAC,IAAI,EAAAzB,QAAA,CAAS,EAAE;QAAE;;MACtBa,qBAAA,KAAI,EAAAb,QAAA,EAAY,KAAK;MAErBa,qBAAA,KAAI,EAAAX,MAAA,EAAU,IAAI;MAClBY,sBAAA,KAAI,EAAAT,SAAA,EAAAuB,UAAA,EAAAF,IAAA,CAAJ,IAAI;MACJD,qBAAA,KAAI,EAAA7B,SAAA,EAAWiC,GAAG,CAAC,OAAO,EAAAJ,qBAAA,CAAE,IAAI,EAAA1B,OAAA,EAAS;IAC7C;EAAC;IAAAmB,GAAA;IAAAN,KAAA,EAED,SAAAkB,MAAMC,eAAyB;MAC3B,IAAIA,eAAe,EAAC;QAAEjB,sBAAA,KAAI,EAAAT,SAAA,EAAAuB,UAAA,EAAAF,IAAA,CAAJ,IAAI;;MAC1BD,qBAAA,KAAI,EAAA7B,SAAA,EAAWiC,GAAG,CAAC,OAAO,EAAAJ,qBAAA,CAAE,IAAI,EAAA1B,OAAA,EAAS;IAC7C;EAAC;IAAAmB,GAAA;IAAAN,KAAA,EAED,SAAAoB,OAAA,EAAM;MAAW,IAAI,CAACR,KAAK,EAAE;IAAE;EAAC;EAAA,OAAAlB,kBAAA;AAAA;AAGpC;;;;;AAAA,SAAAS,OAAAkB,GAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,SA3EgBC,WAAmB;IAAA,IAAAC,QAAA,EAAAC,OAAA,EAAArB,MAAA;IAAA,OAAAgB,mBAAA,GAAAM,IAAA,UAAAC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAC,IAAA,GAAAD,SAAA,CAAAE,IAAA;QAAA;UAAAF,SAAA,CAAAC,IAAA;UAEvB;UACA,IAAItB,qBAAA,KAAI,EAAA3B,gBAAA,KAAqB,IAAI,EAAE;YAC/Be,qBAAA,KAAI,EAAAf,gBAAA,EAAoB,IAAI,CAACqB,UAAU,CAAAM,qBAAA,CAAC,IAAI,EAAA7B,SAAA,EAAW;;UAG3D;UACI8C,QAAQ,GAAkB,IAAI;UAAAI,SAAA,CAAAC,IAAA;UAAAD,SAAA,CAAAE,IAAA;UAAA,OAAAvB,qBAAA,CAEb,IAAI,EAAA3B,gBAAA;QAAA;UAArB4C,QAAQ,GAAAI,SAAA,CAAAG,IAAA;UAAAH,SAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,SAAA,CAAAC,IAAA;UAAAD,SAAA,CAAAI,EAAA,GAAAJ,SAAA;UAAA,MAEJ,CAACzD,OAAO,CAAAyD,SAAA,CAAAI,EAAA,EAAQ,uBAAuB,CAAC,IAAIJ,SAAA,CAAAI,EAAA,CAAMC,SAAS,KAAK,eAAe;YAAAL,SAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAAAF,SAAA,CAAAI,EAAA;QAAA;UAAA,MAOnFR,QAAQ,IAAI,IAAI;YAAAI,SAAA,CAAAE,IAAA;YAAA;UAAA;UAChBnC,qBAAA,KAAI,EAAAf,gBAAA,EAAoB,IAAI;UAC5B2B,qBAAA,KAAI,EAAA7B,SAAA,EAAWwD,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC7B,QAAQ,CAAAE,qBAAA,CAAC,IAAI,EAAA7B,SAAA,EAAW,CAAC;UAAC,OAAAkD,SAAA,CAAAO,MAAA;QAAA;UAAAP,SAAA,CAAAE,IAAA;UAAA,OAIrDvB,qBAAA,KAAI,EAAA7B,SAAA,EAAW0D,UAAU,EAAE;QAAA;UAA3CX,OAAO,GAAAG,SAAA,CAAAG,IAAA;UACb,IAAI,CAAAxB,qBAAA,CAAC,IAAI,EAAAxB,QAAA,CAAS,EAAE;YAAEY,qBAAA,KAAI,EAAAZ,QAAA,EAAY0C,OAAO;;UAAG,MAE3ClB,qBAAA,KAAI,EAAAxB,QAAA,EAAsBsD,OAAO,KAAKZ,OAAO,CAACY,OAAO;YAAAT,SAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAChD,IAAI5B,KAAK,CAAC,eAAe,CAAC;QAAA;UAAA,KAAAK,qBAAA,CAGhC,IAAI,EAAAvB,MAAA;YAAA4C,SAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,SAAA,CAAAO,MAAA;QAAA;UAAAP,SAAA,CAAAE,IAAA;UAAA,OAEavB,qBAAA,KAAI,EAAA7B,SAAA,EAAW4D,IAAI,CAAC,sBAAsB,EAAE,CAAEd,QAAQ,CAAE,CAAC;QAAA;UAAxEpB,MAAM,GAAAwB,SAAA,CAAAG,IAAA;UAAAH,SAAA,CAAAE,IAAA;UAAA,OACN,IAAI,CAAC3B,YAAY,CAAAI,qBAAA,CAAC,IAAI,EAAA7B,SAAA,GAAY0B,MAAM,CAAC;QAAA;UAAAwB,SAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,SAAA,CAAAC,IAAA;UAAAD,SAAA,CAAAW,EAAA,GAAAX,SAAA;UACjCY,OAAO,CAACC,GAAG,CAAC,OAAO,EAAAb,SAAA,CAAAW,EAAA,CAAQ;QAAC;UAE9ChC,qBAAA,KAAI,EAAA7B,SAAA,EAAWgE,IAAI,CAAC,OAAO,EAAAnC,qBAAA,CAAE,IAAI,EAAA1B,OAAA,EAAS;QAAC;QAAA;UAAA,OAAA+C,SAAA,CAAAnB,IAAA;MAAA;IAAA,GAAAa,QAAA;EAAA;EAAA,OAAAN,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAR,WAAA,EAGtC;EAAA,IAAAiC,MAAA;EACL,IAAMC,eAAe,GAAArC,qBAAA,CAAG,IAAI,EAAA3B,gBAAA,CAAiB;EAC7C,IAAIgE,eAAe,EAAE;IACjBjD,qBAAA,KAAI,EAAAf,gBAAA,EAAoB,IAAI;IAC5BgE,eAAe,CAACC,IAAI,CAAC,UAACrB,QAAQ,EAAI;MAC9BjB,qBAAA,CAAAoC,MAAI,EAAAjE,SAAA,EAAW4D,IAAI,CAAC,qBAAqB,EAAE,CAAEd,QAAQ,CAAE,CAAC;IAC5D,CAAC,CAAC;;AAEV;AAAC,IAAAsB,MAAA,oBAAAnE,OAAA;AA+BL,WAAaoE,uBAAwB,0BAAAC,mBAAA;EAAAC,SAAA,CAAAF,uBAAA,EAAAC,mBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,uBAAA;EAGjC,SAAAA,wBAAY1D,QAA4B,EAAE+D,MAAmB;IAAA,IAAAC,KAAA;IAAA/D,eAAA,OAAAyD,uBAAA;IACzDM,KAAA,GAAAH,MAAA,CAAA1C,IAAA,OAAMnB,QAAQ;IAAEG,0BAAA,CAAA8D,sBAAA,CAAAD,KAAA,GAAAP,MAAA;MAAArD,QAAA;MAAAC,KAAA;IAAA;IAChBC,qBAAA,CAAA2D,sBAAA,CAAAD,KAAA,GAAAP,MAAA,EAAczE,IAAI,CAAC+E,MAAM,CAAC;IAAC,OAAAC,KAAA;EAC/B;EAACtD,YAAA,CAAAgD,uBAAA;IAAA/C,GAAA;IAAAN,KAAA,EAED,SAAAW,SAAShB,QAA0B;MAC/B,OAAO,IAAIjB,sBAAsB,CAACiB,QAAQ,EAAAkB,qBAAA,CAAE,IAAI,EAAAuC,MAAA,EAAQ;IAC5D;EAAC;IAAA9C,GAAA;IAAAN,KAAA;MAAA,IAAA6D,WAAA,GAAApC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAmC,QAAiBnE,QAA4B;QAAA,IAAAmC,QAAA;QAAA,OAAAJ,mBAAA,GAAAM,IAAA,UAAA+B,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAA7B,IAAA,GAAA6B,QAAA,CAAA5B,IAAA;YAAA;cAAA4B,QAAA,CAAA5B,IAAA;cAAA,OAClBzC,QAAQ,CAACiD,IAAI,CAAC,eAAe,EAAE,CAAA/B,qBAAA,CAAE,IAAI,EAAAuC,MAAA,EAAS,CAAC;YAAA;cAAhEtB,QAAQ,GAAAkC,QAAA,CAAA3B,IAAA;cAAA,OAAA2B,QAAA,CAAAvB,MAAA,WACPX,QAAQ;YAAA;YAAA;cAAA,OAAAkC,QAAA,CAAAjD,IAAA;UAAA;QAAA,GAAA+C,OAAA;MAAA,CAClB;MAAA,SAAAvD,WAAA0D,EAAA;QAAA,OAAAJ,WAAA,CAAAtC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAjB,UAAA;IAAA;EAAA;IAAAD,GAAA;IAAAN,KAAA;MAAA,IAAAkE,aAAA,GAAAzC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAwC,SAAmBxE,QAA4B,EAAEyE,OAAmB;QAAA,IAAAC,SAAA,EAAAC,KAAA,EAAA5D,MAAA;QAAA,OAAAgB,mBAAA,GAAAM,IAAA,UAAAuC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;YAAA;cAAAiC,SAAA,GAAAI,0BAAA,CAC3CL,OAAO;cAAA;gBAA5B,KAAAC,SAAA,CAAAK,CAAA,MAAAJ,KAAA,GAAAD,SAAA,CAAAM,CAAA,IAAAC,IAAA,GAA8B;kBAAnBlE,MAAM,GAAA4D,KAAA,CAAAtE,KAAA;kBACbL,QAAQ,CAACkF,IAAI,CAAAhE,qBAAA,CAAC,IAAI,EAAAuC,MAAA,GAASzD,QAAQ,CAACmF,QAAQ,CAACpE,MAAM,EAAEf,QAAQ,CAACN,QAAQ,CAAC,CAAC;;cAC3E,SAAA0F,GAAA;gBAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;cAAA;gBAAAV,SAAA,CAAAY,CAAA;cAAA;YAAA;YAAA;cAAA,OAAAT,SAAA,CAAAzD,IAAA;UAAA;QAAA,GAAAoD,QAAA;MAAA,CACJ;MAAA,SAAA1D,aAAAyE,GAAA,EAAAC,GAAA;QAAA,OAAAjB,aAAA,CAAA3C,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAf,YAAA;IAAA;EAAA;EAAA,OAAA4C,uBAAA;AAAA,EArBwC3D,kBAAkB;AAwB/D;;;;;AAKA,WAAa0F,yBAA0B,0BAAAC,oBAAA;EAAA9B,SAAA,CAAA6B,yBAAA,EAAAC,oBAAA;EAAA,IAAAC,OAAA,GAAA7B,YAAA,CAAA2B,yBAAA;EAAA,SAAAA,0BAAA;IAAAxF,eAAA,OAAAwF,yBAAA;IAAA,OAAAE,OAAA,CAAA/D,KAAA,OAAAC,SAAA;EAAA;EAAAnB,YAAA,CAAA+E,yBAAA;IAAA9E,GAAA;IAAAN,KAAA;MAAA,IAAAuF,WAAA,GAAA9D,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CACnC,SAAA6D,SAAiB7F,QAA4B;QAAA,OAAA+B,mBAAA,GAAAM,IAAA,UAAAyD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAvD,IAAA,GAAAuD,SAAA,CAAAtD,IAAA;YAAA;cAAAsD,SAAA,CAAAtD,IAAA;cAAA,OAC5BzC,QAAQ,CAACiD,IAAI,CAAC,iCAAiC,EAAE,EAAG,CAAC;YAAA;cAAA,OAAA8C,SAAA,CAAAjD,MAAA,WAAAiD,SAAA,CAAArD,IAAA;YAAA;YAAA;cAAA,OAAAqD,SAAA,CAAA3E,IAAA;UAAA;QAAA,GAAAyE,QAAA;MAAA,CACrE;MAAA,SAAAjF,WAAAoF,GAAA;QAAA,OAAAJ,WAAA,CAAAhE,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAjB,UAAA;IAAA;EAAA;IAAAD,GAAA;IAAAN,KAAA;MAAA,IAAA4F,aAAA,GAAAnE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAkE,SAAmBlG,QAA4B,EAAEyE,OAAmB;QAAA,IAAA0B,UAAA,EAAAC,MAAA,EAAArF,MAAA;QAAA,OAAAgB,mBAAA,GAAAM,IAAA,UAAAgE,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA9D,IAAA,GAAA8D,SAAA,CAAA7D,IAAA;YAAA;cAAA0D,UAAA,GAAArB,0BAAA,CAC3CL,OAAO;cAAA;gBAA5B,KAAA0B,UAAA,CAAApB,CAAA,MAAAqB,MAAA,GAAAD,UAAA,CAAAnB,CAAA,IAAAC,IAAA,GAA8B;kBAAnBlE,MAAM,GAAAqF,MAAA,CAAA/F,KAAA;kBACbL,QAAQ,CAACkF,IAAI,CAAC,SAAS,EAAEnE,MAAM,CAAC;;cACnC,SAAAqE,GAAA;gBAAAe,UAAA,CAAAd,CAAA,CAAAD,GAAA;cAAA;gBAAAe,UAAA,CAAAb,CAAA;cAAA;YAAA;YAAA;cAAA,OAAAgB,SAAA,CAAAlF,IAAA;UAAA;QAAA,GAAA8E,QAAA;MAAA,CACJ;MAAA,SAAApF,aAAAyF,GAAA,EAAAC,GAAA;QAAA,OAAAP,aAAA,CAAArE,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAf,YAAA;IAAA;EAAA;EAAA,OAAA2E,yBAAA;AAAA,EAT0C1F,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}