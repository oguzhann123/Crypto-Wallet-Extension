{"ast":null,"code":"import _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nvar _Symbol$for;\nimport { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nvar BN_0 = BigInt(0);\nvar BN_1 = BigInt(1);\nvar BN_2 = BigInt(2);\nvar BN_27 = BigInt(27);\nvar BN_28 = BigInt(28);\nvar BN_35 = BigInt(35);\nvar _guard = {};\nfunction toUint256(value) {\n  return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nvar _r2 = /*#__PURE__*/new WeakMap();\nvar _s = /*#__PURE__*/new WeakMap();\nvar _v2 = /*#__PURE__*/new WeakMap();\nvar _networkV = /*#__PURE__*/new WeakMap();\n_Symbol$for = Symbol.for('nodejs.util.inspect.custom');\nexport var Signature = /*#__PURE__*/function () {\n  /**\n   *  @private\n   */\n  function Signature(guard, r, s, v) {\n    _classCallCheck(this, Signature);\n    _classPrivateFieldInitSpec(this, _r2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _s, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _v2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _networkV, {\n      writable: true,\n      value: void 0\n    });\n    assertPrivate(guard, _guard, \"Signature\");\n    _classPrivateFieldSet(this, _r2, r);\n    _classPrivateFieldSet(this, _s, s);\n    _classPrivateFieldSet(this, _v2, v);\n    _classPrivateFieldSet(this, _networkV, null);\n  }\n  _createClass(Signature, [{\n    key: \"r\",\n    get:\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    function get() {\n      return _classPrivateFieldGet(this, _r2);\n    },\n    set: function set(value) {\n      assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n      _classPrivateFieldSet(this, _r2, hexlify(value));\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */\n  }, {\n    key: \"s\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _s);\n    },\n    set: function set(_value) {\n      assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n      var value = hexlify(_value);\n      assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n      _classPrivateFieldSet(this, _s, value);\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n  }, {\n    key: \"v\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _v2);\n    },\n    set: function set(value) {\n      var v = getNumber(value, \"value\");\n      assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n      _classPrivateFieldSet(this, _v2, v);\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n  }, {\n    key: \"networkV\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _networkV);\n    }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n  }, {\n    key: \"legacyChainId\",\n    get: function get() {\n      var v = this.networkV;\n      if (v == null) {\n        return null;\n      }\n      return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n  }, {\n    key: \"yParity\",\n    get: function get() {\n      return this.v === 27 ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n  }, {\n    key: \"yParityAndS\",\n    get: function get() {\n      // The EIP-2098 compact representation\n      var yParityAndS = getBytes(this.s);\n      if (this.yParity) {\n        yParityAndS[0] |= 0x80;\n      }\n      return hexlify(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n  }, {\n    key: \"compactSerialized\",\n    get: function get() {\n      return concat([this.r, this.yParityAndS]);\n    }\n    /**\n     *  The serialized representation.\n     */\n  }, {\n    key: \"serialized\",\n    get: function get() {\n      return concat([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return \"Signature { r: \\\"\".concat(this.r, \"\\\", s: \\\"\").concat(this.s, \"\\\", yParity: \").concat(this.yParity, \", networkV: \").concat(this.networkV, \" }\");\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Signature(_guard, this.r, this.s, this.v);\n      if (this.networkV) {\n        _classPrivateFieldSet(clone, _networkV, this.networkV);\n      }\n      return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var networkV = this.networkV;\n      return {\n        _type: \"signature\",\n        networkV: networkV != null ? networkV.toString() : null,\n        r: this.r,\n        s: this.s,\n        v: this.v\n      };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n  }], [{\n    key: \"getChainId\",\n    value: function getChainId(v) {\n      var bv = getBigInt(v, \"v\");\n      // The v is not an EIP-155 v, so it is the unspecified chain ID\n      if (bv == BN_27 || bv == BN_28) {\n        return BN_0;\n      }\n      // Bad value for an EIP-155 v\n      assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n      return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n  }, {\n    key: \"getChainIdV\",\n    value: function getChainIdV(chainId, v) {\n      return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n  }, {\n    key: \"getNormalizedV\",\n    value: function getNormalizedV(v) {\n      var bv = getBigInt(v);\n      if (bv === BN_0 || bv === BN_27) {\n        return 27;\n      }\n      if (bv === BN_1 || bv === BN_28) {\n        return 28;\n      }\n      assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n      // Otherwise, EIP-155 v means odd is 27 and even is 28\n      return bv & BN_1 ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n  }, {\n    key: \"from\",\n    value: function from(sig) {\n      function assertError(check, message) {\n        assertArgument(check, message, \"signature\", sig);\n      }\n      ;\n      if (sig == null) {\n        return new Signature(_guard, ZeroHash, ZeroHash, 27);\n      }\n      if (typeof sig === \"string\") {\n        var bytes = getBytes(sig, \"signature\");\n        if (bytes.length === 64) {\n          var _r3 = hexlify(bytes.slice(0, 32));\n          var _s2 = bytes.slice(32, 64);\n          var _v3 = _s2[0] & 0x80 ? 28 : 27;\n          _s2[0] &= 0x7f;\n          return new Signature(_guard, _r3, hexlify(_s2), _v3);\n        }\n        if (bytes.length === 65) {\n          var _r4 = hexlify(bytes.slice(0, 32));\n          var _s3 = bytes.slice(32, 64);\n          assertError((_s3[0] & 0x80) === 0, \"non-canonical s\");\n          var _v4 = Signature.getNormalizedV(bytes[64]);\n          return new Signature(_guard, _r4, hexlify(_s3), _v4);\n        }\n        assertError(false, \"invalid raw signature length\");\n      }\n      if (sig instanceof Signature) {\n        return sig.clone();\n      }\n      // Get r\n      var _r = sig.r;\n      assertError(_r != null, \"missing r\");\n      var r = toUint256(_r);\n      // Get s; by any means necessary (we check consistency below)\n      var s = function (s, yParityAndS) {\n        if (s != null) {\n          return toUint256(s);\n        }\n        if (yParityAndS != null) {\n          assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n          var _bytes = getBytes(yParityAndS);\n          _bytes[0] &= 0x7f;\n          return hexlify(_bytes);\n        }\n        assertError(false, \"missing s\");\n      }(sig.s, sig.yParityAndS);\n      assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n      // Get v; by any means necessary (we check consistency below)\n      var _ref = function (_v, yParityAndS, yParity) {\n          if (_v != null) {\n            var _v5 = getBigInt(_v);\n            return {\n              networkV: _v5 >= BN_35 ? _v5 : undefined,\n              v: Signature.getNormalizedV(_v5)\n            };\n          }\n          if (yParityAndS != null) {\n            assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n            return {\n              v: getBytes(yParityAndS)[0] & 0x80 ? 28 : 27\n            };\n          }\n          if (yParity != null) {\n            switch (yParity) {\n              case 0:\n                return {\n                  v: 27\n                };\n              case 1:\n                return {\n                  v: 28\n                };\n            }\n            assertError(false, \"invalid yParity\");\n          }\n          assertError(false, \"missing v\");\n        }(sig.v, sig.yParityAndS, sig.yParity),\n        networkV = _ref.networkV,\n        v = _ref.v;\n      var result = new Signature(_guard, r, s, v);\n      if (networkV) {\n        _classPrivateFieldSet(result, _networkV, networkV);\n      }\n      // If multiple of v, yParity, yParityAndS we given, check they match\n      assertError(!(\"yParity\" in sig && sig.yParity !== result.yParity), \"yParity mismatch\");\n      assertError(!(\"yParityAndS\" in sig && sig.yParityAndS !== result.yParityAndS), \"yParityAndS mismatch\");\n      return result;\n    }\n  }]);\n  return Signature;\n}();","map":{"version":3,"names":["ZeroHash","concat","dataLength","getBigInt","getBytes","getNumber","hexlify","toBeArray","isHexString","zeroPadValue","assertArgument","assertPrivate","BN_0","BigInt","BN_1","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","value","_r2","WeakMap","_s","_v2","_networkV","_Symbol$for","Symbol","for","Signature","guard","r","s","v","_classCallCheck","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_createClass","key","get","_classPrivateFieldGet","set","_value","parseInt","substring","networkV","getChainId","yParityAndS","yParity","clone","toJSON","_type","toString","bv","getChainIdV","chainId","getNormalizedV","from","sig","assertError","check","message","bytes","length","slice","_r","_ref","_v","undefined","result"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\crypto\\signature.ts"],"sourcesContent":["\nimport { ZeroHash } from \"../constants/index.js\";\nimport {\n    concat, dataLength, getBigInt, getBytes, getNumber, hexlify,\n    toBeArray, isHexString, zeroPadValue,\n    assertArgument, assertPrivate\n} from \"../utils/index.js\";\n\nimport type {\n    BigNumberish, BytesLike\n} from \"../utils/index.js\";\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\n\n\nconst _guard = { };\n\n// @TODO: Allow Uint8Array\n\n/**\n *  A SignatureLike\n *\n *  @_docloc: api/crypto:Signing\n */\nexport type SignatureLike = Signature | string | {\n    r: string;\n    s: string;\n    v: BigNumberish;\n    yParity?: 0 | 1;\n    yParityAndS?: string;\n} | {\n    r: string;\n    yParityAndS: string;\n    yParity?: 0 | 1;\n    s?: string;\n    v?: number;\n} | {\n    r: string;\n    s: string;\n    yParity: 0 | 1;\n    v?: BigNumberish;\n    yParityAndS?: string;\n};\n\nfunction toUint256(value: BigNumberish): string {\n    return zeroPadValue(toBeArray(value), 32);\n}\n\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r: string;\n    #s: string;\n    #v: 27 | 28;\n    #networkV: null | bigint;\n\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r(): string { return this.#r; }\n    set r(value: BytesLike) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s(): string { return this.#s; }\n    set s(_value: BytesLike) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v(): 27 | 28 { return this.#v; }\n    set v(value: BigNumberish) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV(): null | bigint { return this.#networkV; }\n\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId(): null | bigint {\n        const v = this.networkV;\n        if (v == null) { return null; }\n        return Signature.getChainId(v);\n    }\n\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity(): 0 | 1 {\n        return (this.v === 27) ? 0: 1;\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS(): string {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) { yParityAndS[0] |= 0x80; }\n        return hexlify(yParityAndS);\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized(): string {\n        return concat([ this.r, this.yParityAndS ]);\n    }\n\n    /**\n     *  The serialized representation.\n     */\n    get serialized(): string {\n        return concat([ this.r, this.s, (this.yParity ? \"0x1c\": \"0x1b\") ]);\n    }\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, r: string, s: string, v: 27 | 28) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n\n    [Symbol.for('nodejs.util.inspect.custom')](): string {\n        return `Signature { r: \"${ this.r }\", s: \"${ this.s }\", yParity: ${ this.yParity }, networkV: ${ this.networkV } }`;\n    }\n\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone(): Signature {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) { clone.#networkV = this.networkV; }\n        return clone;\n    }\n\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON(): any {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString(): null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v: BigNumberish): bigint {\n        const bv = getBigInt(v, \"v\");\n\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) { return BN_0; }\n\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n\n        return (bv - BN_35) / BN_2;\n    }\n\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId: BigNumberish, v: 27 | 28): bigint {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v: BigNumberish): 27 | 28 {\n        const bv = getBigInt(v);\n\n        if (bv === BN_0 || bv === BN_27) { return 27; }\n        if (bv === BN_1 || bv === BN_28) { return 28; }\n\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27: 28;\n    }\n\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig?: SignatureLike): Signature {\n        function assertError(check: unknown, message: string): asserts check {\n            assertArgument(check, message, \"signature\", sig);\n        };\n\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n\n        if (typeof(sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28: 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            assertError(false, \"invalid raw signature length\");\n        }\n\n        if (sig instanceof Signature) { return sig.clone(); }\n\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function(s?: string, yParityAndS?: string) {\n            if (s != null) { return toUint256(s); }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function(_v?: BigNumberish, yParityAndS?: string, yParity?: number): { networkV?: bigint, v: 27 | 28 } {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v: undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28: 27) };\n            }\n\n            if (yParity != null) {\n                switch (yParity) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) { result.#networkV =  networkV; }\n\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(!(\"yParity\" in sig && sig.yParity !== result.yParity), \"yParity mismatch\");\n        assertError(!(\"yParityAndS\" in sig && sig.yParityAndS !== result.yParityAndS), \"yParityAndS mismatch\");\n\n        return result;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}