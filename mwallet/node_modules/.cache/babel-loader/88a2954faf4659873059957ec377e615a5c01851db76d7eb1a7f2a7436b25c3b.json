{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _get from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, hexlify, toQuantity, FetchRequest, assert, assertArgument, isError, toUtf8String } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\nvar THROTTLE = 2000;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nvar EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport var EtherscanPlugin = /*#__PURE__*/function (_NetworkPlugin) {\n  _inherits(EtherscanPlugin, _NetworkPlugin);\n  var _super = _createSuper(EtherscanPlugin);\n  /**\n   *  Creates a new **EtherscanProvider** which will use\n   *  %%baseUrl%%.\n   */\n  function EtherscanPlugin(baseUrl) {\n    var _this;\n    _classCallCheck(this, EtherscanPlugin);\n    _this = _super.call(this, EtherscanPluginId);\n    /**\n     *  The Etherscan API base URL.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"baseUrl\", void 0);\n    defineProperties(_assertThisInitialized(_this), {\n      baseUrl: baseUrl\n    });\n    return _this;\n  }\n  _createClass(EtherscanPlugin, [{\n    key: \"clone\",\n    value: function clone() {\n      return new EtherscanPlugin(this.baseUrl);\n    }\n  }]);\n  return EtherscanPlugin;\n}(NetworkPlugin);\nvar nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nvar _plugin = /*#__PURE__*/new WeakMap();\nexport var EtherscanProvider = /*#__PURE__*/function (_AbstractProvider) {\n  _inherits(EtherscanProvider, _AbstractProvider);\n  var _super2 = _createSuper(EtherscanProvider);\n  /**\n   *  Creates a new **EtherscanBaseProvider**.\n   */\n  function EtherscanProvider(_network, _apiKey) {\n    var _this2;\n    _classCallCheck(this, EtherscanProvider);\n    var apiKey = _apiKey != null ? _apiKey : null;\n    _this2 = _super2.call(this);\n    /**\n     *  The connected network.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"network\", void 0);\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"apiKey\", void 0);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this2), _plugin, {\n      writable: true,\n      value: void 0\n    });\n    var network = Network.from(_network);\n    _classPrivateFieldSet(_assertThisInitialized(_this2), _plugin, network.getPlugin(EtherscanPluginId));\n    defineProperties(_assertThisInitialized(_this2), {\n      apiKey: apiKey,\n      network: network\n    });\n    // Test that the network is supported by Etherscan\n    _this2.getBaseUrl();\n    return _this2;\n  }\n  /**\n   *  Returns the base URL.\n   *\n   *  If an [[EtherscanPlugin]] is configured on the\n   *  [[EtherscanBaseProvider_network]], returns the plugin's\n   *  baseUrl.\n   */\n  _createClass(EtherscanProvider, [{\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      if (_classPrivateFieldGet(this, _plugin)) {\n        return _classPrivateFieldGet(this, _plugin).baseUrl;\n      }\n      switch (this.network.name) {\n        case \"mainnet\":\n          return \"https:/\\/api.etherscan.io\";\n        case \"goerli\":\n          return \"https:/\\/api-goerli.etherscan.io\";\n        case \"sepolia\":\n          return \"https:/\\/api-sepolia.etherscan.io\";\n        case \"arbitrum\":\n          return \"https:/\\/api.arbiscan.io\";\n        case \"arbitrum-goerli\":\n          return \"https:/\\/api-goerli.arbiscan.io\";\n        case \"matic\":\n          return \"https:/\\/api.polygonscan.com\";\n        case \"matic-mumbai\":\n          return \"https:/\\/api-testnet.polygonscan.com\";\n        case \"optimism\":\n          return \"https:/\\/api-optimistic.etherscan.io\";\n        case \"optimism-goerli\":\n          return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n        default:\n      }\n      assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(module, params) {\n      var query = Object.keys(params).reduce(function (accum, key) {\n        var value = params[key];\n        if (value != null) {\n          accum += \"&\".concat(key, \"=\").concat(value);\n        }\n        return accum;\n      }, \"\");\n      var apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n      return \"\".concat(this.getBaseUrl(), \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n    /**\n     *  Returns the URL for using POST requests.\n     */\n  }, {\n    key: \"getPostUrl\",\n    value: function getPostUrl() {\n      return \"\".concat(this.getBaseUrl(), \"/api\");\n    }\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n  }, {\n    key: \"getPostData\",\n    value: function getPostData(module, params) {\n      params.module = module;\n      params.apikey = this.apiKey;\n      return params;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function () {\n      var _detectNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function detectNetwork() {\n        return _detectNetwork2.apply(this, arguments);\n      }\n      return detectNetwork;\n    }()\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(module, params, post) {\n        var _this3 = this;\n        var id, url, payload, request, response, result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              id = nextId++;\n              url = post ? this.getPostUrl() : this.getUrl(module, params);\n              payload = post ? this.getPostData(module, params) : null;\n              this.emit(\"debug\", {\n                action: \"sendRequest\",\n                id: id,\n                url: url,\n                payload: payload\n              });\n              request = new FetchRequest(url);\n              request.setThrottleParams({\n                slotInterval: 1000\n              });\n              request.retryFunc = function (req, resp, attempt) {\n                if (_this3.isCommunityResource()) {\n                  showThrottleMessage(\"Etherscan\");\n                }\n                return Promise.resolve(true);\n              };\n              request.processFunc = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, response) {\n                  var result, throttle;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};\n                        throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n                        if (module === \"proxy\") {\n                          // This JSON response indicates we are being throttled\n                          if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                            _this3.emit(\"debug\", {\n                              action: \"receiveError\",\n                              id: id,\n                              reason: \"proxy-NOTOK\",\n                              error: result\n                            });\n                            response.throwThrottleError(result.result, THROTTLE);\n                          }\n                        } else {\n                          if (throttle) {\n                            _this3.emit(\"debug\", {\n                              action: \"receiveError\",\n                              id: id,\n                              reason: \"null result\",\n                              error: result.result\n                            });\n                            response.throwThrottleError(result.result, THROTTLE);\n                          }\n                        }\n                        return _context2.abrupt(\"return\", response);\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function (_x4, _x5) {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              if (payload) {\n                request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n                request.body = Object.keys(payload).map(function (k) {\n                  return \"\".concat(k, \"=\").concat(payload[k]);\n                }).join(\"&\");\n              }\n              _context3.next = 11;\n              return request.send();\n            case 11:\n              response = _context3.sent;\n              try {\n                response.assertOk();\n              } catch (error) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  error: error,\n                  reason: \"assertOk\"\n                });\n                assert(false, \"response error\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response\n                });\n              }\n              if (!response.hasBody()) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  error: \"missing body\",\n                  reason: \"null body\"\n                });\n                assert(false, \"missing response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response\n                });\n              }\n              result = JSON.parse(toUtf8String(response.body));\n              if (!(module === \"proxy\")) {\n                _context3.next = 22;\n                break;\n              }\n              if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result,\n                  reason: \"invalid JSON-RPC\"\n                });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              if (result.error) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result,\n                  reason: \"JSON-RPC error\"\n                });\n                assert(false, \"error response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 22:\n              if (!(result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\"))) {\n                _context3.next = 25;\n                break;\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 25:\n              if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result\n                });\n                assert(false, \"error response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function fetch(_x, _x2, _x3) {\n        return _fetch.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n  }, {\n    key: \"_getTransactionPostData\",\n    value: function _getTransactionPostData(transaction) {\n      var result = {};\n      for (var key in transaction) {\n        if (transaction[key] == null) {\n          continue;\n        }\n        var value = transaction[key];\n        if (key === \"type\" && value === 0) {\n          continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({\n          type: true,\n          gasLimit: true,\n          gasPrice: true,\n          maxFeePerGs: true,\n          maxPriorityFeePerGas: true,\n          nonce: true,\n          value: true\n        }[key]) {\n          value = toQuantity(value);\n        } else if (key === \"accessList\") {\n          value = \"[\" + accessListify(value).map(function (set) {\n            return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n          }).join(\",\") + \"]\";\n        } else {\n          value = hexlify(value);\n        }\n        result[key] = value;\n      }\n      return result;\n    }\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n  }, {\n    key: \"_checkError\",\n    value: function _checkError(req, error, transaction) {\n      // Pull any message out if, possible\n      var message = \"\";\n      if (isError(error, \"SERVER_ERROR\")) {\n        // Check for an error emitted by a proxy call\n        try {\n          message = error.info.result.error.message;\n        } catch (e) {}\n        if (!message) {\n          try {\n            message = error.info.message;\n          } catch (e) {}\n        }\n      }\n      if (req.method === \"estimateGas\") {\n        if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n          assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n            transaction: req.transaction\n          });\n        }\n      }\n      if (req.method === \"call\" || req.method === \"estimateGas\") {\n        if (message.match(/execution reverted/i)) {\n          var data = \"\";\n          try {\n            data = error.info.result.error.data;\n          } catch (error) {}\n          var e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n          e.info = {\n            request: req,\n            error: error\n          };\n          throw e;\n        }\n      }\n      if (message) {\n        if (req.method === \"broadcastTransaction\") {\n          var _transaction = Transaction.from(req.signedTransaction);\n          if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n            assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n              transaction: _transaction\n            });\n          }\n          if (message.match(/insufficient funds/)) {\n            assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n              transaction: _transaction\n            });\n          }\n          if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n            assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n              transaction: _transaction\n            });\n          }\n        }\n      }\n      // Something we could not process\n      throw error;\n    }\n  }, {\n    key: \"_detectNetwork\",\n    value: function () {\n      var _detectNetwork3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _detectNetwork() {\n        return _detectNetwork3.apply(this, arguments);\n      }\n      return _detectNetwork;\n    }()\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req) {\n        var _this4 = this;\n        var postData, _postData;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = req.method;\n              _context5.next = _context5.t0 === \"chainId\" ? 3 : _context5.t0 === \"getBlockNumber\" ? 4 : _context5.t0 === \"getGasPrice\" ? 5 : _context5.t0 === \"getBalance\" ? 6 : _context5.t0 === \"getTransactionCount\" ? 7 : _context5.t0 === \"getCode\" ? 8 : _context5.t0 === \"getStorage\" ? 9 : _context5.t0 === \"broadcastTransaction\" ? 10 : _context5.t0 === \"getBlock\" ? 11 : _context5.t0 === \"getTransaction\" ? 14 : _context5.t0 === \"getTransactionReceipt\" ? 15 : _context5.t0 === \"call\" ? 16 : _context5.t0 === \"estimateGas\" ? 30 : 42;\n              break;\n            case 3:\n              return _context5.abrupt(\"return\", this.network.chainId);\n            case 4:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_blockNumber\"\n              }));\n            case 5:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_gasPrice\"\n              }));\n            case 6:\n              return _context5.abrupt(\"return\", this.fetch(\"account\", {\n                action: \"balance\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 7:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionCount\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 8:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getCode\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 9:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getStorageAt\",\n                address: req.address,\n                position: req.position,\n                tag: req.blockTag\n              }));\n            case 10:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_sendRawTransaction\",\n                hex: req.signedTransaction\n              }, true).catch(function (error) {\n                return _this4._checkError(req, error, req.signedTransaction);\n              }));\n            case 11:\n              if (!(\"blockTag\" in req)) {\n                _context5.next = 13;\n                break;\n              }\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getBlockByNumber\",\n                tag: req.blockTag,\n                boolean: req.includeTransactions ? \"true\" : \"false\"\n              }));\n            case 13:\n              assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getBlock(blockHash)\"\n              });\n            case 14:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionByHash\",\n                txhash: req.hash\n              }));\n            case 15:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionReceipt\",\n                txhash: req.hash\n              }));\n            case 16:\n              if (!(req.blockTag !== \"latest\")) {\n                _context5.next = 18;\n                break;\n              }\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            case 18:\n              postData = this._getTransactionPostData(req.transaction);\n              postData.module = \"proxy\";\n              postData.action = \"eth_call\";\n              _context5.prev = 21;\n              _context5.next = 24;\n              return this.fetch(\"proxy\", postData, true);\n            case 24:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 27:\n              _context5.prev = 27;\n              _context5.t1 = _context5[\"catch\"](21);\n              return _context5.abrupt(\"return\", this._checkError(req, _context5.t1, req.transaction));\n            case 30:\n              _postData = this._getTransactionPostData(req.transaction);\n              _postData.module = \"proxy\";\n              _postData.action = \"eth_estimateGas\";\n              _context5.prev = 33;\n              _context5.next = 36;\n              return this.fetch(\"proxy\", _postData, true);\n            case 36:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 39:\n              _context5.prev = 39;\n              _context5.t2 = _context5[\"catch\"](33);\n              return _context5.abrupt(\"return\", this._checkError(req, _context5.t2, req.transaction));\n            case 42:\n              return _context5.abrupt(\"break\", 43);\n            case 43:\n              return _context5.abrupt(\"return\", _get(_getPrototypeOf(EtherscanProvider.prototype), \"_perform\", this).call(this, req));\n            case 44:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[21, 27], [33, 39]]);\n      }));\n      function _perform(_x6) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"getNetwork\",\n    value: function () {\n      var _getNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getNetwork() {\n        return _getNetwork.apply(this, arguments);\n      }\n      return getNetwork;\n    }()\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n  }, {\n    key: \"getEtherPrice\",\n    value: function () {\n      var _getEtherPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this.network.name !== \"mainnet\")) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\", 0.0);\n            case 2:\n              _context7.t0 = parseFloat;\n              _context7.next = 5;\n              return this.fetch(\"stats\", {\n                action: \"ethprice\"\n              });\n            case 5:\n              _context7.t1 = _context7.sent.ethusd;\n              return _context7.abrupt(\"return\", (0, _context7.t0)(_context7.t1));\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getEtherPrice() {\n        return _getEtherPrice.apply(this, arguments);\n      }\n      return getEtherPrice;\n    }()\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n  }, {\n    key: \"getContract\",\n    value: function () {\n      var _getContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_address) {\n        var address, resp, abi;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              address = this._getAddress(_address);\n              if (!isPromise(address)) {\n                _context8.next = 5;\n                break;\n              }\n              _context8.next = 4;\n              return address;\n            case 4:\n              address = _context8.sent;\n            case 5:\n              _context8.prev = 5;\n              _context8.next = 8;\n              return this.fetch(\"contract\", {\n                action: \"getabi\",\n                address: address\n              });\n            case 8:\n              resp = _context8.sent;\n              abi = JSON.parse(resp);\n              return _context8.abrupt(\"return\", new Contract(address, abi, this));\n            case 13:\n              _context8.prev = 13;\n              _context8.t0 = _context8[\"catch\"](5);\n              return _context8.abrupt(\"return\", null);\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[5, 13]]);\n      }));\n      function getContract(_x7) {\n        return _getContract.apply(this, arguments);\n      }\n      return getContract;\n    }()\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey == null;\n    }\n  }]);\n  return EtherscanProvider;\n}(AbstractProvider);","map":{"version":3,"names":["AbiCoder","Contract","accessListify","Transaction","defineProperties","hexlify","toQuantity","FetchRequest","assert","assertArgument","isError","toUtf8String","AbstractProvider","Network","NetworkPlugin","showThrottleMessage","THROTTLE","isPromise","value","then","EtherscanPluginId","EtherscanPlugin","_NetworkPlugin","_inherits","_super","_createSuper","baseUrl","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_createClass","key","clone","nextId","_plugin","WeakMap","EtherscanProvider","_AbstractProvider","_super2","_network","_apiKey","_this2","apiKey","_classPrivateFieldInitSpec","writable","network","from","_classPrivateFieldSet","getPlugin","getBaseUrl","_classPrivateFieldGet","name","getUrl","module","params","query","Object","keys","reduce","accum","concat","getPostUrl","getPostData","apikey","_detectNetwork2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","detectNetwork","apply","arguments","_fetch","_callee3","post","_this3","id","url","payload","request","response","result","_callee3$","_context3","emit","action","setThrottleParams","slotInterval","retryFunc","req","resp","attempt","isCommunityResource","Promise","resolve","processFunc","_ref","_callee2","throttle","_callee2$","_context2","hasBody","JSON","parse","body","toLowerCase","indexOf","status","message","reason","error","throwThrottleError","_x4","_x5","setHeader","map","k","join","send","sent","assertOk","jsonrpc","info","match","fetch","_x","_x2","_x3","_getTransactionPostData","transaction","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","set","address","storageKeys","_checkError","e","method","data","getBuiltinCallException","signedTransaction","_detectNetwork3","_callee4","_callee4$","_context4","_detectNetwork","_perform2","_callee5","_this4","postData","_postData","_callee5$","_context5","t0","chainId","tag","blockTag","position","hex","catch","boolean","includeTransactions","operation","txhash","hash","Error","t1","t2","_get","_getPrototypeOf","prototype","_perform","_x6","_getNetwork","_callee6","_callee6$","_context6","getNetwork","_getEtherPrice","_callee7","_callee7$","_context7","parseFloat","ethusd","getEtherPrice","_getContract","_callee8","_address","abi","_callee8$","_context8","_getAddress","getContract","_x7"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\provider-etherscan.ts"],"sourcesContent":["/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties,\n    hexlify, toQuantity,\n    FetchRequest,\n    assert, assertArgument, isError,\n    toUtf8String\n } from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\n\nimport { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\n//import type { } from \"./pagination\";\nimport type { TransactionRequest } from \"./provider.js\";\n\nconst THROTTLE = 2000;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\n\n/**\n *  When subscribing to the ``\"debug\"`` event on an Etherscan-based\n *  provider, the events receive a **DebugEventEtherscanProvider**\n *  payload.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport type DebugEventEtherscanProvider = {\n    action: \"sendRequest\",\n    id: number,\n    url: string,\n    payload: Record<string, any>\n} | {\n    action: \"receiveRequest\",\n    id: number,\n    result: any\n} | {\n    action: \"receiveError\",\n    id: number,\n    error: any\n};\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    readonly baseUrl!: string;\n\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl: string) {\n        super(EtherscanPluginId);\n        defineProperties<EtherscanPlugin>(this, { baseUrl });\n    }\n\n    clone(): EtherscanPlugin {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\n\nlet nextId = 1;\n\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n\n    /**\n     *  The connected network.\n     */\n    readonly network!: Network;\n\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    readonly apiKey!: null | string;\n\n    readonly #plugin: null | EtherscanPlugin;\n\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network?: Networkish, _apiKey?: string) {\n        const apiKey = (_apiKey != null) ? _apiKey: null;\n\n        super();\n\n        const network = Network.from(_network);\n\n        this.#plugin = network.getPlugin<EtherscanPlugin>(EtherscanPluginId);\n\n        defineProperties<EtherscanProvider>(this, { apiKey, network });\n\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */\n    getBaseUrl(): string {\n        if (this.#plugin) { return this.#plugin.baseUrl; }\n\n        switch(this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.getBaseUrl() }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl(): string {\n        return `${ this.getBaseUrl() }/api`;\n    }\n\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const id = nextId++;\n\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt: number) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)): { };\n            const throttle = ((typeof(result.result) === \"string\") ? result.result: \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${ k }=${ payload[k] }`).join(\"&\");\n        }\n\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n\n            if (result.status != 1 || (typeof(result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n        }\n    }\n\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n        const result: Record<string, string> = { };\n        for (let key in transaction) {\n            if ((<any>transaction)[key] == null) { continue; }\n            let value = (<any>transaction)[key];\n            if (key === \"type\" && value === 0) { continue; }\n\n            // Quantity-types require no leading zero, unless 0\n            if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n                value = toQuantity(value);\n            } else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n                }).join(\",\") + \"]\";\n            } else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req: PerformActionRequest, error: Error, transaction: any): never {\n\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = (<any>error).info.result.error.message;\n            } catch (e) { }\n\n            if (!message) {\n                try {\n                    message = (<any>error).info.message;\n                } catch (e) { }\n            }\n        }\n\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = (<any>error).info.result.error.data;\n                } catch (error) { }\n\n                const e = AbiCoder.getBuiltinCallException(req.method, <any>req.transaction, data);\n                e.info = { request: req, error }\n                throw e;\n            }\n        }\n\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                       transaction\n                    });\n                }\n\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                       transaction\n                    });\n                }\n            }\n        }\n\n        // Something we could not process\n        throw error;\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n           case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, <Error>error, req.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n/*\n            case \"getLogs\": {\n                // Needs to complain if more than one address is passed in\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n*/\n            default:\n                break;\n        }\n\n        return super._perform(req);\n    }\n\n    async getNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice(): Promise<number> {\n        if (this.network.name !== \"mainnet\") { return 0.0; }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address: string): Promise<null | Contract> {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) { address = await address; }\n\n        try {\n            const resp = await this.fetch(\"contract\", {\n            action: \"getabi\", address });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}