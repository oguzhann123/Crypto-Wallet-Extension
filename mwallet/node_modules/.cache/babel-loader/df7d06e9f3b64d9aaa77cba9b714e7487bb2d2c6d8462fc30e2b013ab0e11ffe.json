{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classStaticPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js\";\nimport { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport var Wallet = /*#__PURE__*/function (_BaseWallet) {\n  _inherits(Wallet, _BaseWallet);\n  var _super = _createSuper(Wallet);\n  /**\n   *  Create a new wallet for the %%privateKey%%, optionally connected\n   *  to %%provider%%.\n   */\n  function Wallet(key, provider) {\n    _classCallCheck(this, Wallet);\n    if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n      key = \"0x\" + key;\n    }\n    var signingKey = typeof key === \"string\" ? new SigningKey(key) : key;\n    return _super.call(this, signingKey, provider);\n  }\n  _createClass(Wallet, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n  }, {\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(password, progressCallback) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              account = {\n                address: this.address,\n                privateKey: this.privateKey\n              };\n              _context.next = 3;\n              return encryptKeystoreJson(account, password, {\n                progressCallback: progressCallback\n              });\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n      return encrypt;\n    }()\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n  }, {\n    key: \"encryptSync\",\n    value: function encryptSync(password) {\n      var account = {\n        address: this.address,\n        privateKey: this.privateKey\n      };\n      return encryptKeystoreJsonSync(account, password);\n    }\n  }], [{\n    key: \"fromEncryptedJson\",\n    value:\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    function () {\n      var _fromEncryptedJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(json, password, progress) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              account = null;\n              if (!isKeystoreJson(json)) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 4;\n              return decryptKeystoreJson(json, password, progress);\n            case 4:\n              account = _context2.sent;\n              _context2.next = 17;\n              break;\n            case 7:\n              if (!isCrowdsaleJson(json)) {\n                _context2.next = 17;\n                break;\n              }\n              if (!progress) {\n                _context2.next = 12;\n                break;\n              }\n              progress(0);\n              _context2.next = 12;\n              return stall(0);\n            case 12:\n              account = decryptCrowdsaleJson(json, password);\n              if (!progress) {\n                _context2.next = 17;\n                break;\n              }\n              progress(1);\n              _context2.next = 17;\n              return stall(0);\n            case 17:\n              return _context2.abrupt(\"return\", _classStaticPrivateMethodGet(Wallet, Wallet, _fromAccount).call(Wallet, account));\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function fromEncryptedJson(_x3, _x4, _x5) {\n        return _fromEncryptedJson.apply(this, arguments);\n      }\n      return fromEncryptedJson;\n    }()\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n  }, {\n    key: \"fromEncryptedJsonSync\",\n    value: function fromEncryptedJsonSync(json, password) {\n      var account = null;\n      if (isKeystoreJson(json)) {\n        account = decryptKeystoreJsonSync(json, password);\n      } else if (isCrowdsaleJson(json)) {\n        account = decryptCrowdsaleJson(json, password);\n      } else {\n        assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n      }\n      return _classStaticPrivateMethodGet(Wallet, Wallet, _fromAccount).call(Wallet, account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the avavilable\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n  }, {\n    key: \"createRandom\",\n    value: function createRandom(provider) {\n      var wallet = HDNodeWallet.createRandom();\n      if (provider) {\n        return wallet.connect(provider);\n      }\n      return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n  }, {\n    key: \"fromPhrase\",\n    value: function fromPhrase(phrase, provider) {\n      var wallet = HDNodeWallet.fromPhrase(phrase);\n      if (provider) {\n        return wallet.connect(provider);\n      }\n      return wallet;\n    }\n  }]);\n  return Wallet;\n}(BaseWallet);\nfunction _fromAccount(account) {\n  assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n  if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n    var mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n    var _wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n    if (_wallet.address === account.address && _wallet.privateKey === account.privateKey) {\n      return _wallet;\n    }\n    console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n  }\n  var wallet = new Wallet(account.privateKey);\n  assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n  return wallet;\n}","map":{"version":3,"names":["SigningKey","assertArgument","BaseWallet","HDNodeWallet","decryptCrowdsaleJson","isCrowdsaleJson","decryptKeystoreJson","decryptKeystoreJsonSync","encryptKeystoreJson","encryptKeystoreJsonSync","isKeystoreJson","Mnemonic","stall","duration","Promise","resolve","setTimeout","Wallet","_BaseWallet","_inherits","_super","_createSuper","key","provider","_classCallCheck","startsWith","signingKey","call","_createClass","value","connect","_encrypt","_asyncToGenerator","_regeneratorRuntime","mark","_callee","password","progressCallback","account","wrap","_callee$","_context","prev","next","address","privateKey","abrupt","sent","stop","encrypt","_x","_x2","apply","arguments","encryptSync","_fromEncryptedJson","_callee2","json","progress","_callee2$","_context2","_classStaticPrivateMethodGet","_fromAccount","fromEncryptedJson","_x3","_x4","_x5","fromEncryptedJsonSync","createRandom","wallet","fromPhrase","phrase","mnemonic","locale","fromEntropy","entropy","fromMnemonic","path","console","log"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\wallet\\wallet.ts"],"sourcesContent":["import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson  } from \"./json-crowdsale.js\";\nimport {\n    decryptKeystoreJson, decryptKeystoreJsonSync,\n    encryptKeystoreJson, encryptKeystoreJsonSync,\n    isKeystoreJson\n} from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { Provider } from \"../providers/index.js\";\n\nimport type { CrowdsaleAccount } from \"./json-crowdsale.js\";\nimport type { KeystoreAccount } from \"./json-keystore.js\";\n\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n\n    /**\n     *  Create a new wallet for the %%privateKey%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key: string | SigningKey, provider?: null | Provider) {\n        if (typeof(key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n\n        let signingKey = (typeof(key) === \"string\") ? new SigningKey(key): key;\n        super(signingKey, provider);\n    }\n\n    connect(provider: null | Provider): Wallet {\n        return new Wallet(this.signingKey, provider);\n    }\n\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password: Uint8Array | string, progressCallback?: ProgressCallback): Promise<string> {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password: Uint8Array | string): string {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n\n    static #fromAccount(account: null | CrowdsaleAccount | KeystoreAccount): HDNodeWallet | Wallet {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n\n        const wallet = new Wallet(account.privateKey);\n\n        assertArgument(wallet.address === account.address,\n            \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n\n        return wallet;\n    }\n\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json: string, password: Uint8Array | string, progress?: ProgressCallback): Promise<HDNodeWallet | Wallet> {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n\n        } else if (isCrowdsaleJson(json)) {\n            if (progress) { progress(0); await stall(0); }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) { progress(1); await stall(0); }\n\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json: string, password: Uint8Array | string): HDNodeWallet | Wallet {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        } else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        } else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the avavilable\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider?: null | Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase: string, provider?: Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}