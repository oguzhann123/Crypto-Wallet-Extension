{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n *  Explain all the nitty-gritty about the **FallbackProvider**.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { getBigInt, getNumber, assert, assertArgument } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nvar BN_1 = BigInt(\"1\");\nvar BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stringify(value) {\n  return JSON.stringify(value, function (key, value) {\n    if (typeof value === \"bigint\") {\n      return {\n        type: \"bigint\",\n        value: value.toString()\n      };\n    }\n    return value;\n  });\n}\n;\nvar defaultConfig = {\n  stallTimeout: 400,\n  priority: 1,\n  weight: 1\n};\nvar defaultState = {\n  blockNumber: -2,\n  requests: 0,\n  lateResponses: 0,\n  errorResponses: 0,\n  outOfSync: -1,\n  unsupportedEvents: 0,\n  rollingDuration: 0,\n  score: 0,\n  _network: null,\n  _updateNumber: null,\n  _totalTime: 0\n};\nfunction waitForSync(_x, _x2) {\n  return _waitForSync.apply(this, arguments);\n}\nfunction _waitForSync() {\n  _waitForSync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(config, blockNumber) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(config.blockNumber < 0 || config.blockNumber < blockNumber)) {\n            _context7.next = 7;\n            break;\n          }\n          if (!config._updateNumber) {\n            config._updateNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n              var blockNumber;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return config.provider.getBlockNumber();\n                  case 2:\n                    blockNumber = _context6.sent;\n                    if (blockNumber > config.blockNumber) {\n                      config.blockNumber = blockNumber;\n                    }\n                    config._updateNumber = null;\n                  case 5:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6);\n            }))();\n          }\n          _context7.next = 4;\n          return config._updateNumber;\n        case 4:\n          config.outOfSync++;\n          _context7.next = 0;\n          break;\n        case 7:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _waitForSync.apply(this, arguments);\n}\nfunction _normalize(value) {\n  if (value == null) {\n    return \"null\";\n  }\n  if (Array.isArray(value)) {\n    return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n  }\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return _normalize(value.toJSON());\n  }\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n    case \"bigint\":\n    case \"number\":\n      return BigInt(value).toString();\n    case \"string\":\n      return JSON.stringify(value);\n    case \"object\":\n      {\n        var keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(function (k) {\n          return \"\".concat(JSON.stringify(k), \":\").concat(_normalize(value[k]));\n        }).join(\",\") + \"}\";\n      }\n  }\n  console.log(\"Could not serialize\", value);\n  throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n  if (\"error\" in value) {\n    var error = value.error;\n    return {\n      tag: _normalize(error),\n      value: error\n    };\n  }\n  var result = value.result;\n  return {\n    tag: _normalize(result),\n    value: result\n  };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n  var tally = new Map();\n  var _iterator = _createForOfIteratorHelper(results),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n        value = _step$value.value,\n        tag = _step$value.tag,\n        weight = _step$value.weight;\n      var t = tally.get(tag) || {\n        value: value,\n        weight: 0\n      };\n      t.weight += weight;\n      tally.set(tag, t);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var best = null;\n  var _iterator2 = _createForOfIteratorHelper(tally.values()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var r = _step2.value;\n      if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n        best = r;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (best) {\n    return best.value;\n  }\n  return undefined;\n}\nfunction getMedian(quorum, results) {\n  var resultWeight = 0;\n  var errorMap = new Map();\n  var bestError = null;\n  var values = [];\n  var _iterator3 = _createForOfIteratorHelper(results),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _step3.value,\n        value = _step3$value.value,\n        tag = _step3$value.tag,\n        weight = _step3$value.weight;\n      if (value instanceof Error) {\n        var e = errorMap.get(tag) || {\n          value: value,\n          weight: 0\n        };\n        e.weight += weight;\n        errorMap.set(tag, e);\n        if (bestError == null || e.weight > bestError.weight) {\n          bestError = e;\n        }\n      } else {\n        values.push(BigInt(value));\n        resultWeight += weight;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (resultWeight < quorum) {\n    // We have quorum for an error\n    if (bestError && bestError.weight >= quorum) {\n      return bestError.value;\n    }\n    // We do not have quorum for a result\n    return undefined;\n  }\n  // Get the sorted values\n  values.sort(function (a, b) {\n    return a < b ? -1 : b > a ? 1 : 0;\n  });\n  var mid = Math.floor(values.length / 2);\n  // Odd-length; take the middle value\n  if (values.length % 2) {\n    return values[mid];\n  }\n  // Even length; take the ceiling of the mean of the center two values\n  return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n  // If any value or error meets quorum, that is our preferred result\n  var result = checkQuorum(quorum, results);\n  if (result !== undefined) {\n    return result;\n  }\n  // Otherwise, do we have any result?\n  var _iterator4 = _createForOfIteratorHelper(results),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var r = _step4.value;\n      if (r.value) {\n        return r.value;\n      }\n    }\n    // Nope!\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n  if (quorum === 1) {\n    return getNumber(getMedian(quorum, results), \"%internal\");\n  }\n  var tally = new Map();\n  var add = function add(result, weight) {\n    var t = tally.get(result) || {\n      result: result,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(result, t);\n  };\n  var _iterator5 = _createForOfIteratorHelper(results),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _step5$value = _step5.value,\n        weight = _step5$value.weight,\n        value = _step5$value.value;\n      var r = getNumber(value);\n      add(r - 1, weight);\n      add(r, weight);\n      add(r + 1, weight);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  var bestWeight = 0;\n  var bestResult = undefined;\n  var _iterator6 = _createForOfIteratorHelper(tally.values()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _step6.value,\n        _weight = _step6$value.weight,\n        result = _step6$value.result;\n      // Use this result, if this result meets quorum and has either:\n      // - a better weight\n      // - or equal weight, but the result is larger\n      if (_weight >= quorum && (_weight > bestWeight || bestResult != null && _weight === bestWeight && result > bestResult)) {\n        bestWeight = _weight;\n        bestResult = result;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return bestResult;\n}\n/**\n *  A Fallback Provider.\n *\n */\nvar _configs = /*#__PURE__*/new WeakMap();\nvar _height = /*#__PURE__*/new WeakMap();\nvar _initialSyncPromise = /*#__PURE__*/new WeakMap();\nvar _getNextConfig = /*#__PURE__*/new WeakSet();\nvar _addRunner = /*#__PURE__*/new WeakSet();\nvar _initialSync = /*#__PURE__*/new WeakSet();\nvar _checkQuorum = /*#__PURE__*/new WeakSet();\nvar _waitForQuorum = /*#__PURE__*/new WeakSet();\nexport var FallbackProvider = /*#__PURE__*/function (_AbstractProvider) {\n  _inherits(FallbackProvider, _AbstractProvider);\n  var _super = _createSuper(FallbackProvider);\n  function FallbackProvider(providers, _network) {\n    var _this;\n    _classCallCheck(this, FallbackProvider);\n    _this = _super.call(this, _network);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _waitForQuorum);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _checkQuorum);\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _initialSync);\n    // Adds a new runner (if available) to running.\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _addRunner);\n    // Grab the next (random) config that is not already part of\n    // the running set\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _getNextConfig);\n    _defineProperty(_assertThisInitialized(_this), \"quorum\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"eventQuorum\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"eventWorkers\", void 0);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _configs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _height, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _initialSyncPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _configs, providers.map(function (p) {\n      if (p instanceof AbstractProvider) {\n        return Object.assign({\n          provider: p\n        }, defaultConfig, defaultState);\n      } else {\n        return Object.assign({}, defaultConfig, p, defaultState);\n      }\n    }));\n    _classPrivateFieldSet(_assertThisInitialized(_this), _height, -2);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _initialSyncPromise, null);\n    _this.quorum = 2; //Math.ceil(providers.length /  2);\n    _this.eventQuorum = 1;\n    _this.eventWorkers = 1;\n    assertArgument(_this.quorum <= _classPrivateFieldGet(_assertThisInitialized(_this), _configs).reduce(function (a, c) {\n      return a + c.weight;\n    }, 0), \"quorum exceed provider wieght\", \"quorum\", _this.quorum);\n    return _this;\n  }\n  _createClass(FallbackProvider, [{\n    key: \"providerConfigs\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _configs).map(function (c) {\n        var result = Object.assign({}, c);\n        for (var key in result) {\n          if (key[0] === \"_\") {\n            delete result[key];\n          }\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"_detectNetwork\",\n    value: function () {\n      var _detectNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Network;\n              _context.t1 = getBigInt;\n              _context.next = 4;\n              return this._perform({\n                method: \"chainId\"\n              });\n            case 4:\n              _context.t2 = _context.sent;\n              _context.t3 = (0, _context.t1)(_context.t2);\n              return _context.abrupt(\"return\", _context.t0.from.call(_context.t0, _context.t3));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _detectNetwork() {\n        return _detectNetwork2.apply(this, arguments);\n      }\n      return _detectNetwork;\n    }() // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n  }, {\n    key: \"_translatePerform\",\n    value: function () {\n      var _translatePerform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, req) {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = req.method;\n              _context2.next = _context2.t0 === \"broadcastTransaction\" ? 3 : _context2.t0 === \"call\" ? 6 : _context2.t0 === \"chainId\" ? 9 : _context2.t0 === \"estimateGas\" ? 12 : _context2.t0 === \"getBalance\" ? 15 : _context2.t0 === \"getBlock\" ? 18 : _context2.t0 === \"getBlockNumber\" ? 22 : _context2.t0 === \"getCode\" ? 25 : _context2.t0 === \"getGasPrice\" ? 28 : _context2.t0 === \"getLogs\" ? 31 : _context2.t0 === \"getStorage\" ? 34 : _context2.t0 === \"getTransaction\" ? 37 : _context2.t0 === \"getTransactionCount\" ? 40 : _context2.t0 === \"getTransactionReceipt\" ? 43 : _context2.t0 === \"getTransactionResult\" ? 46 : 49;\n              break;\n            case 3:\n              _context2.next = 5;\n              return provider.broadcastTransaction(req.signedTransaction);\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n              _context2.next = 8;\n              return provider.call(Object.assign({}, req.transaction, {\n                blockTag: req.blockTag\n              }));\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 9:\n              _context2.next = 11;\n              return provider.getNetwork();\n            case 11:\n              return _context2.abrupt(\"return\", _context2.sent.chainId);\n            case 12:\n              _context2.next = 14;\n              return provider.estimateGas(req.transaction);\n            case 14:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 15:\n              _context2.next = 17;\n              return provider.getBalance(req.address, req.blockTag);\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 18:\n              block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n              _context2.next = 21;\n              return provider.getBlock(block, req.includeTransactions);\n            case 21:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 22:\n              _context2.next = 24;\n              return provider.getBlockNumber();\n            case 24:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 25:\n              _context2.next = 27;\n              return provider.getCode(req.address, req.blockTag);\n            case 27:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 28:\n              _context2.next = 30;\n              return provider.getFeeData();\n            case 30:\n              return _context2.abrupt(\"return\", _context2.sent.gasPrice);\n            case 31:\n              _context2.next = 33;\n              return provider.getLogs(req.filter);\n            case 33:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 34:\n              _context2.next = 36;\n              return provider.getStorage(req.address, req.position, req.blockTag);\n            case 36:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 37:\n              _context2.next = 39;\n              return provider.getTransaction(req.hash);\n            case 39:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 40:\n              _context2.next = 42;\n              return provider.getTransactionCount(req.address, req.blockTag);\n            case 42:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 43:\n              _context2.next = 45;\n              return provider.getTransactionReceipt(req.hash);\n            case 45:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 46:\n              _context2.next = 48;\n              return provider.getTransactionResult(req.hash);\n            case 48:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 49:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function _translatePerform(_x3, _x4) {\n        return _translatePerform2.apply(this, arguments);\n      }\n      return _translatePerform;\n    }()\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {\n        var results, _result2, running, i, result, _iterator7, _step7, runner;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(req.method === \"broadcastTransaction\")) {\n                _context4.next = 9;\n                break;\n              }\n              _context4.next = 3;\n              return Promise.all(_classPrivateFieldGet(this, _configs).map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {\n                  var provider, weight, _result;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        provider = _ref.provider, weight = _ref.weight;\n                        _context3.prev = 1;\n                        _context3.next = 4;\n                        return provider._perform(req);\n                      case 4:\n                        _result = _context3.sent;\n                        return _context3.abrupt(\"return\", Object.assign(normalizeResult({\n                          result: _result\n                        }), {\n                          weight: weight\n                        }));\n                      case 8:\n                        _context3.prev = 8;\n                        _context3.t0 = _context3[\"catch\"](1);\n                        return _context3.abrupt(\"return\", Object.assign(normalizeResult({\n                          error: _context3.t0\n                        }), {\n                          weight: weight\n                        }));\n                      case 11:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, null, [[1, 8]]);\n                }));\n                return function (_x6) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 3:\n              results = _context4.sent;\n              _result2 = getAnyResult(this.quorum, results);\n              assert(_result2 !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: {\n                  request: req,\n                  results: results.map(stringify)\n                }\n              });\n              if (!(_result2 instanceof Error)) {\n                _context4.next = 8;\n                break;\n              }\n              throw _result2;\n            case 8:\n              return _context4.abrupt(\"return\", _result2);\n            case 9:\n              _context4.next = 11;\n              return _classPrivateMethodGet(this, _initialSync, _initialSync2).call(this);\n            case 11:\n              // Bootstrap enough runners to meet quorum\n              running = new Set();\n              for (i = 0; i < this.quorum; i++) {\n                _classPrivateMethodGet(this, _addRunner, _addRunner2).call(this, running, req);\n              }\n              _context4.next = 15;\n              return _classPrivateMethodGet(this, _waitForQuorum, _waitForQuorum2).call(this, running, req);\n            case 15:\n              result = _context4.sent;\n              // Track requests sent to a provider that are still\n              // outstanding after quorum has been otherwise found\n              _iterator7 = _createForOfIteratorHelper(running);\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  runner = _step7.value;\n                  if (runner.perform && runner.result == null) {\n                    runner.config.lateResponses++;\n                  }\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              return _context4.abrupt(\"return\", result);\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _perform(_x5) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iterator8, _step8, provider;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator8 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _configs));\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  provider = _step8.value.provider;\n                  provider.destroy();\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              _get(_getPrototypeOf(FallbackProvider.prototype), \"destroy\", this).call(this);\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }()\n  }]);\n  return FallbackProvider;\n}(AbstractProvider);\nfunction _getNextConfig2(running) {\n  // @TODO: Maybe do a check here to favour (heavily) providers that\n  //        do not require waitForSync and disfavour providers that\n  //        seem down-ish or are behaving slowly\n  var configs = Array.from(running).map(function (r) {\n    return r.config;\n  });\n  // Shuffle the states, sorted by priority\n  var allConfigs = _classPrivateFieldGet(this, _configs).slice();\n  shuffle(allConfigs);\n  allConfigs.sort(function (a, b) {\n    return b.priority - a.priority;\n  });\n  var _iterator9 = _createForOfIteratorHelper(allConfigs),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var config = _step9.value;\n      if (configs.indexOf(config) === -1) {\n        return config;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  return null;\n}\nfunction _addRunner2(running, req) {\n  var _this2 = this;\n  var config = _classPrivateMethodGet(this, _getNextConfig, _getNextConfig2).call(this, running);\n  // No runners available\n  if (config == null) {\n    return null;\n  }\n  // Create a new runner\n  var runner = {\n    config: config,\n    result: null,\n    didBump: false,\n    perform: null,\n    staller: null\n  };\n  var now = getTime();\n  // Start performing this operation\n  runner.perform = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var result, dt;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          config.requests++;\n          _context8.next = 4;\n          return _this2._translatePerform(config.provider, req);\n        case 4:\n          result = _context8.sent;\n          runner.result = {\n            result: result\n          };\n          _context8.next = 12;\n          break;\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          config.errorResponses++;\n          runner.result = {\n            error: _context8.t0\n          };\n        case 12:\n          dt = getTime() - now;\n          config._totalTime += dt;\n          config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n          runner.perform = null;\n        case 16:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8, null, [[0, 8]]);\n  }))();\n  // Start a staller; when this times out, it's time to force\n  // kicking off another runner because we are taking too long\n  runner.staller = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return stall(config.stallTimeout);\n        case 2:\n          runner.staller = null;\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }))();\n  running.add(runner);\n  return runner;\n}\nfunction _initialSync2() {\n  return _initialSync3.apply(this, arguments);\n}\nfunction _initialSync3() {\n  _initialSync3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    var _this3 = this;\n    var initialSync, promises;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          initialSync = _classPrivateFieldGet(this, _initialSyncPromise);\n          if (!initialSync) {\n            promises = [];\n            _classPrivateFieldGet(this, _configs).forEach(function (config) {\n              promises.push(waitForSync(config, 0));\n              promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n                return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                  while (1) switch (_context10.prev = _context10.next) {\n                    case 0:\n                      _context10.next = 2;\n                      return config.provider.getNetwork();\n                    case 2:\n                      config._network = _context10.sent;\n                    case 3:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }, _callee10);\n              }))());\n            });\n            _classPrivateFieldSet(this, _initialSyncPromise, initialSync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n              var chainId, _iterator10, _step10, config, network;\n              return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                while (1) switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return Promise.all(promises);\n                  case 2:\n                    // Check all the networks match\n                    chainId = null;\n                    _iterator10 = _createForOfIteratorHelper(_classPrivateFieldGet(_this3, _configs));\n                    try {\n                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                        config = _step10.value;\n                        network = config._network;\n                        if (chainId == null) {\n                          chainId = network.chainId;\n                        } else if (network.chainId !== chainId) {\n                          assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                          });\n                        }\n                      }\n                    } catch (err) {\n                      _iterator10.e(err);\n                    } finally {\n                      _iterator10.f();\n                    }\n                  case 5:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }, _callee11);\n            }))());\n          }\n          _context12.next = 4;\n          return initialSync;\n        case 4:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, this);\n  }));\n  return _initialSync3.apply(this, arguments);\n}\nfunction _checkQuorum2(_x7, _x8) {\n  return _checkQuorum3.apply(this, arguments);\n}\nfunction _checkQuorum3() {\n  _checkQuorum3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(running, req) {\n    var results, _iterator11, _step11, runner, _normalizeResult, tag, value, mode;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          // Get all the result objects\n          results = [];\n          _iterator11 = _createForOfIteratorHelper(running);\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              runner = _step11.value;\n              if (runner.result != null) {\n                _normalizeResult = normalizeResult(runner.result), tag = _normalizeResult.tag, value = _normalizeResult.value;\n                results.push({\n                  tag: tag,\n                  value: value,\n                  weight: runner.config.weight\n                });\n              }\n            }\n            // Are there enough results to event meet quorum?\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n          if (!(results.reduce(function (a, r) {\n            return a + r.weight;\n          }, 0) < this.quorum)) {\n            _context13.next = 5;\n            break;\n          }\n          return _context13.abrupt(\"return\", undefined);\n        case 5:\n          _context13.t0 = req.method;\n          _context13.next = _context13.t0 === \"getBlockNumber\" ? 8 : _context13.t0 === \"getGasPrice\" ? 14 : _context13.t0 === \"estimateGas\" ? 14 : _context13.t0 === \"getBlock\" ? 15 : _context13.t0 === \"call\" ? 18 : _context13.t0 === \"chainId\" ? 18 : _context13.t0 === \"getBalance\" ? 18 : _context13.t0 === \"getTransactionCount\" ? 18 : _context13.t0 === \"getCode\" ? 18 : _context13.t0 === \"getStorage\" ? 18 : _context13.t0 === \"getTransaction\" ? 18 : _context13.t0 === \"getTransactionReceipt\" ? 18 : _context13.t0 === \"getLogs\" ? 18 : _context13.t0 === \"broadcastTransaction\" ? 19 : 20;\n          break;\n        case 8:\n          // We need to get the bootstrap block height\n          if (_classPrivateFieldGet(this, _height) === -2) {\n            _classPrivateFieldSet(this, _height, Math.ceil(getNumber(getMedian(this.quorum, _classPrivateFieldGet(this, _configs).map(function (c) {\n              return {\n                value: c.blockNumber,\n                tag: getNumber(c.blockNumber).toString(),\n                weight: c.weight\n              };\n            })))));\n          }\n          // Find the mode across all the providers, allowing for\n          // a little drift between block heights\n          mode = getFuzzyMode(this.quorum, results);\n          if (!(mode === undefined)) {\n            _context13.next = 12;\n            break;\n          }\n          return _context13.abrupt(\"return\", undefined);\n        case 12:\n          if (mode > _classPrivateFieldGet(this, _height)) {\n            _classPrivateFieldSet(this, _height, mode);\n          }\n          return _context13.abrupt(\"return\", _classPrivateFieldGet(this, _height));\n        case 14:\n          return _context13.abrupt(\"return\", getMedian(this.quorum, results));\n        case 15:\n          if (!(\"blockTag\" in req && req.blockTag === \"pending\")) {\n            _context13.next = 17;\n            break;\n          }\n          return _context13.abrupt(\"return\", getAnyResult(this.quorum, results));\n        case 17:\n          return _context13.abrupt(\"return\", checkQuorum(this.quorum, results));\n        case 18:\n          return _context13.abrupt(\"return\", checkQuorum(this.quorum, results));\n        case 19:\n          return _context13.abrupt(\"return\", getAnyResult(this.quorum, results));\n        case 20:\n          assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_perform(\".concat(stringify(req.method), \")\")\n          });\n        case 21:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, this);\n  }));\n  return _checkQuorum3.apply(this, arguments);\n}\nfunction _waitForQuorum2(_x9, _x10) {\n  return _waitForQuorum3.apply(this, arguments);\n}\nfunction _waitForQuorum3() {\n  _waitForQuorum3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(running, req) {\n    var interesting, newRunners, _iterator12, _step12, runner, value, i;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          if (!(running.size === 0)) {\n            _context14.next = 2;\n            break;\n          }\n          throw new Error(\"no runners?!\");\n        case 2:\n          // Any promises that are interesting to watch for; an expired stall\n          // or a successful perform\n          interesting = [];\n          newRunners = 0;\n          _iterator12 = _createForOfIteratorHelper(running);\n          _context14.prev = 5;\n          _iterator12.s();\n        case 7:\n          if ((_step12 = _iterator12.n()).done) {\n            _context14.next = 19;\n            break;\n          }\n          runner = _step12.value;\n          // No responses, yet; keep an eye on it\n          if (runner.perform) {\n            interesting.push(runner.perform);\n          }\n          // Still stalling...\n          if (!runner.staller) {\n            _context14.next = 13;\n            break;\n          }\n          interesting.push(runner.staller);\n          return _context14.abrupt(\"continue\", 17);\n        case 13:\n          if (!runner.didBump) {\n            _context14.next = 15;\n            break;\n          }\n          return _context14.abrupt(\"continue\", 17);\n        case 15:\n          // Got a response (result or error) or stalled; kick off another runner\n          runner.didBump = true;\n          newRunners++;\n        case 17:\n          _context14.next = 7;\n          break;\n        case 19:\n          _context14.next = 24;\n          break;\n        case 21:\n          _context14.prev = 21;\n          _context14.t0 = _context14[\"catch\"](5);\n          _iterator12.e(_context14.t0);\n        case 24:\n          _context14.prev = 24;\n          _iterator12.f();\n          return _context14.finish(24);\n        case 27:\n          _context14.next = 29;\n          return _classPrivateMethodGet(this, _checkQuorum, _checkQuorum2).call(this, running, req);\n        case 29:\n          value = _context14.sent;\n          if (!(value !== undefined)) {\n            _context14.next = 34;\n            break;\n          }\n          if (!(value instanceof Error)) {\n            _context14.next = 33;\n            break;\n          }\n          throw value;\n        case 33:\n          return _context14.abrupt(\"return\", value);\n        case 34:\n          // Add any new runners, because a staller timed out or a result\n          // or error response came in.\n          for (i = 0; i < newRunners; i++) {\n            _classPrivateMethodGet(this, _addRunner, _addRunner2).call(this, running, req);\n          }\n          // All providers have returned, and we have no result\n          assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: {\n              request: req,\n              results: Array.from(running).map(function (r) {\n                return stringify(r.result);\n              })\n            }\n          });\n          // Wait for someone to either complete its perform or stall out\n          _context14.next = 38;\n          return Promise.race(interesting);\n        case 38:\n          _context14.next = 40;\n          return _classPrivateMethodGet(this, _waitForQuorum, _waitForQuorum2).call(this, running, req);\n        case 40:\n          return _context14.abrupt(\"return\", _context14.sent);\n        case 41:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14, this, [[5, 21, 24, 27]]);\n  }));\n  return _waitForQuorum3.apply(this, arguments);\n}","map":{"version":3,"names":["getBigInt","getNumber","assert","assertArgument","AbstractProvider","Network","BN_1","BigInt","BN_2","shuffle","array","i","length","j","Math","floor","random","tmp","stall","duration","Promise","resolve","setTimeout","getTime","Date","stringify","value","JSON","key","type","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_network","_updateNumber","_totalTime","waitForSync","_x","_x2","_waitForSync","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee7","config","wrap","_callee7$","_context7","prev","next","_callee6","_callee6$","_context6","provider","getBlockNumber","sent","stop","_normalize","Array","isArray","map","join","toJSON","keys","Object","sort","k","concat","console","log","Error","normalizeResult","error","tag","result","checkQuorum","quorum","results","tally","Map","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","t","get","set","err","e","f","best","_iterator2","values","_step2","r","undefined","getMedian","resultWeight","errorMap","bestError","_iterator3","_step3","_step3$value","push","a","b","mid","getAnyResult","_iterator4","_step4","getFuzzyMode","add","_iterator5","_step5","_step5$value","bestWeight","bestResult","_iterator6","_step6","_step6$value","_configs","WeakMap","_height","_initialSyncPromise","_getNextConfig","WeakSet","_addRunner","_initialSync","_checkQuorum","_waitForQuorum","FallbackProvider","_AbstractProvider","_inherits","_super","_createSuper","providers","network","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_defineProperty","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","p","assign","eventQuorum","eventWorkers","_classPrivateFieldGet","reduce","c","_createClass","_detectNetwork2","_callee","_callee$","_context","t0","t1","_perform","method","t2","t3","abrupt","from","_detectNetwork","_translatePerform2","_callee2","req","block","_callee2$","_context2","broadcastTransaction","signedTransaction","transaction","blockTag","getNetwork","chainId","estimateGas","getBalance","address","blockHash","getBlock","includeTransactions","getCode","getFeeData","gasPrice","getLogs","filter","getStorage","position","getTransaction","hash","getTransactionCount","getTransactionReceipt","getTransactionResult","_translatePerform","_x3","_x4","_perform2","_callee4","_result2","running","_iterator7","_step7","runner","_callee4$","_context4","all","_ref2","_callee3","_ref","_result","_callee3$","_context3","_x6","request","info","_classPrivateMethodGet","_initialSync2","Set","_addRunner2","_waitForQuorum2","perform","_x5","_destroy","_callee5","_iterator8","_step8","_callee5$","_context5","destroy","_get","_getPrototypeOf","prototype","_getNextConfig2","configs","allConfigs","slice","_iterator9","_step9","indexOf","_this2","didBump","staller","now","_callee8","dt","_callee8$","_context8","_callee9","_callee9$","_context9","_initialSync3","_callee12","_this3","initialSync","promises","_callee12$","_context12","forEach","_callee10","_callee10$","_context10","_callee11","_iterator10","_step10","_callee11$","_context11","operation","_checkQuorum2","_x7","_x8","_checkQuorum3","_callee13","_iterator11","_step11","_normalizeResult","mode","_callee13$","_context13","ceil","_x9","_x10","_waitForQuorum3","_callee14","interesting","newRunners","_iterator12","_step12","_callee14$","_context14","size","finish","race"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\provider-fallback.ts"],"sourcesContent":["/**\n *  Explain all the nitty-gritty about the **FallbackProvider**.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport {\n    getBigInt, getNumber, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\"\n\nimport type { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\"\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle<T = any>(array: Array<T>): void {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction stringify(value: any): string {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof(value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n\n/**\n *  A configuration entry for how to use a [[Provider]].\n */\nexport interface FallbackProviderConfig {\n\n    // The provider\n    provider: AbstractProvider;\n\n    // How long to wait for a response before getting impatient\n    // and ispatching the next provider\n    stallTimeout?: number;\n\n    // Lower values are dispatched first\n    priority?: number;\n\n    // How much this provider contributes to the quorum\n    weight?: number;\n};\n\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\n\n// We track a bunch of extra stuff that might help debug problems or\n// optimize infrastructure later on.\n/**\n *  The statistics and state maintained for a [[Provider]].\n */\nexport interface FallbackProviderState extends Required<FallbackProviderConfig> {\n\n    // The most recent blockNumber this provider has reported (-2 if none)\n    blockNumber: number;\n\n    // The number of total requests ever sent to this provider\n    requests: number;\n\n    // The number of responses that errored\n    errorResponses: number;\n\n    // The number of responses that occured after the result resolved\n    lateResponses: number;\n\n    // How many times syncing was required to catch up the expected block\n    outOfSync: number;\n\n    // The number of requests which reported unsupported operation\n    unsupportedEvents: number;\n\n    // A rolling average (5% current duration) for response time\n    rollingDuration: number;\n\n    // The ratio of quorum-agreed results to total\n    score: number;\n}\n\ninterface Config extends FallbackProviderState {\n    _updateNumber: null | Promise<any>;\n    _network: null | Network;\n    _totalTime: number;\n}\n\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0\n};\n\n\nasync function waitForSync(config: Config, blockNumber: number): Promise<void> {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                const blockNumber = await config.provider.getBlockNumber();\n                if (blockNumber > config.blockNumber) {\n                    config.blockNumber = blockNumber;\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n    }\n}\n\n/**\n *  Additional options to configure a [[FallbackProvider]].\n */\nexport type FallbackProviderOptions = {\n    // How many providers must agree on a value before reporting\n    // back the response\n    quorum: number;\n\n    // How many providers must have reported the same event\n    // for it to be emitted\n    eventQuorum: number;\n\n    // How many providers to dispatch each event to simultaneously.\n    // Set this to 0 to use getLog polling, which implies eventQuorum\n    // is equal to quorum.\n    eventWorkers: number;\n};\n\ntype RunnerResult = { result: any } | { error: Error };\n\ntype RunnerState = {\n    config: Config;\n    staller: null | Promise<void>;\n    didBump: boolean;\n    perform: null | Promise<any>;\n    result: null | RunnerResult;\n}\n\nfunction _normalize(value: any): string {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\": case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${ JSON.stringify(k) }:${ _normalize(value[k]) }`).join(\",\") + \"}\";\n        }\n    }\n\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(value: RunnerResult): { tag: string, value: any } {\n\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n\ntype TallyResult = {\n    tag: string;\n    value: any;\n    weight: number;\n};\n\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum: number, results: Array<TallyResult>): any | Error {\n    const tally: Map<string, { value: any, weight: number }> = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n\n    let best: null | { value: any, weight: number } = null;\n\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n\n    if (best) { return best.value; }\n\n    return undefined;\n}\n\nfunction getMedian(quorum: number, results: Array<TallyResult>): undefined | bigint | Error {\n    let resultWeight = 0;\n\n    const errorMap: Map<string, { weight: number, value: Error }> = new Map();\n    let bestError: null | { weight: number, value: Error } = null;\n\n    const values: Array<bigint> = [ ];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n\n            if (bestError == null || e.weight > bestError.weight) { bestError = e; }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) { return bestError.value; }\n\n        // We do not have quorum for a result\n        return undefined;\n    }\n\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1: (b > a) ? 1: 0));\n\n    const mid = Math.floor(values.length / 2);\n\n    // Odd-length; take the middle value\n    if (values.length % 2) { return values[mid]; }\n\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum: number, results: Array<TallyResult>): undefined | any | Error {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) { return result; }\n\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) { return r.value; }\n    }\n\n    // Nope!\n    return undefined;\n}\n\nfunction getFuzzyMode(quorum: number, results: Array<TallyResult>): undefined | number {\n    if (quorum === 1) { return getNumber(<bigint>getMedian(quorum, results), \"%internal\"); }\n\n    const tally: Map<number, { result: number, weight: number }> = new Map();\n    const add = (result: number, weight: number) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n\n    let bestWeight = 0;\n    let bestResult = undefined;\n\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n\n    return bestResult;\n}\n\n/**\n *  A Fallback Provider.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n\n    readonly quorum: number;\n    readonly eventQuorum: number;\n    readonly eventWorkers: number;\n\n    readonly #configs: Array<Config>;\n\n    #height: number;\n    #initialSyncPromise: null | Promise<void>;\n\n    constructor(providers: Array<AbstractProvider | FallbackProviderConfig>, network?: Networkish) {\n        super(network);\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState );\n            } else {\n                return Object.assign({ }, defaultConfig, p, defaultState );\n            }\n        });\n\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n\n        this.quorum = 2; //Math.ceil(providers.length /  2);\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0),\n            \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n\n    get providerConfigs(): Array<FallbackProviderState> {\n        return this.#configs.map((c) => {\n            const result: any = Object.assign({ }, c);\n            for (const key in result) {\n                if (key[0] === \"_\") { delete result[key]; }\n            }\n            return result;\n        });\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n\n    async _translatePerform(provider: AbstractProvider, req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({ }, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash: req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running: Set<RunnerState>): null | Config {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n\n        const configs = Array.from(running).map((r) => r.config)\n\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (b.priority - a.priority));\n\n        for (const config of allConfigs) {\n            if (configs.indexOf(config) === -1) { return config; }\n        }\n\n        return null;\n    }\n\n    // Adds a new runner (if available) to running.\n    #addRunner(running: Set<RunnerState>, req: PerformActionRequest): null | RunnerState {\n        const config = this.#getNextConfig(running);\n\n        // No runners available\n        if (config == null) { return null; }\n\n        // Create a new runner\n        const runner: RunnerState = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n\n        const now = getTime();\n\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            } catch (error: any) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n\n            runner.perform = null;\n        })();\n\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n\n        running.add(runner);\n        return runner;\n    }\n\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync(): Promise<void> {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises: Array<Promise<any>> = [ ];\n            this.#configs.forEach((config) => {\n                promises.push(waitForSync(config, 0));\n                promises.push((async () => {\n                    config._network = await config.provider.getNetwork();\n                })());\n            });\n\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n\n                // Check all the networks match\n                let chainId: null | bigint = null;\n                for (const config of this.#configs) {\n                    const network = <Network>(config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n\n        await initialSync\n    }\n\n\n    async #checkQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        // Get all the result objects\n        const results: Array<TallyResult> = [ ];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(<bigint>getMedian(this.quorum, this.#configs.map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) { return undefined; }\n                if (mode > this.#height) { this.#height = mode; }\n                return this.#height;\n            }\n\n            case \"getGasPrice\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${ stringify((<any>req).method) })`\n        });\n    }\n\n    async #waitForQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        if (running.size === 0) { throw new Error(\"no runners?!\"); }\n\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting: Array<Promise<void>> = [ ];\n\n        let newRunners = 0;\n        for (const runner of running) {\n\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n\n            // This runner has already triggered another runner\n            if (runner.didBump) { continue; }\n\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) { throw value; }\n            return value;\n        }\n\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req)\n        }\n\n        // All providers have returned, and we have no result\n\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            const results = await Promise.all(this.#configs.map(async ({ provider, weight }) => {\n                try {\n                    const result = await provider._perform(req);\n                    return Object.assign(normalizeResult({ result }), { weight });\n                } catch (error: any) {\n                    return Object.assign(normalizeResult({ error }), { weight });\n                }\n            }));\n\n            const result = getAnyResult(this.quorum, results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            })\n            if (result instanceof Error) { throw result; }\n            return result;\n        }\n\n        await this.#initialSync();\n\n        // Bootstrap enough runners to meet quorum\n        const running: Set<RunnerState> = new Set();\n        for (let i = 0; i < this.quorum; i++) {\n            this.#addRunner(running, req);\n        }\n\n        const result = await this.#waitForQuorum(running, req);\n\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n\n        return result;\n    }\n\n    async destroy(): Promise<void> {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}