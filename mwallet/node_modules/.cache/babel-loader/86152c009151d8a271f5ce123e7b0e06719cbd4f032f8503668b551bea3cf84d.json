{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport { assert, isHexString } from \"../utils/index.js\";\nfunction copy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport function getPollingSubscriber(provider, event) {\n  if (event === \"block\") {\n    return new PollingBlockSubscriber(provider);\n  }\n  if (isHexString(event, 32)) {\n    return new PollingTransactionSubscriber(provider, event);\n  }\n  assert(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getPollingSubscriber\",\n    info: {\n      event: event\n    }\n  });\n}\n// @TODO: refactor this\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _poller = /*#__PURE__*/new WeakMap();\nvar _interval = /*#__PURE__*/new WeakMap();\nvar _blockNumber = /*#__PURE__*/new WeakMap();\nvar _poll = /*#__PURE__*/new WeakSet();\nexport var PollingBlockSubscriber = /*#__PURE__*/function () {\n  function PollingBlockSubscriber(provider) {\n    _classCallCheck(this, PollingBlockSubscriber);\n    _classPrivateMethodInitSpec(this, _poll);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poller, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _interval, {\n      writable: true,\n      value: void 0\n    });\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    _classPrivateFieldInitSpec(this, _blockNumber, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _poller, null);\n    _classPrivateFieldSet(this, _interval, 4000);\n    _classPrivateFieldSet(this, _blockNumber, -2);\n  }\n  _createClass(PollingBlockSubscriber, [{\n    key: \"pollingInterval\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _interval);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _interval, value);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (_classPrivateFieldGet(this, _poller)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _poller, _classPrivateFieldGet(this, _provider)._setTimeout(_classPrivateMethodGet(this, _poll, _poll2).bind(this), _classPrivateFieldGet(this, _interval)));\n      _classPrivateMethodGet(this, _poll, _poll2).call(this);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!_classPrivateFieldGet(this, _poller)) {\n        return;\n      }\n      _classPrivateFieldGet(this, _provider)._clearTimeout(_classPrivateFieldGet(this, _poller));\n      _classPrivateFieldSet(this, _poller, null);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {\n      this.stop();\n      if (dropWhilePaused) {\n        _classPrivateFieldSet(this, _blockNumber, -2);\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.start();\n    }\n  }]);\n  return PollingBlockSubscriber;\n}();\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nfunction _poll2() {\n  return _poll9.apply(this, arguments);\n}\nfunction _poll9() {\n  _poll9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var blockNumber, b;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _classPrivateFieldGet(this, _provider).getBlockNumber();\n        case 3:\n          blockNumber = _context4.sent;\n          if (!(_classPrivateFieldGet(this, _blockNumber) === -2)) {\n            _context4.next = 7;\n            break;\n          }\n          _classPrivateFieldSet(this, _blockNumber, blockNumber);\n          return _context4.abrupt(\"return\");\n        case 7:\n          if (!(blockNumber !== _classPrivateFieldGet(this, _blockNumber))) {\n            _context4.next = 18;\n            break;\n          }\n          b = _classPrivateFieldGet(this, _blockNumber) + 1;\n        case 9:\n          if (!(b <= blockNumber)) {\n            _context4.next = 17;\n            break;\n          }\n          if (!(_classPrivateFieldGet(this, _poller) == null)) {\n            _context4.next = 12;\n            break;\n          }\n          return _context4.abrupt(\"return\");\n        case 12:\n          _context4.next = 14;\n          return _classPrivateFieldGet(this, _provider).emit(\"block\", b);\n        case 14:\n          b++;\n          _context4.next = 9;\n          break;\n        case 17:\n          _classPrivateFieldSet(this, _blockNumber, blockNumber);\n        case 18:\n          _context4.next = 22;\n          break;\n        case 20:\n          _context4.prev = 20;\n          _context4.t0 = _context4[\"catch\"](0);\n        case 22:\n          if (!(_classPrivateFieldGet(this, _poller) == null)) {\n            _context4.next = 24;\n            break;\n          }\n          return _context4.abrupt(\"return\");\n        case 24:\n          _classPrivateFieldSet(this, _poller, _classPrivateFieldGet(this, _provider)._setTimeout(_classPrivateMethodGet(this, _poll, _poll2).bind(this), _classPrivateFieldGet(this, _interval)));\n        case 25:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, this, [[0, 20]]);\n  }));\n  return _poll9.apply(this, arguments);\n}\nvar _provider2 = /*#__PURE__*/new WeakMap();\nvar _poll3 = /*#__PURE__*/new WeakMap();\nvar _running = /*#__PURE__*/new WeakMap();\nexport var OnBlockSubscriber = /*#__PURE__*/function () {\n  function OnBlockSubscriber(provider) {\n    var _this = this;\n    _classCallCheck(this, OnBlockSubscriber);\n    _classPrivateFieldInitSpec(this, _provider2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poll3, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _running, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider2, provider);\n    _classPrivateFieldSet(this, _running, false);\n    _classPrivateFieldSet(this, _poll3, function (blockNumber) {\n      _this._poll(blockNumber, _classPrivateFieldGet(_this, _provider2));\n    });\n  }\n  _createClass(OnBlockSubscriber, [{\n    key: \"_poll\",\n    value: function () {\n      var _poll4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blockNumber, provider) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error(\"sub-classes must override this\");\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function _poll(_x, _x2) {\n        return _poll4.apply(this, arguments);\n      }\n      return _poll;\n    }()\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (_classPrivateFieldGet(this, _running)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running, true);\n      _classPrivateFieldGet(this, _poll3).call(this, -2);\n      _classPrivateFieldGet(this, _provider2).on(\"block\", _classPrivateFieldGet(this, _poll3));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!_classPrivateFieldGet(this, _running)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running, false);\n      _classPrivateFieldGet(this, _provider2).off(\"block\", _classPrivateFieldGet(this, _poll3));\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {\n      this.stop();\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.start();\n    }\n  }]);\n  return OnBlockSubscriber;\n}();\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _filter = /*#__PURE__*/new WeakMap();\nexport var PollingOrphanSubscriber = /*#__PURE__*/function (_OnBlockSubscriber) {\n  _inherits(PollingOrphanSubscriber, _OnBlockSubscriber);\n  var _super = _createSuper(PollingOrphanSubscriber);\n  function PollingOrphanSubscriber(provider, filter) {\n    var _this2;\n    _classCallCheck(this, PollingOrphanSubscriber);\n    _this2 = _super.call(this, provider);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this2), _filter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this2), _filter, copy(filter));\n    return _this2;\n  }\n  _createClass(PollingOrphanSubscriber, [{\n    key: \"_poll\",\n    value: function () {\n      var _poll5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(blockNumber, provider) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new Error(\"@TODO\");\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _poll(_x3, _x4) {\n        return _poll5.apply(this, arguments);\n      }\n      return _poll;\n    }()\n  }]);\n  return PollingOrphanSubscriber;\n}(OnBlockSubscriber);\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _hash = /*#__PURE__*/new WeakMap();\nexport var PollingTransactionSubscriber = /*#__PURE__*/function (_OnBlockSubscriber2) {\n  _inherits(PollingTransactionSubscriber, _OnBlockSubscriber2);\n  var _super2 = _createSuper(PollingTransactionSubscriber);\n  function PollingTransactionSubscriber(provider, hash) {\n    var _this3;\n    _classCallCheck(this, PollingTransactionSubscriber);\n    _this3 = _super2.call(this, provider);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this3), _hash, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this3), _hash, hash);\n    return _this3;\n  }\n  _createClass(PollingTransactionSubscriber, [{\n    key: \"_poll\",\n    value: function () {\n      var _poll6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(blockNumber, provider) {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return provider.getTransactionReceipt(_classPrivateFieldGet(this, _hash));\n            case 2:\n              tx = _context3.sent;\n              if (tx) {\n                provider.emit(_classPrivateFieldGet(this, _hash), tx);\n              }\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _poll(_x5, _x6) {\n        return _poll6.apply(this, arguments);\n      }\n      return _poll;\n    }()\n  }]);\n  return PollingTransactionSubscriber;\n}(OnBlockSubscriber);\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider3 = /*#__PURE__*/new WeakMap();\nvar _filter2 = /*#__PURE__*/new WeakMap();\nvar _poller2 = /*#__PURE__*/new WeakMap();\nvar _running2 = /*#__PURE__*/new WeakMap();\nvar _blockNumber2 = /*#__PURE__*/new WeakMap();\nvar _poll7 = /*#__PURE__*/new WeakSet();\nexport var PollingEventSubscriber = /*#__PURE__*/function () {\n  function PollingEventSubscriber(provider, _filter3) {\n    _classCallCheck(this, PollingEventSubscriber);\n    _classPrivateMethodInitSpec(this, _poll7);\n    _classPrivateFieldInitSpec(this, _provider3, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filter2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poller2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _running2, {\n      writable: true,\n      value: void 0\n    });\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    _classPrivateFieldInitSpec(this, _blockNumber2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider3, provider);\n    _classPrivateFieldSet(this, _filter2, copy(_filter3));\n    _classPrivateFieldSet(this, _poller2, _classPrivateMethodGet(this, _poll7, _poll8).bind(this));\n    _classPrivateFieldSet(this, _running2, false);\n    _classPrivateFieldSet(this, _blockNumber2, -2);\n  }\n  _createClass(PollingEventSubscriber, [{\n    key: \"start\",\n    value: function start() {\n      var _this4 = this;\n      if (_classPrivateFieldGet(this, _running2)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running2, true);\n      if (_classPrivateFieldGet(this, _blockNumber2) === -2) {\n        _classPrivateFieldGet(this, _provider3).getBlockNumber().then(function (blockNumber) {\n          _classPrivateFieldSet(_this4, _blockNumber2, blockNumber);\n        });\n      }\n      _classPrivateFieldGet(this, _provider3).on(\"block\", _classPrivateFieldGet(this, _poller2));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!_classPrivateFieldGet(this, _running2)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _running2, false);\n      _classPrivateFieldGet(this, _provider3).off(\"block\", _classPrivateFieldGet(this, _poller2));\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {\n      this.stop();\n      if (dropWhilePaused) {\n        _classPrivateFieldSet(this, _blockNumber2, -2);\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.start();\n    }\n  }]);\n  return PollingEventSubscriber;\n}();\nfunction _poll8(_x7) {\n  return _poll10.apply(this, arguments);\n}\nfunction _poll10() {\n  _poll10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(blockNumber) {\n    var filter, logs, _iterator, _step, log;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(_classPrivateFieldGet(this, _blockNumber2) === -2)) {\n            _context5.next = 2;\n            break;\n          }\n          return _context5.abrupt(\"return\");\n        case 2:\n          filter = copy(_classPrivateFieldGet(this, _filter2));\n          filter.fromBlock = _classPrivateFieldGet(this, _blockNumber2) + 1;\n          filter.toBlock = blockNumber;\n          _context5.next = 7;\n          return _classPrivateFieldGet(this, _provider3).getLogs(filter);\n        case 7:\n          logs = _context5.sent;\n          if (!(logs.length === 0)) {\n            _context5.next = 11;\n            break;\n          }\n          if (_classPrivateFieldGet(this, _blockNumber2) < blockNumber - 60) {\n            _classPrivateFieldSet(this, _blockNumber2, blockNumber - 60);\n          }\n          return _context5.abrupt(\"return\");\n        case 11:\n          _classPrivateFieldSet(this, _blockNumber2, blockNumber);\n          _iterator = _createForOfIteratorHelper(logs);\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              log = _step.value;\n              _classPrivateFieldGet(this, _provider3).emit(_classPrivateFieldGet(this, _filter2), log);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, this);\n  }));\n  return _poll10.apply(this, arguments);\n}","map":{"version":3,"names":["assert","isHexString","copy","obj","JSON","parse","stringify","getPollingSubscriber","provider","event","PollingBlockSubscriber","PollingTransactionSubscriber","operation","info","_provider","WeakMap","_poller","_interval","_blockNumber","_poll","WeakSet","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","_createClass","key","get","_classPrivateFieldGet","set","start","_setTimeout","_classPrivateMethodGet","_poll2","bind","call","stop","_clearTimeout","pause","dropWhilePaused","resume","_poll9","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","blockNumber","b","wrap","_callee4$","_context4","prev","next","getBlockNumber","sent","abrupt","emit","t0","_provider2","_poll3","_running","OnBlockSubscriber","_this","_poll4","_callee","_callee$","_context","Error","_x","_x2","on","off","_filter","PollingOrphanSubscriber","_OnBlockSubscriber","_inherits","_super","_createSuper","filter","_this2","_assertThisInitialized","_poll5","_callee2","_callee2$","_context2","_x3","_x4","_hash","_OnBlockSubscriber2","_super2","hash","_this3","_poll6","_callee3","tx","_callee3$","_context3","getTransactionReceipt","_x5","_x6","_provider3","_filter2","_poller2","_running2","_blockNumber2","_poll7","PollingEventSubscriber","_poll8","_this4","then","_x7","_poll10","_callee5","logs","_iterator","_step","log","_callee5$","_context5","fromBlock","toBlock","getLogs","length","_createForOfIteratorHelper","s","n","done","err","e","f"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\subscriber-polling.ts"],"sourcesContent":["import { assert, isHexString } from \"../utils/index.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { EventFilter, OrphanFilter, ProviderEvent } from \"./provider.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport function getPollingSubscriber(provider: AbstractProvider, event: ProviderEvent): Subscriber {\n    if (event === \"block\") { return new PollingBlockSubscriber(provider); }\n    if (isHexString(event, 32)) { return new PollingTransactionSubscriber(provider, event); }\n\n    assert(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\", info: { event }\n    });\n}\n\n// @TODO: refactor this\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poller: null | number;\n\n    #interval: number;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#poller = null;\n        this.#interval = 4000;\n\n        this.#blockNumber = -2;\n    }\n\n    get pollingInterval(): number { return this.#interval; }\n    set pollingInterval(value: number) { this.#interval = value; }\n\n    async #poll(): Promise<void> {\n        try {\n            const blockNumber = await this.#provider.getBlockNumber();\n\n            // Bootstrap poll to setup our initial block number\n            if (this.#blockNumber === -2) {\n                this.#blockNumber = blockNumber;\n                return;\n            }\n\n            // @TODO: Put a cap on the maximum number of events per loop?\n\n            if (blockNumber !== this.#blockNumber) {\n                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {\n                    // We have been stopped\n                    if (this.#poller == null) { return; }\n\n                    await this.#provider.emit(\"block\", b);\n                }\n\n                this.#blockNumber = blockNumber;\n            }\n\n        } catch (error) {\n            // @TODO: Minor bump, add an \"error\" event to let subscribers\n            //        know things went awry.\n            //console.log(error);\n        }\n\n        // We have been stopped\n        if (this.#poller == null) { return; }\n\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n    }\n\n    start(): void {\n        if (this.#poller) { return; }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        this.#poll();\n    }\n\n    stop(): void {\n        if (!this.#poller) { return; }\n        this.#provider._clearTimeout(this.#poller);\n        this.#poller = null;\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class OnBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poll: (b: number) => void;\n    #running: boolean;\n\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#running = false;\n        this.#poll = (blockNumber: number) => {\n            this._poll(blockNumber, this.#provider);\n        }\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n        this.#provider.on(\"block\", this.#poll);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poll);\n    }\n\n    pause(dropWhilePaused?: boolean): void { this.stop(); }\n    resume(): void { this.start(); }\n}\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingOrphanSubscriber extends OnBlockSubscriber {\n    #filter: OrphanFilter;\n\n    constructor(provider: AbstractProvider, filter: OrphanFilter) {\n        super(provider);\n        this.#filter = copy(filter);\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"@TODO\");\n        console.log(this.#filter);\n    }\n}\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingTransactionSubscriber extends OnBlockSubscriber {\n    #hash: string;\n\n    constructor(provider: AbstractProvider, hash: string) {\n        super(provider);\n        this.#hash = hash;\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        const tx = await provider.getTransactionReceipt(this.#hash);\n        if (tx) { provider.emit(this.#hash, tx); }\n    }\n}\n\n/**\n *  @TODO\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingEventSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #filter: EventFilter;\n    #poller: (b: number) => void;\n\n    #running: boolean;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    constructor(provider: AbstractProvider, filter: EventFilter) {\n        this.#provider = provider;\n        this.#filter = copy(filter);\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#blockNumber = -2;\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        // The initial block hasn't been determined yet\n        if (this.#blockNumber === -2) { return; }\n\n        const filter = copy(this.#filter);\n        filter.fromBlock = this.#blockNumber + 1;\n        filter.toBlock = blockNumber;\n        const logs = await this.#provider.getLogs(filter);\n\n        // No logs could just mean the node has not indexed them yet,\n        // so we keep a sliding window of 60 blocks to keep scanning\n        if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n                this.#blockNumber = blockNumber - 60;\n            }\n            return;\n        }\n\n        this.#blockNumber = blockNumber;\n\n        for (const log of logs) {\n            this.#provider.emit(this.#filter, log);\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber) => {\n                this.#blockNumber = blockNumber;\n            });\n        }\n        this.#provider.on(\"block\", this.#poller);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}