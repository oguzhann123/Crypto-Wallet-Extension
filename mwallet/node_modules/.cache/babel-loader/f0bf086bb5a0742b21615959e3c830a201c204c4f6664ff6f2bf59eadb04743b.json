{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Oguzhan/Desktop/BlockGuard/mwallet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _Symbol$iterator, _Symbol$iterator2;\n//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nvar BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return value;\n}\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport var FeeData = /*#__PURE__*/function () {\n  /**\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n   *  %%maxPriorityFeePerGas%%.\n   */\n  function FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    _classCallCheck(this, FeeData);\n    /**\n     *  The gas price for legacy networks.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    defineProperties(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  _createClass(FeeData, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var gasPrice = this.gasPrice,\n        maxFeePerGas = this.maxFeePerGas,\n        maxPriorityFeePerGas = this.maxPriorityFeePerGas;\n      return {\n        _type: \"FeeData\",\n        gasPrice: toJson(gasPrice),\n        maxFeePerGas: toJson(maxFeePerGas),\n        maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n      };\n    }\n  }]);\n  return FeeData;\n}();\n;\nexport function copyRequest(req) {\n  var result = {};\n  // These could be addresses, ENS names or Addressables\n  if (req.to) {\n    result.to = req.to;\n  }\n  if (req.from) {\n    result.from = req.from;\n  }\n  if (req.data) {\n    result.data = hexlify(req.data);\n  }\n  var bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n  var _iterator = _createForOfIteratorHelper(bigIntKeys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (!(key in req) || req[key] == null) {\n        continue;\n      }\n      result[key] = getBigInt(req[key], \"request.\".concat(key));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var numberKeys = \"type,nonce\".split(/,/);\n  var _iterator2 = _createForOfIteratorHelper(numberKeys),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _key = _step2.value;\n      if (!(_key in req) || req[_key] == null) {\n        continue;\n      }\n      result[_key] = getNumber(req[_key], \"request.\".concat(_key));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (req.accessList) {\n    result.accessList = accessListify(req.accessList);\n  }\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipReadEnabled = !!req.enableCcipRead;\n  }\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n  return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nvar _transactions = /*#__PURE__*/new WeakMap();\n_Symbol$iterator = Symbol.iterator;\nexport var Block = /*#__PURE__*/function () {\n  /**\n   *  Create a new **Block** object.\n   *\n   *  This should generally not be necessary as the unless implementing a\n   *  low-level library.\n   */\n  function Block(block, provider) {\n    _classCallCheck(this, Block);\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    _defineProperty(this, \"number\", void 0);\n    /**\n     *  The block hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    _defineProperty(this, \"timestamp\", void 0);\n    /**\n     *  The block hash of the parent block.\n     */\n    _defineProperty(this, \"parentHash\", void 0);\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    _defineProperty(this, \"difficulty\", void 0);\n    /**\n     *  The total gas limit for this block.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The total gas used in this block.\n     */\n    _defineProperty(this, \"gasUsed\", void 0);\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    _defineProperty(this, \"miner\", void 0);\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    _defineProperty(this, \"extraData\", void 0);\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    _defineProperty(this, \"baseFeePerGas\", void 0);\n    _classPrivateFieldInitSpec(this, _transactions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _transactions, block.transactions.map(function (tx) {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n      return tx;\n    }));\n    defineProperties(this, {\n      provider: provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\n   *  Returns the list of transaction hashes.\n   */\n  _createClass(Block, [{\n    key: \"transactions\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _transactions).map(function (tx) {\n        if (typeof tx === \"string\") {\n          return tx;\n        }\n        return tx.hash;\n      });\n    }\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[provider_getBlock]].\n     */\n  }, {\n    key: \"prefetchedTransactions\",\n    get: function get() {\n      var txs = _classPrivateFieldGet(this, _transactions).slice();\n      // Doesn't matter...\n      if (txs.length === 0) {\n        return [];\n      }\n      // Make sure we prefetched the transactions\n      assert(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"transactionResponses()\"\n      });\n      return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var baseFeePerGas = this.baseFeePerGas,\n        difficulty = this.difficulty,\n        extraData = this.extraData,\n        gasLimit = this.gasLimit,\n        gasUsed = this.gasUsed,\n        hash = this.hash,\n        miner = this.miner,\n        nonce = this.nonce,\n        number = this.number,\n        parentHash = this.parentHash,\n        timestamp = this.timestamp,\n        transactions = this.transactions;\n      return {\n        _type: \"Block\",\n        baseFeePerGas: toJson(baseFeePerGas),\n        difficulty: toJson(difficulty),\n        extraData: extraData,\n        gasLimit: toJson(gasLimit),\n        gasUsed: toJson(gasUsed),\n        hash: hash,\n        miner: miner,\n        nonce: nonce,\n        number: number,\n        parentHash: parentHash,\n        timestamp: timestamp,\n        transactions: transactions\n      };\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      var _this = this;\n      var index = 0;\n      var txs = this.transactions;\n      return {\n        next: function next() {\n          if (index < _this.length) {\n            return {\n              value: txs[index++],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n  }, {\n    key: \"length\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _transactions).length;\n    }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n  }, {\n    key: \"date\",\n    get: function get() {\n      if (this.timestamp == null) {\n        return null;\n      }\n      return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(indexOrHash) {\n        var tx, hash, _iterator3, _step3, v;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Find the internal value by its index or hash\n              tx = undefined;\n              if (!(typeof indexOrHash === \"number\")) {\n                _context.next = 5;\n                break;\n              }\n              tx = _classPrivateFieldGet(this, _transactions)[indexOrHash];\n              _context.next = 32;\n              break;\n            case 5:\n              hash = indexOrHash.toLowerCase();\n              _iterator3 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _transactions));\n              _context.prev = 7;\n              _iterator3.s();\n            case 9:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 24;\n                break;\n              }\n              v = _step3.value;\n              if (!(typeof v === \"string\")) {\n                _context.next = 18;\n                break;\n              }\n              if (!(v !== hash)) {\n                _context.next = 14;\n                break;\n              }\n              return _context.abrupt(\"continue\", 22);\n            case 14:\n              tx = v;\n              return _context.abrupt(\"break\", 24);\n            case 18:\n              if (!(v.hash === hash)) {\n                _context.next = 20;\n                break;\n              }\n              return _context.abrupt(\"continue\", 22);\n            case 20:\n              tx = v;\n              return _context.abrupt(\"break\", 24);\n            case 22:\n              _context.next = 9;\n              break;\n            case 24:\n              _context.next = 29;\n              break;\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](7);\n              _iterator3.e(_context.t0);\n            case 29:\n              _context.prev = 29;\n              _iterator3.f();\n              return _context.finish(29);\n            case 32:\n              if (!(tx == null)) {\n                _context.next = 34;\n                break;\n              }\n              throw new Error(\"no such tx\");\n            case 34:\n              if (!(typeof tx === \"string\")) {\n                _context.next = 40;\n                break;\n              }\n              _context.next = 37;\n              return this.provider.getTransaction(tx);\n            case 37:\n              return _context.abrupt(\"return\", _context.sent);\n            case 40:\n              return _context.abrupt(\"return\", tx);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[7, 26, 29, 32]]);\n      }));\n      function getTransaction(_x) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n  }, {\n    key: \"getPrefetchedTransaction\",\n    value: function getPrefetchedTransaction(indexOrHash) {\n      var txs = this.prefetchedTransactions;\n      if (typeof indexOrHash === \"number\") {\n        return txs[indexOrHash];\n      }\n      indexOrHash = indexOrHash.toLowerCase();\n      var _iterator4 = _createForOfIteratorHelper(txs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tx = _step4.value;\n          if (tx.hash === indexOrHash) {\n            return tx;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Has this block been mined.\n     *\n     *  If true, the block has been typed-gaurded that all mined\n     *  properties are non-null.\n     */\n  }, {\n    key: \"isMined\",\n    value: function isMined() {\n      return !!this.hash;\n    }\n    /**\n     *\n     */\n  }, {\n    key: \"isLondon\",\n    value: function isLondon() {\n      return !!this.baseFeePerGas;\n    }\n  }, {\n    key: \"orphanedEvent\",\n    value: function orphanedEvent() {\n      if (!this.isMined()) {\n        throw new Error(\"\");\n      }\n      return createOrphanedBlockFilter(this);\n    }\n  }]);\n  return Block;\n}();\n//////////////////////\n// Log\nexport var Log = /*#__PURE__*/function () {\n  function Log(log, provider) {\n    _classCallCheck(this, Log);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"transactionHash\", void 0);\n    _defineProperty(this, \"blockHash\", void 0);\n    _defineProperty(this, \"blockNumber\", void 0);\n    _defineProperty(this, \"removed\", void 0);\n    _defineProperty(this, \"address\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"topics\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"transactionIndex\", void 0);\n    this.provider = provider;\n    var topics = Object.freeze(log.topics.slice());\n    defineProperties(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics: topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n  _createClass(Log, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var address = this.address,\n        blockHash = this.blockHash,\n        blockNumber = this.blockNumber,\n        data = this.data,\n        index = this.index,\n        removed = this.removed,\n        topics = this.topics,\n        transactionHash = this.transactionHash,\n        transactionIndex = this.transactionIndex;\n      return {\n        _type: \"log\",\n        address: address,\n        blockHash: blockHash,\n        blockNumber: blockNumber,\n        data: data,\n        index: index,\n        removed: removed,\n        topics: topics,\n        transactionHash: transactionHash,\n        transactionIndex: transactionIndex\n      };\n    }\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.provider.getBlock(this.blockHash);\n            case 2:\n              block = _context2.sent;\n              assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n              return _context2.abrupt(\"return\", block);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getBlock() {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.provider.getTransaction(this.transactionHash);\n            case 2:\n              tx = _context3.sent;\n              assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n              return _context3.abrupt(\"return\", tx);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getTransaction() {\n        return _getTransaction2.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function () {\n      var _getTransactionReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.provider.getTransactionReceipt(this.transactionHash);\n            case 2:\n              receipt = _context4.sent;\n              assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n              return _context4.abrupt(\"return\", receipt);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getTransactionReceipt() {\n        return _getTransactionReceipt.apply(this, arguments);\n      }\n      return getTransactionReceipt;\n    }()\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      return createRemovedLogFilter(this);\n    }\n  }]);\n  return Log;\n}();\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\nvar _logs = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nexport var TransactionReceipt = /*#__PURE__*/function () {\n  function TransactionReceipt(tx, provider) {\n    _classCallCheck(this, TransactionReceipt);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"to\", void 0);\n    _defineProperty(this, \"from\", void 0);\n    _defineProperty(this, \"contractAddress\", void 0);\n    _defineProperty(this, \"hash\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"blockHash\", void 0);\n    _defineProperty(this, \"blockNumber\", void 0);\n    _defineProperty(this, \"logsBloom\", void 0);\n    _defineProperty(this, \"gasUsed\", void 0);\n    _defineProperty(this, \"cumulativeGasUsed\", void 0);\n    _defineProperty(this, \"gasPrice\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    //readonly byzantium!: boolean;\n    _defineProperty(this, \"status\", void 0);\n    _defineProperty(this, \"root\", void 0);\n    _classPrivateFieldInitSpec(this, _logs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logs, Object.freeze(tx.logs.map(function (log) {\n      return new Log(log, provider);\n    })));\n    defineProperties(this, {\n      provider: provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice: tx.effectiveGasPrice || tx.gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n  _createClass(TransactionReceipt, [{\n    key: \"logs\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _logs);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var to = this.to,\n        from = this.from,\n        contractAddress = this.contractAddress,\n        hash = this.hash,\n        index = this.index,\n        blockHash = this.blockHash,\n        blockNumber = this.blockNumber,\n        logsBloom = this.logsBloom,\n        logs = this.logs,\n        status = this.status,\n        root = this.root;\n      return {\n        _type: \"TransactionReceipt\",\n        blockHash: blockHash,\n        blockNumber: blockNumber,\n        //byzantium, \n        contractAddress: contractAddress,\n        cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n        from: from,\n        gasPrice: toJson(this.gasPrice),\n        gasUsed: toJson(this.gasUsed),\n        hash: hash,\n        index: index,\n        logs: logs,\n        logsBloom: logsBloom,\n        root: root,\n        status: status,\n        to: to\n      };\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.logs.length;\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      var _this2 = this;\n      var index = 0;\n      return {\n        next: function next() {\n          if (index < _this2.length) {\n            return {\n              value: _this2.logs[index++],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n  }, {\n    key: \"fee\",\n    get: function get() {\n      return this.gasUsed * this.gasPrice;\n    }\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.provider.getBlock(this.blockHash);\n            case 2:\n              block = _context5.sent;\n              if (!(block == null)) {\n                _context5.next = 5;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 5:\n              return _context5.abrupt(\"return\", block);\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getBlock() {\n        return _getBlock2.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.provider.getTransaction(this.hash);\n            case 2:\n              tx = _context6.sent;\n              if (!(tx == null)) {\n                _context6.next = 5;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 5:\n              return _context6.abrupt(\"return\", tx);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getTransaction() {\n        return _getTransaction3.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n  }, {\n    key: \"getResult\",\n    value: function () {\n      var _getResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.provider.getTransactionResult(this.hash);\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getResult() {\n        return _getResult.apply(this, arguments);\n      }\n      return getResult;\n    }()\n  }, {\n    key: \"confirmations\",\n    value: function () {\n      var _confirmations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.provider.getBlockNumber();\n            case 2:\n              _context8.t0 = _context8.sent;\n              _context8.t1 = this.blockNumber;\n              _context8.t2 = _context8.t0 - _context8.t1;\n              return _context8.abrupt(\"return\", _context8.t2 + 1);\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function confirmations() {\n        return _confirmations.apply(this, arguments);\n      }\n      return confirmations;\n    }()\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      return createRemovedTransactionFilter(this);\n    }\n  }, {\n    key: \"reorderedEvent\",\n    value: function reorderedEvent(other) {\n      assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"reorderedEvent(other)\"\n      });\n      return createReorderedTransactionFilter(this, other);\n    }\n  }]);\n  return TransactionReceipt;\n}();\n/*\nexport type ReplacementDetectionSetup = {\n    to: string;\n    from: string;\n    value: bigint;\n    data: string;\n    nonce: number;\n    block: number;\n};\n*/\nvar _startBlock = /*#__PURE__*/new WeakMap();\nexport var TransactionResponse = /*#__PURE__*/function () {\n  /**\n   *  Create a new TransactionResponse with %%tx%% parameters\n   *  connected to %%provider%%.\n   */\n  function TransactionResponse(tx, provider) {\n    _classCallCheck(this, TransactionResponse);\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The transaction hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    _defineProperty(this, \"to\", void 0);\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    _defineProperty(this, \"from\", void 0);\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The data.\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    _defineProperty(this, \"value\", void 0);\n    /**\n     *  The chain ID.\n     */\n    _defineProperty(this, \"chainId\", void 0);\n    /**\n     *  The signature.\n     */\n    _defineProperty(this, \"signature\", void 0);\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    _defineProperty(this, \"accessList\", void 0);\n    _classPrivateFieldInitSpec(this, _startBlock, {\n      writable: true,\n      value: void 0\n    });\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    _classPrivateFieldSet(this, _startBlock, -1);\n  }\n  /**\n   *  Returns a JSON representation of this transaction.\n   */\n  _createClass(TransactionResponse, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var blockNumber = this.blockNumber,\n        blockHash = this.blockHash,\n        index = this.index,\n        hash = this.hash,\n        type = this.type,\n        to = this.to,\n        from = this.from,\n        nonce = this.nonce,\n        data = this.data,\n        signature = this.signature,\n        accessList = this.accessList;\n      return {\n        _type: \"TransactionReceipt\",\n        accessList: accessList,\n        blockNumber: blockNumber,\n        blockHash: blockHash,\n        chainId: toJson(this.chainId),\n        data: data,\n        from: from,\n        gasLimit: toJson(this.gasLimit),\n        gasPrice: toJson(this.gasPrice),\n        hash: hash,\n        maxFeePerGas: toJson(this.maxFeePerGas),\n        maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n        nonce: nonce,\n        signature: signature,\n        to: to,\n        index: index,\n        type: type,\n        value: toJson(this.value)\n      };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var blockNumber, tx, block;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              blockNumber = this.blockNumber;\n              if (!(blockNumber == null)) {\n                _context9.next = 6;\n                break;\n              }\n              _context9.next = 4;\n              return this.getTransaction();\n            case 4:\n              tx = _context9.sent;\n              if (tx) {\n                blockNumber = tx.blockNumber;\n              }\n            case 6:\n              if (!(blockNumber == null)) {\n                _context9.next = 8;\n                break;\n              }\n              return _context9.abrupt(\"return\", null);\n            case 8:\n              block = this.provider.getBlock(blockNumber);\n              if (!(block == null)) {\n                _context9.next = 11;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 11:\n              return _context9.abrupt(\"return\", block);\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getBlock() {\n        return _getBlock3.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", this.provider.getTransaction(this.hash));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getTransaction() {\n        return _getTransaction4.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n  }, {\n    key: \"wait\",\n    value: function () {\n      var _wait = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_confirms, _timeout) {\n        var _this3 = this;\n        var confirms, timeout, startBlock, nextScan, stopScanning, checkReplacement, receipt, waiter;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              confirms = _confirms == null ? 1 : _confirms;\n              timeout = _timeout == null ? 0 : _timeout;\n              startBlock = _classPrivateFieldGet(this, _startBlock);\n              nextScan = -1;\n              stopScanning = startBlock === -1 ? true : false;\n              checkReplacement = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n                  var _yield$resolvePropert, blockNumber, nonce, mined, block, _iterator5, _step5, hash, i, tx, _receipt, reason;\n                  return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                    while (1) switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!stopScanning) {\n                          _context11.next = 2;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\", null);\n                      case 2:\n                        _context11.next = 4;\n                        return resolveProperties({\n                          blockNumber: _this3.provider.getBlockNumber(),\n                          nonce: _this3.provider.getTransactionCount(_this3.from)\n                        });\n                      case 4:\n                        _yield$resolvePropert = _context11.sent;\n                        blockNumber = _yield$resolvePropert.blockNumber;\n                        nonce = _yield$resolvePropert.nonce;\n                        if (!(nonce < _this3.nonce)) {\n                          _context11.next = 10;\n                          break;\n                        }\n                        startBlock = blockNumber;\n                        return _context11.abrupt(\"return\");\n                      case 10:\n                        if (!stopScanning) {\n                          _context11.next = 12;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\", null);\n                      case 12:\n                        _context11.next = 14;\n                        return _this3.getTransaction();\n                      case 14:\n                        mined = _context11.sent;\n                        if (!(mined && mined.blockNumber != null)) {\n                          _context11.next = 17;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\");\n                      case 17:\n                        // We were replaced; start scanning for that transaction\n                        // Starting to scan; look back a few extra blocks for safety\n                        if (nextScan === -1) {\n                          nextScan = startBlock - 3;\n                          if (nextScan < _classPrivateFieldGet(_this3, _startBlock)) {\n                            nextScan = _classPrivateFieldGet(_this3, _startBlock);\n                          }\n                        }\n                      case 18:\n                        if (!(nextScan <= blockNumber)) {\n                          _context11.next = 67;\n                          break;\n                        }\n                        if (!stopScanning) {\n                          _context11.next = 21;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\", null);\n                      case 21:\n                        _context11.next = 23;\n                        return _this3.provider.getBlock(nextScan, true);\n                      case 23:\n                        block = _context11.sent;\n                        if (!(block == null)) {\n                          _context11.next = 26;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\");\n                      case 26:\n                        // We were mined; no replacement\n                        _iterator5 = _createForOfIteratorHelper(block);\n                        _context11.prev = 27;\n                        _iterator5.s();\n                      case 29:\n                        if ((_step5 = _iterator5.n()).done) {\n                          _context11.next = 35;\n                          break;\n                        }\n                        hash = _step5.value;\n                        if (!(hash === _this3.hash)) {\n                          _context11.next = 33;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\");\n                      case 33:\n                        _context11.next = 29;\n                        break;\n                      case 35:\n                        _context11.next = 40;\n                        break;\n                      case 37:\n                        _context11.prev = 37;\n                        _context11.t0 = _context11[\"catch\"](27);\n                        _iterator5.e(_context11.t0);\n                      case 40:\n                        _context11.prev = 40;\n                        _iterator5.f();\n                        return _context11.finish(40);\n                      case 43:\n                        i = 0;\n                      case 44:\n                        if (!(i < block.length)) {\n                          _context11.next = 64;\n                          break;\n                        }\n                        _context11.next = 47;\n                        return block.getTransaction(i);\n                      case 47:\n                        tx = _context11.sent;\n                        if (!(tx.from === _this3.from && tx.nonce === _this3.nonce)) {\n                          _context11.next = 61;\n                          break;\n                        }\n                        if (!stopScanning) {\n                          _context11.next = 51;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\", null);\n                      case 51:\n                        _context11.next = 53;\n                        return _this3.provider.getTransactionReceipt(tx.hash);\n                      case 53:\n                        _receipt = _context11.sent;\n                        if (!(_receipt == null)) {\n                          _context11.next = 56;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\");\n                      case 56:\n                        if (!(blockNumber - _receipt.blockNumber + 1 < confirms)) {\n                          _context11.next = 58;\n                          break;\n                        }\n                        return _context11.abrupt(\"return\");\n                      case 58:\n                        // The reason we were replaced\n                        reason = \"replaced\";\n                        if (tx.data === _this3.data && tx.to === _this3.to && tx.value === _this3.value) {\n                          reason = \"repriced\";\n                        } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                          reason = \"cancelled\";\n                        }\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                          cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                          reason: reason,\n                          replacement: tx.replaceableTransaction(startBlock),\n                          hash: tx.hash,\n                          receipt: _receipt\n                        });\n                      case 61:\n                        i++;\n                        _context11.next = 44;\n                        break;\n                      case 64:\n                        nextScan++;\n                        _context11.next = 18;\n                        break;\n                      case 67:\n                        return _context11.abrupt(\"return\");\n                      case 68:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }, _callee11, null, [[27, 37, 40, 43]]);\n                }));\n                return function checkReplacement() {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              _context14.next = 8;\n              return this.provider.getTransactionReceipt(this.hash);\n            case 8:\n              receipt = _context14.sent;\n              if (!receipt) {\n                _context14.next = 18;\n                break;\n              }\n              _context14.next = 12;\n              return receipt.confirmations();\n            case 12:\n              _context14.t0 = _context14.sent;\n              _context14.t1 = confirms;\n              if (!(_context14.t0 >= _context14.t1)) {\n                _context14.next = 16;\n                break;\n              }\n              return _context14.abrupt(\"return\", receipt);\n            case 16:\n              _context14.next = 22;\n              break;\n            case 18:\n              _context14.next = 20;\n              return checkReplacement();\n            case 20:\n              if (!(confirms === 0)) {\n                _context14.next = 22;\n                break;\n              }\n              return _context14.abrupt(\"return\", null);\n            case 22:\n              waiter = new Promise(function (resolve, reject) {\n                // List of things to cancel when we have a result (one way or the other)\n                var cancellers = [];\n                var cancel = function cancel() {\n                  cancellers.forEach(function (c) {\n                    return c();\n                  });\n                };\n                // On cancel, stop scanning for replacements\n                cancellers.push(function () {\n                  stopScanning = true;\n                });\n                // Set up any timeout requested\n                if (timeout > 0) {\n                  var timer = setTimeout(function () {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                  }, timeout);\n                  cancellers.push(function () {\n                    clearTimeout(timer);\n                  });\n                }\n                var txListener = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(receipt) {\n                    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                      while (1) switch (_context12.prev = _context12.next) {\n                        case 0:\n                          _context12.next = 2;\n                          return receipt.confirmations();\n                        case 2:\n                          _context12.t0 = _context12.sent;\n                          _context12.t1 = confirms;\n                          if (!(_context12.t0 >= _context12.t1)) {\n                            _context12.next = 7;\n                            break;\n                          }\n                          cancel();\n                          resolve(receipt);\n                        case 7:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }, _callee12);\n                  }));\n                  return function txListener(_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n                cancellers.push(function () {\n                  _this3.provider.off(_this3.hash, txListener);\n                });\n                _this3.provider.on(_this3.hash, txListener);\n                // We support replacement detection; start checking\n                if (startBlock >= 0) {\n                  var replaceListener = /*#__PURE__*/function () {\n                    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n                      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                        while (1) switch (_context13.prev = _context13.next) {\n                          case 0:\n                            _context13.prev = 0;\n                            _context13.next = 3;\n                            return checkReplacement();\n                          case 3:\n                            _context13.next = 11;\n                            break;\n                          case 5:\n                            _context13.prev = 5;\n                            _context13.t0 = _context13[\"catch\"](0);\n                            if (!isError(_context13.t0, \"TRANSACTION_REPLACED\")) {\n                              _context13.next = 11;\n                              break;\n                            }\n                            cancel();\n                            reject(_context13.t0);\n                            return _context13.abrupt(\"return\");\n                          case 11:\n                            // Rescheudle a check on the next block\n                            if (!stopScanning) {\n                              _this3.provider.once(\"block\", replaceListener);\n                            }\n                          case 12:\n                          case \"end\":\n                            return _context13.stop();\n                        }\n                      }, _callee13, null, [[0, 5]]);\n                    }));\n                    return function replaceListener() {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }();\n                  cancellers.push(function () {\n                    _this3.provider.off(\"block\", replaceListener);\n                  });\n                  _this3.provider.once(\"block\", replaceListener);\n                }\n              });\n              _context14.next = 25;\n              return waiter;\n            case 25:\n              return _context14.abrupt(\"return\", _context14.sent);\n            case 26:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function wait(_x2, _x3) {\n        return _wait.apply(this, arguments);\n      }\n      return wait;\n    }()\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n  }, {\n    key: \"isMined\",\n    value: function isMined() {\n      return this.blockHash != null;\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isLegacy\",\n    value: function isLegacy() {\n      return this.type === 0;\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isBerlin\",\n    value: function isBerlin() {\n      return this.type === 1;\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isLondon\",\n    value: function isLondon() {\n      return this.type === 2;\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n  }, {\n    key: \"reorderedEvent\",\n    value: function reorderedEvent(other) {\n      assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n  }, {\n    key: \"replaceableTransaction\",\n    value: function replaceableTransaction(startBlock) {\n      assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n      var tx = new TransactionResponse(this, this.provider);\n      _classPrivateFieldSet(tx, _startBlock, startBlock);\n      return tx;\n    }\n  }]);\n  return TransactionResponse;\n}();\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx: tx,\n    other: other\n  };\n}\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx: tx\n  };\n}\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"names":["defineProperties","getBigInt","getNumber","hexlify","resolveProperties","assert","assertArgument","isError","makeError","accessListify","BN_0","BigInt","getValue","value","toJson","toString","FeeData","gasPrice","maxFeePerGas","maxPriorityFeePerGas","_classCallCheck","_defineProperty","_createClass","key","toJSON","_type","copyRequest","req","result","to","from","data","bigIntKeys","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","concat","err","e","f","numberKeys","_iterator2","_step2","accessList","blockTag","enableCcipReadEnabled","enableCcipRead","customData","_transactions","WeakMap","_Symbol$iterator","Symbol","iterator","Block","block","provider","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","transactions","map","tx","TransactionResponse","hash","number","timestamp","parentHash","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","get","_classPrivateFieldGet","txs","slice","length","operation","_this","index","next","undefined","Date","_getTransaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","indexOrHash","_iterator3","_step3","v","wrap","_callee$","_context","prev","toLowerCase","abrupt","t0","finish","Error","getTransaction","sent","stop","_x","apply","arguments","getPrefetchedTransaction","prefetchedTransactions","_iterator4","_step4","isMined","isLondon","orphanedEvent","createOrphanedBlockFilter","Log","log","topics","Object","freeze","transactionHash","blockHash","blockNumber","removed","address","transactionIndex","_getBlock","_callee2","_callee2$","_context2","getBlock","_getTransaction2","_callee3","_callee3$","_context3","_getTransactionReceipt","_callee4","receipt","_callee4$","_context4","getTransactionReceipt","removedEvent","createRemovedLogFilter","_logs","_Symbol$iterator2","TransactionReceipt","logs","contractAddress","logsBloom","cumulativeGasUsed","effectiveGasPrice","type","status","root","_this2","_getBlock2","_callee5","_callee5$","_context5","_getTransaction3","_callee6","_callee6$","_context6","_getResult","_callee7","_callee7$","_context7","getTransactionResult","getResult","_confirmations","_callee8","_callee8$","_context8","getBlockNumber","t1","t2","confirmations","createRemovedTransactionFilter","reorderedEvent","other","createReorderedTransactionFilter","_startBlock","chainId","signature","_getBlock3","_callee9","_callee9$","_context9","_getTransaction4","_callee10","_callee10$","_context10","_wait","_callee14","_confirms","_timeout","_this3","confirms","timeout","startBlock","nextScan","stopScanning","checkReplacement","waiter","_callee14$","_context14","_ref","_callee11","_yield$resolvePropert","mined","_iterator5","_step5","i","_receipt","reason","_callee11$","_context11","getTransactionCount","cancelled","replacement","replaceableTransaction","Promise","resolve","reject","cancellers","cancel","forEach","c","push","timer","setTimeout","clearTimeout","txListener","_ref2","_callee12","_callee12$","_context12","_x4","off","on","replaceListener","_ref3","_callee13","_callee13$","_context13","once","wait","_x2","_x3","isLegacy","isBerlin","Number","isInteger","orphan"],"sources":["C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\node_modules\\ethers\\src.ts\\providers\\provider.ts"],"sourcesContent":["//import { resolveAddress } from \"@ethersproject/address\";\nimport {\n    defineProperties, getBigInt, getNumber, hexlify, resolveProperties,\n    assert, assertArgument, isError, makeError\n} from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\n\nimport type { AddressLike, NameResolver } from \"../address/index.js\";\nimport type { BigNumberish, EventEmitterable } from \"../utils/index.js\";\nimport type { Signature } from \"../crypto/index.js\";\nimport type { AccessList, AccessListish, TransactionLike } from \"../transaction/index.js\";\n\nimport type { ContractRunner } from \"./contracts.js\";\nimport type { Network } from \"./network.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type BlockTag = BigNumberish | string;\n\nimport {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\n// -----------------------\n\nfunction getValue<T>(value: undefined | null | T): null | T {\n    if (value == null) { return null; }\n    return value;\n}\n\nfunction toJson(value: null | bigint): null | string {\n    if (value == null) { return null; }\n    return value.toString();\n}\n\n// @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    readonly gasPrice!: null | bigint;\n\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint) {\n        defineProperties<FeeData>(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            gasPrice, maxFeePerGas, maxPriorityFeePerGas\n        } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n\n\nexport interface TransactionRequest {\n    type?: null | number;\n\n    to?: null | AddressLike;\n    from?: null | AddressLike;\n\n    nonce?: null | number;\n\n    gasLimit?: null | BigNumberish;\n    gasPrice?: null | BigNumberish;\n\n    maxPriorityFeePerGas?: null | BigNumberish;\n    maxFeePerGas?: null | BigNumberish;\n\n    data?: null | string;\n    value?: null | BigNumberish;\n    chainId?: null | BigNumberish;\n\n    accessList?: null | AccessListish;\n\n    customData?: any;\n\n    // Only meaningful when used for call\n    blockTag?: BlockTag;\n    enableCcipRead?: boolean;\n\n    // Todo?\n    //gasMultiplier?: number;\n};\n\nexport interface PreparedTransactionRequest {\n    type?: number;\n\n    to?: AddressLike;\n    from?: AddressLike;\n\n    nonce?: number;\n\n    gasLimit?: bigint;\n    gasPrice?: bigint;\n\n    maxPriorityFeePerGas?: bigint;\n    maxFeePerGas?: bigint;\n\n    data?: string;\n    value?: bigint;\n    chainId?: bigint;\n\n    accessList?: AccessList;\n\n    customData?: any;\n\n    blockTag?: BlockTag;\n    enableCcipRead?: boolean;\n}\n\nexport function copyRequest(req: TransactionRequest): PreparedTransactionRequest {\n    const result: any = { };\n\n    // These could be addresses, ENS names or Addressables\n    if (req.to) { result.to = req.to; }\n    if (req.from) { result.from = req.from; }\n\n    if (req.data) { result.data = hexlify(req.data); }\n\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getBigInt((<any>req)[key], `request.${ key }`);\n    }\n\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getNumber((<any>req)[key], `request.${ key }`);\n    }\n\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n\n    if (\"blockTag\" in req) { result.blockTag = req.blockTag; }\n\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipReadEnabled = !!req.enableCcipRead\n    }\n\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n\n    return result;\n}\n\n//////////////////////\n// Block\n\n/**\n *  An Interface to indicate a [[Block]] has been included in the\n *  blockchain. This asserts a Type Guard that necessary properties\n *  are non-null.\n *\n *  Before a block is included, it is a //pending// block.\n */\nexport interface MinedBlock extends Block {\n    readonly number: number;\n    readonly hash: string;\n    readonly timestamp: number;\n    readonly date: Date;\n    readonly miner: string;\n}\n\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block implements BlockParams, Iterable<string> {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    readonly number!: number;\n\n    /**\n     *  The block hash.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    readonly timestamp!: number;\n\n    /**\n     *  The block hash of the parent block.\n     */\n    readonly parentHash!: string;\n\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    readonly nonce!: string;\n\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    readonly difficulty!: bigint;\n\n\n    /**\n     *  The total gas limit for this block.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The total gas used in this block.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    readonly miner!: string;\n\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    readonly extraData!: string;\n\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    readonly baseFeePerGas!: null | bigint;\n\n    readonly #transactions: Array<string | TransactionResponse>;\n\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block: BlockParams, provider: Provider) {\n\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof(tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n\n        defineProperties<Block>(this, {\n            provider,\n\n            hash: getValue(block.hash),\n\n            number: block.number,\n            timestamp: block.timestamp,\n\n            parentHash: block.parentHash,\n\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns the list of transaction hashes.\n     */\n    get transactions(): ReadonlyArray<string> {\n        return this.#transactions.map((tx) => {\n            if (typeof(tx) === \"string\") { return tx; }\n            return tx.hash;\n        });\n    }\n\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[provider_getBlock]].\n     */\n    get prefetchedTransactions(): Array<TransactionResponse> {\n        const txs = this.#transactions.slice();\n\n        // Doesn't matter...\n        if (txs.length === 0) { return [ ]; }\n\n        // Make sure we prefetched the transactions\n        assert(typeof(txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n\n        return <Array<TransactionResponse>>txs;\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash,\n            miner, nonce, number, parentHash, timestamp, transactions\n        } = this;\n\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The number of transactions in this block.\n     */\n    get length(): number { return this.#transactions.length; }\n\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date(): null | Date {\n        if (this.timestamp == null) { return null; }\n        return new Date(this.timestamp * 1000);\n    }\n\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash: number | string): Promise<TransactionResponse> {\n        // Find the internal value by its index or hash\n        let tx: string | TransactionResponse | undefined = undefined;\n        if (typeof(indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof(v) === \"string\") {\n                    if (v !== hash) { continue; }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) { continue; }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) { throw new Error(\"no such tx\"); }\n\n        if (typeof(tx) === \"string\") {\n            return <TransactionResponse>(await this.provider.getTransaction(tx));\n        } else {\n            return tx;\n        }\n    }\n\n    getPrefetchedTransaction(indexOrHash: number | string): TransactionResponse {\n        const txs = this.prefetchedTransactions;\n        if (typeof(indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) { return tx; }\n        }\n\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n\n    /**\n     *  Has this block been mined.\n     *\n     *  If true, the block has been typed-gaurded that all mined\n     *  properties are non-null.\n     */\n    isMined(): this is MinedBlock { return !!this.hash; }\n\n    /**\n     *\n     */\n    isLondon(): this is (Block & { baseFeePerGas: bigint }) {\n        return !!this.baseFeePerGas;\n    }\n\n    orphanedEvent(): OrphanFilter {\n        if (!this.isMined()) { throw new Error(\"\"); }\n        return createOrphanedBlockFilter(this);\n    }\n}\n\n//////////////////////\n// Log\n\nexport class Log implements LogParams {\n    readonly provider: Provider;\n\n    readonly transactionHash!: string;\n    readonly blockHash!: string;\n    readonly blockNumber!: number;\n\n    readonly removed!: boolean;\n\n    readonly address!: string;\n    readonly data!: string;\n\n    readonly topics!: ReadonlyArray<string>;\n\n    readonly index!: number;\n    readonly transactionIndex!: number;\n\n\n    constructor(log: LogParams, provider: Provider) {\n        this.provider = provider;\n\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties<Log>(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n\n            removed: log.removed,\n\n            address: log.address,\n            data: log.data,\n\n            topics,\n\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n\n    toJSON(): any {\n        const {\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        } = this;\n\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return block;\n    }\n\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return tx;\n    }\n\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", { });\n        return receipt;\n    }\n\n    removedEvent(): OrphanFilter {\n        return createRemovedLogFilter(this);\n    }\n}\n\n//////////////////////\n// Transaction Receipt\n\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n\nexport class TransactionReceipt implements TransactionReceiptParams, Iterable<Log> {\n    readonly provider!: Provider;\n\n    readonly to!: null | string;\n    readonly from!: string;\n    readonly contractAddress!: null | string;\n\n    readonly hash!: string;\n    readonly index!: number;\n\n    readonly blockHash!: string;\n    readonly blockNumber!: number;\n\n    readonly logsBloom!: string;\n\n    readonly gasUsed!: bigint;\n    readonly cumulativeGasUsed!: bigint;\n    readonly gasPrice!: bigint;\n\n    readonly type!: number;\n    //readonly byzantium!: boolean;\n    readonly status!: null | number;\n    readonly root!: null | string;\n\n    readonly #logs: ReadonlyArray<Log>;\n\n    constructor(tx: TransactionReceiptParams, provider: Provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n\n        defineProperties<TransactionReceipt>(this, {\n            provider,\n\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n\n            hash: tx.hash,\n            index: tx.index,\n\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n\n            logsBloom: tx.logsBloom,\n\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice: ((tx.effectiveGasPrice || tx.gasPrice) as bigint),\n\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n\n    get logs(): ReadonlyArray<Log> { return this.#logs; }\n\n    toJSON(): any {\n        const {\n            to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom,\n            logs, //byzantium, \n            status, root\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n\n    get length(): number { return this.logs.length; }\n\n    [Symbol.iterator](): Iterator<Log> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    get fee(): bigint {\n        return this.gasUsed * this.gasPrice;\n    }\n\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) { throw new Error(\"TODO\"); }\n        return tx;\n    }\n\n    async getResult(): Promise<string> {\n        return <string>(await this.provider.getTransactionResult(this.hash));\n    }\n\n    async confirmations(): Promise<number> {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n\n    removedEvent(): OrphanFilter {\n        return createRemovedTransactionFilter(this);\n    }\n\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n\n\n//////////////////////\n// Transaction Response\n\nexport interface MinedTransactionResponse extends TransactionResponse {\n    blockNumber: number;\n    blockHash: string;\n    date: Date;\n}\n\n/*\nexport type ReplacementDetectionSetup = {\n    to: string;\n    from: string;\n    value: bigint;\n    data: string;\n    nonce: number;\n    block: number;\n};\n*/\nexport class TransactionResponse implements TransactionLike<string>, TransactionResponseParams {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockNumber: null | number;\n\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockHash: null | string;\n\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    readonly index!: number;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    readonly type!: number;\n\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    readonly from!: string;\n\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    readonly nonce!: number;\n\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The data.\n     */\n    readonly data!: string;\n\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  The chain ID.\n     */\n    readonly chainId!: bigint;\n\n    /**\n     *  The signature.\n     */\n    readonly signature!: Signature;\n\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    readonly accessList!: null | AccessList;\n\n    #startBlock: number;\n\n    /**\n     *  Create a new TransactionResponse with %%tx%% parameters\n     *  connected to %%provider%%.\n     */\n    constructor(tx: TransactionResponseParams, provider: Provider) {\n        this.provider = provider;\n\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber: null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash: null;\n\n        this.hash = tx.hash;\n        this.index = tx.index;\n\n        this.type = tx.type;\n\n        this.from = tx.from;\n        this.to = tx.to || null;\n\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas: null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas: null;\n\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n\n        this.accessList = (tx.accessList != null) ? tx.accessList: null;\n\n        this.#startBlock = -1;\n    }\n\n    /**\n     *  Returns a JSON representation of this transaction.\n     */\n    toJSON(): any {\n        const {\n            blockNumber, blockHash, index, hash, type, to, from, nonce,\n            data, signature, accessList\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock(): Promise<null | Block> {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) { blockNumber = tx.blockNumber; }\n        }\n        if (blockNumber == null) { return null; }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction(): Promise<null | TransactionResponse> {\n        return this.provider.getTransaction(this.hash);\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms?: number, _timeout?: number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms == null) ? 1: _confirms;\n        const timeout = (_timeout == null) ? 0: _timeout;\n\n        let startBlock = this.#startBlock\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true: false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) { return null; }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n\n            // We were mined; no replacement\n            if (stopScanning) { return null; }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) { return; }\n\n            // We were replaced; start scanning for that transaction\n\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) { nextScan = this.#startBlock; }\n            }\n\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) { return null; }\n                const block = await this.provider.getBlock(nextScan, true);\n\n                // This should not happen; but we'll try again shortly\n                if (block == null) { return; }\n\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) { return; }\n                }\n\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx: TransactionResponse = await block.getTransaction(i);\n\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) { return null; }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) { return; }\n\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) { return; }\n\n                        // The reason we were replaced\n                        let reason: \"replaced\" | \"repriced\" | \"cancelled\" = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\"\n                        }\n\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n\n                nextScan++;\n            }\n            return;\n        };\n\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) { return receipt; }\n\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n\n            // Allow null only when the confirms is 0\n            if (confirms === 0) { return null; }\n        }\n\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers: Array<() => void> = [ ];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n\n            const txListener = async (receipt: TransactionReceipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    resolve(receipt);\n                }\n\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n\n        return await <Promise<TransactionReceipt>>waiter;\n    }\n\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined(): this is MinedTransactionResponse {\n        return (this.blockHash != null);\n    }\n\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy(): this is (TransactionResponse & { accessList: null, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 0)\n    }\n\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }){\n        return (this.type === 2);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent(): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        return createReorderedTransactionFilter(this, other);\n    }\n\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock: number): TransactionResponse {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\n\n\n//////////////////////\n// OrphanFilter\n\n/**\n *  An Orphan Filter allows detecting when an orphan block has\n *  resulted in dropping a block or transaction or has resulted\n *  in transactions changing order.\n *\n *  Not currently fully supported.\n */\nexport type OrphanFilter = {\n    orphan: \"drop-block\",\n    hash: string,\n    number: number\n} | {\n    orphan: \"drop-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"reorder-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"drop-log\",\n    log: {\n        transactionHash: string,\n        blockHash: string,\n        blockNumber: number,\n        address: string,\n        data: string,\n        topics: ReadonlyArray<string>,\n        index: number\n    }\n};\n\nfunction createOrphanedBlockFilter(block: { hash: string, number: number }): OrphanFilter {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\n\nfunction createReorderedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }, other?: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\n\nfunction createRemovedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"drop-transaction\", tx };\n}\n\nfunction createRemovedLogFilter(log: { blockHash: string, transactionHash: string, blockNumber: number, address: string, data: string, topics: ReadonlyArray<string>, index: number }): OrphanFilter {\n    return { orphan: \"drop-log\", log: {\n        transactionHash: log.transactionHash,\n        blockHash: log.blockHash,\n        blockNumber: log.blockNumber,\n        address: log.address,\n        data: log.data,\n        topics: Object.freeze(log.topics.slice()),\n        index: log.index\n    } };\n}\n\n//////////////////////\n// EventFilter\n\n/**\n *  A **TopicFilter** provides a struture to define bloom-filter\n *  queries.\n *\n *  Each field that is ``null`` matches **any** value, a field that is\n *  a ``string`` must match exactly that value and and ``array`` is\n *  effectively an ``OR``-ed set, where any one of those values must\n *  match.\n */\nexport type TopicFilter = Array<null | string | Array<string>>;\n\n// @TODO:\n//export type DeferableTopicFilter = Array<null | string | Promise<string> | Array<string | Promise<string>>>;\n\nexport interface EventFilter {\n    address?: AddressLike | Array<AddressLike>;\n    topics?: TopicFilter;\n}\n\nexport interface Filter extends EventFilter {\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n}\n\nexport interface FilterByBlockHash extends EventFilter {\n    blockHash?: string;\n}\n\n\n//////////////////////\n// ProviderEvent\n\nexport type ProviderEvent = string | Array<string | Array<string>> | EventFilter | OrphanFilter;\n\n\n//////////////////////\n// Provider\n\n/**\n *  A **Provider** is the primary method to interact with the read-only\n *  content on Ethereum.\n *\n *  It allows access to details about accounts, blocks and transactions\n *  and the ability to query event logs and simulate contract execution.\n *\n *  Account data includes the [balance](getBalance),\n *  [transaction count](getTransactionCount), [code](getCode) and\n *  [state trie storage](getStorage).\n *\n *  Simulating execution can be used to [call](call),\n *  [estimate gas](estimateGas) and\n *  [get transaction results](getTransactionResult).\n *\n *  The [[broadcastTransaction]] is the only method which allows updating\n *  the blockchain, but it is usually accessed by a [[Signer]], since a\n *  private key must be used to sign the transaction before it can be\n *  broadcast.\n */\nexport interface Provider extends ContractRunner, EventEmitterable<ProviderEvent>, NameResolver {\n\n    /**\n     *  The provider iteself.\n     *\n     *  This is part of the necessary API for executing a contract, as\n     *  it provides a common property on any [[ContractRunner]] that\n     *  can be used to access the read-only portion of the runner.\n     */\n    provider: this;\n\n    /**\n     *  Shutdown any resources this provider is using. No additional\n     *  calls should be made to this provider after calling this.\n     */\n    destroy(): void;\n\n    ////////////////////\n    // State\n\n    /**\n     *  Get the current block number.\n     */\n    getBlockNumber(): Promise<number>;\n\n    /**\n     *  Get the connected [[Network]].\n     */\n    getNetwork(): Promise<Network>;\n\n    /**\n     *  Get the best guess at the recommended [[FeeData]].\n     */\n    getFeeData(): Promise<FeeData>;\n\n\n    ////////////////////\n    // Account\n\n    /**\n     *  Get the account balance (in wei) of %%address%%. If %%blockTag%%\n     *  is specified and the node supports archive access for that\n     *  %%blockTag%%, the balance is as of that [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint>;\n\n    /**\n     *  Get the number of transactions ever sent for %%address%%, which\n     *  is used as the ``nonce`` when sending a transaction. If\n     *  %%blockTag%% is specified and the node supports archive access\n     *  for that %%blockTag%%, the transaction count is as of that\n     *  [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number>;\n\n    /**\n     *  Get the bytecode for %%address%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getCode(address: AddressLike, blockTag?: BlockTag): Promise<string>\n\n    /**\n     *  Get the storage slot value for %%address%% at slot %%position%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getStorage(address: AddressLike, position: BigNumberish, blockTag?: BlockTag): Promise<string>\n\n\n    ////////////////////\n    // Execution\n\n    /**\n     *  Estimates the amount of gas required to executre %%tx%%.\n     */\n    estimateGas(tx: TransactionRequest): Promise<bigint>;\n\n    /**\n     *  Simulate the execution of %%tx%%. If the call reverts, it will\n     *  throw a [[CallExceptionError]] which includes the revert data.\n     */\n    call(tx: TransactionRequest): Promise<string>\n\n    /**\n     *  Broadcasts the %%signedTx%% to the network, adding it to the\n     *  memory pool of any node for which the transaction meets the\n     *  rebroadcast requirements.\n     */\n    broadcastTransaction(signedTx: string): Promise<TransactionResponse>;\n\n\n    ////////////////////\n    // Queries\n\n    /**\n     *  Resolves to the block for %%blockHashOrBlockTag%%.\n     *\n     *  If %%prefetchTxs%%, and the backend supports including transactions\n     *  with block requests, all transactions will be included and the\n     *  [[Block]] object will not need to make remote calls for getting\n     *  transactions.\n     */\n    getBlock(blockHashOrBlockTag: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block>;\n\n    /**\n     *  Resolves to the transaction for %%hash%%.\n     *\n     *  If the transaction is unknown or on pruning nodes which\n     *  discard old transactions this resolves to ``null``.\n     */\n    getTransaction(hash: string): Promise<null | TransactionResponse>;\n\n    /**\n     *  Resolves to the transaction receipt for %%hash%%, if mined.\n     *\n     *  If the transaction has not been mined, is unknown or on\n     *  pruning nodes which discard old transactions this resolves to\n     *  ``null``.\n     */\n    getTransactionReceipt(hash: string): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the result returned by the executions of %%hash%%.\n     *\n     *  This is only supported on nodes with archive access and with\n     *  the necessary debug APIs enabled.\n     */\n    getTransactionResult(hash: string): Promise<null | string>;\n\n\n    ////////////////////\n    // Bloom-filter Queries\n\n    /**\n     *  Resolves to the list of Logs that match %%filter%%\n     */\n    getLogs(filter: Filter | FilterByBlockHash): Promise<Array<Log>>;\n\n\n    ////////////////////\n    // ENS\n\n    /**\n     *  Resolves to the address configured for the %%ensName%% or\n     *  ``null`` if unconfigured.\n     */\n    resolveName(ensName: string): Promise<null | string>;\n\n    /**\n     *  Resolves to the ENS name associated for the %%address%% or\n     *  ``null`` if the //primary name// is not configured.\n     *\n     *  Users must perform additional steps to configure a //primary name//,\n     *  which is not currently common.\n     */\n    lookupAddress(address: string): Promise<null | string>;\n\n    /**\n     *  Waits until the transaction %%hash%% is mined and has %%confirms%%\n     *  confirmations.\n     */\n    waitForTransaction(hash: string, confirms?: number, timeout?: number): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the block at %%blockTag%% once it has been mined.\n     *\n     *  This can be useful for waiting some number of blocks by using\n     *  the ``currentBlockNumber + N``.\n     */\n    waitForBlock(blockTag?: BlockTag): Promise<Block>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}