[{"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\index.js":"1","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\App.js":"2","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\Home.js":"3","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\WalletView.js":"4","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\RecoverAccount.js":"5","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\CreateAccount.js":"6","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\chains.js":"7"},{"size":344,"mtime":1728332488000,"results":"8","hashOfConfig":"9"},{"size":2245,"mtime":1728835961319,"results":"10","hashOfConfig":"9"},{"size":1047,"mtime":1728835914672,"results":"11","hashOfConfig":"9"},{"size":7043,"mtime":1728835938086,"results":"12","hashOfConfig":"9"},{"size":1905,"mtime":1728835926691,"results":"13","hashOfConfig":"9"},{"size":1665,"mtime":1728835900664,"results":"14","hashOfConfig":"9"},{"size":291,"mtime":1728831230906,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"usfet6",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\index.js",[],[],"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\App.js",[],[],"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\Home.js",[],[],"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\WalletView.js",["38","39"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n  Divider,\n  Tooltip,\n  List,\n  Avatar,\n  Spin,\n  Tabs,\n  Input,\n  Button,\n} from \"antd\";\nimport { LogoutOutlined } from \"@ant-design/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport logo from \"../noImg.png\";\nimport axios from \"axios\";\nimport { CHAINS_CONFIG } from \"../chains\";\nimport { ethers } from \"ethers\";\n\nfunction WalletView({\n  wallet,\n  setWallet,\n  seedPhrase,\n  setSeedPhrase,\n  selectedChain,\n}) {\n  const navigate = useNavigate();\n  const [tokens, setTokens] = useState(null);\n  const [nfts, setNfts] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [fetching, setFetching] = useState(true);\n  const [amountToSend, setAmountToSend] = useState(null);\n  const [sendToAddress, setSendToAddress] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [hash, setHash] = useState(null);\n\n\n  const items = [\n    {\n      key: \"3\",\n      label: `Tokens`,\n      children: (\n        <>\n          {tokens ? (\n            <>\n              <List\n                bordered\n                itemLayout=\"horizontal\"\n                dataSource={tokens}\n                renderItem={(item, index) => (\n                  <List.Item style={{ textAlign: \"left\" }}>\n                    <List.Item.Meta\n                      avatar={<Avatar src={item.logo || logo} />}\n                      title={item.symbol}\n                      description={item.name}\n                    />\n                    <div>\n                      {(\n                        Number(item.balance) /\n                        10 ** Number(item.decimals)\n                      ).toFixed(2)}{\" \"}\n                      Tokens\n                    </div>\n                  </List.Item>\n                )}\n              />\n            </>\n          ) : (\n            <>\n              <span>You seem to not have any tokens yet</span>\n              <p className=\"frontPageBottom\">\n                Find Alt Coin Gems:{\" \"}\n                <a\n                  href=\"https://moralismoney.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  money.moralis.io\n                </a>\n              </p>\n            </>\n          )}\n        </>\n      ),\n    },\n    {\n      key: \"2\",\n      label: `NFTs`,\n      children: (\n        <>\n          {nfts ? (\n            <>\n              {nfts.map((e, i) => {\n                return (\n                  <>\n                    {e && (\n                      <img\n                        key={i}\n                        className=\"nftImage\"\n                        alt=\"nftImage\"\n                        src={e}\n                      />\n                    )}\n                  </>\n                );\n              })}\n            </>\n          ) : (\n            <>\n              <span>You seem to not have any NFTs yet</span>\n              <p className=\"frontPageBottom\">\n                Find Alt Coin Gems:{\" \"}\n                <a\n                  href=\"https://moralismoney.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  money.moralis.io\n                </a>\n              </p>\n            </>\n          )}\n        </>\n      ),\n    },\n    {\n      key: \"1\",\n      label: `Transfer`,\n      children: (\n        <>\n          <h3>Native Balance </h3>\n          <h1>\n            {balance.toFixed(2)} {CHAINS_CONFIG[selectedChain].ticker}\n          </h1>\n          <div className=\"sendRow\">\n            <p style={{ width: \"90px\", textAlign: \"left\" }}> To:</p>\n            <Input\n              value={sendToAddress}\n              onChange={(e) => setSendToAddress(e.target.value)}\n              placeholder=\"0x...\"\n            />\n          </div>\n          <div className=\"sendRow\">\n            <p style={{ width: \"90px\", textAlign: \"left\" }}> Amount:</p>\n            <Input\n              value={amountToSend}\n              onChange={(e) => setAmountToSend(e.target.value)}\n              placeholder=\"Native tokens you wish to send...\"\n            />\n          </div>\n          <Button\n            style={{ width: \"100%\", marginTop: \"20px\", marginBottom: \"20px\" }}\n            type=\"primary\"\n            onClick={() => sendTransaction(sendToAddress, amountToSend)}\n          >\n            Send Tokens\n          </Button>\n          {processing && (\n            <>\n              <Spin />\n              {hash && (\n                <Tooltip title={hash}>\n                  <p>Hover For Tx Hash</p>\n                </Tooltip>\n              )}\n            </>\n          )}\n        </>\n      ),\n    },\n  ];\n\n  async function sendTransaction(to, amount) {\n\n    const chain = CHAINS_CONFIG[selectedChain];\n\n    const provider = new ethers.JsonRpcProvider(chain.rpcUrl);\n\n    const privateKey = ethers.Wallet.fromPhrase(seedPhrase).privateKey;\n\n    const wallet = new ethers.Wallet(privateKey, provider);\n\n    const tx = {\n      to: to,\n      value: ethers.parseEther(amount.toString()),\n    };\n\n    setProcessing(true);\n    try{\n      const transaction = await wallet.sendTransaction(tx);\n\n      setHash(transaction.hash);\n      const receipt = await transaction.wait();\n\n      setHash(null);\n      setProcessing(false);\n      setAmountToSend(null);\n      setSendToAddress(null);\n\n      if (receipt.status === 1) {\n        getAccountTokens();\n      } else {\n        console.log(\"failed\");\n      }\n\n\n    }catch(err){\n      setHash(null);\n      setProcessing(false);\n      setAmountToSend(null);\n      setSendToAddress(null);\n    }\n  }\n\n  async function getAccountTokens() {\n    setFetching(true);\n\n    const res = await axios.get(`http://localhost:3001/getTokens`, {\n      params: {\n        userAddress: wallet,\n        chain: selectedChain,\n      },\n    });\n\n    const response = res.data;\n\n    if (response.tokens.length > 0) {\n      setTokens(response.tokens);\n    }\n\n    if (response.nfts.length > 0) {\n      setNfts(response.nfts);\n    }\n\n    setBalance(response.balance);\n\n    setFetching(false);\n  }\n\n  function logout() {\n    setSeedPhrase(null);\n    setWallet(null);\n    setNfts(null);\n    setTokens(null);\n    setBalance(0);\n    navigate(\"/\");\n  }\n\n  useEffect(() => {\n    if (!wallet || !selectedChain) return;\n    setNfts(null);\n    setTokens(null);\n    setBalance(0);\n    getAccountTokens();\n  }, []);\n\n  useEffect(() => {\n    if (!wallet) return;\n    setNfts(null);\n    setTokens(null);\n    setBalance(0);\n    getAccountTokens();\n  }, [selectedChain]);\n\n  return (\n    <>\n      <div className=\"content\">\n        <div className=\"logoutButton\" onClick={logout}>\n          <LogoutOutlined />\n        </div>\n        <div className=\"walletName\">Wallet</div>\n        <Tooltip title={wallet}>\n          <div>\n            {wallet.slice(0, 4)}...{wallet.slice(38)}\n          </div>\n        </Tooltip>\n        <Divider />\n        {fetching ? (\n          <Spin />\n        ) : (\n          <Tabs defaultActiveKey=\"1\" items={items} className=\"walletView\" />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default WalletView;","C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\RecoverAccount.js",[],[],"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\components\\CreateAccount.js",[],[],"C:\\Users\\Oguzhan\\Desktop\\BlockGuard\\mwallet\\src\\chains.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":254,"column":6,"nodeType":"42","endLine":254,"endColumn":8,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":262,"column":6,"nodeType":"42","endLine":262,"endColumn":21,"suggestions":"45"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAccountTokens', 'selectedChain', and 'wallet'. Either include them or remove the dependency array.","ArrayExpression",["46"],"React Hook useEffect has missing dependencies: 'getAccountTokens' and 'wallet'. Either include them or remove the dependency array.",["47"],{"desc":"48","fix":"49"},{"desc":"48","fix":"50"},"Update the dependencies array to be: [getAccountTokens, selectedChain, wallet]",{"range":"51","text":"52"},{"range":"53","text":"52"},[6329,6331],"[getAccountTokens, selectedChain, wallet]",[6468,6483]]